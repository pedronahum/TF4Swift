// @generated by tf4swift-opgen â€” DO NOT EDIT.
// 2025-09-08 15:29:30 +0000
import TF4SwiftCore

public extension Ops.Math {
  /// Canonical operation names mapped to TensorFlow graph op names available in this build.
  enum Names {
    /// TF op: Acosh
    public static let acosh = "Acosh"
    /// TF op: Asin
    public static let asin = "Asin"
    /// TF op: Asinh
    public static let asinh = "Asinh"
    /// TF op: Atan
    public static let atan = "Atan"
    /// TF op: Atan2
    public static let atan2 = "Atan2"
    /// TF op: Atanh
    public static let atanh = "Atanh"
    /// TF op: Betainc
    public static let betainc = "Betainc"
    /// TF op: Cos
    public static let cos = "Cos"
    /// TF op: Cosh
    public static let cosh = "Cosh"
    /// TF op: Digamma
    public static let digamma = "Digamma"
    /// TF op: Erf
    public static let erf = "Erf"
    /// TF op: Erfc
    public static let erfc = "Erfc"
    /// TF op: Expm1
    public static let expm1 = "Expm1"
    /// TF op: FloorMod
    public static let floormod = "FloorMod"
    /// TF op: Greater
    public static let greater = "Greater"
    /// TF op: GreaterEqual
    public static let greater_equal = "GreaterEqual"
    /// TF op: Igamma
    public static let igamma = "Igamma"
    /// TF op: Igammac
    public static let igammac = "Igammac"
    /// TF op: InvertPermutation
    public static let invert_permutation = "InvertPermutation"
    /// TF op: IsFinite
    public static let is_finite = "IsFinite"
    /// TF op: IsInf
    public static let is_inf = "IsInf"
    /// TF op: IsNan
    public static let is_nan = "IsNan"
    /// TF op: Less
    public static let less = "Less"
    /// TF op: LessEqual
    public static let less_equal = "LessEqual"
    /// TF op: Lgamma
    public static let lgamma = "Lgamma"
    /// TF op: Log
    public static let log = "Log"
    /// TF op: Log1p
    public static let log1p = "Log1p"
    /// TF op: LogicalAnd
    public static let logical_and = "LogicalAnd"
    /// TF op: LogicalNot
    public static let logical_not = "LogicalNot"
    /// TF op: LogicalOr
    public static let logical_or = "LogicalOr"
    /// TF op: Maximum
    public static let maximum = "Maximum"
    /// TF op: Minimum
    public static let minimum = "Minimum"
    /// TF op: Neg
    public static let negative = "Neg"
    /// TF op: NextAfter
    public static let nextafter = "NextAfter"
    /// TF op: Polygamma
    public static let polygamma = "Polygamma"
    /// TF op: Reciprocal
    public static let reciprocal = "Reciprocal"
    /// TF op: Rint
    public static let rint = "Rint"
    /// TF op: SegmentMax
    public static let segment_max = "SegmentMax"
    /// TF op: SegmentMean
    public static let segment_mean = "SegmentMean"
    /// TF op: SegmentMin
    public static let segment_min = "SegmentMin"
    /// TF op: SegmentProd
    public static let segment_prod = "SegmentProd"
    /// TF op: SegmentSum
    public static let segment_sum = "SegmentSum"
    /// TF op: Sin
    public static let sin = "Sin"
    /// TF op: Sinh
    public static let sinh = "Sinh"
    /// TF op: Square
    public static let square = "Square"
    /// TF op: SquaredDifference
    public static let squared_difference = "SquaredDifference"
    /// TF op: Tan
    public static let tan = "Tan"
    /// TF op: Tanh
    public static let tanh = "Tanh"
    /// TF op: UnsortedSegmentMax
    public static let unsorted_segment_max = "UnsortedSegmentMax"
    /// TF op: UnsortedSegmentMin
    public static let unsorted_segment_min = "UnsortedSegmentMin"
    /// TF op: UnsortedSegmentProd
    public static let unsorted_segment_prod = "UnsortedSegmentProd"
    /// TF op: UnsortedSegmentSum
    public static let unsorted_segment_sum = "UnsortedSegmentSum"
    /// TF op: Xlogy
    public static let xlogy = "Xlogy"
    /// TF op: Zeta
    public static let zeta = "Zeta"
    public static let canonicalToGraph: [String:String] = [
      "acosh": "Acosh",
      "asin": "Asin",
      "asinh": "Asinh",
      "atan": "Atan",
      "atan2": "Atan2",
      "atanh": "Atanh",
      "betainc": "Betainc",
      "cos": "Cos",
      "cosh": "Cosh",
      "digamma": "Digamma",
      "erf": "Erf",
      "erfc": "Erfc",
      "expm1": "Expm1",
      "floormod": "FloorMod",
      "greater": "Greater",
      "greater_equal": "GreaterEqual",
      "igamma": "Igamma",
      "igammac": "Igammac",
      "invert_permutation": "InvertPermutation",
      "is_finite": "IsFinite",
      "is_inf": "IsInf",
      "is_nan": "IsNan",
      "less": "Less",
      "less_equal": "LessEqual",
      "lgamma": "Lgamma",
      "log": "Log",
      "log1p": "Log1p",
      "logical_and": "LogicalAnd",
      "logical_not": "LogicalNot",
      "logical_or": "LogicalOr",
      "maximum": "Maximum",
      "minimum": "Minimum",
      "negative": "Neg",
      "nextafter": "NextAfter",
      "polygamma": "Polygamma",
      "reciprocal": "Reciprocal",
      "rint": "Rint",
      "segment_max": "SegmentMax",
      "segment_mean": "SegmentMean",
      "segment_min": "SegmentMin",
      "segment_prod": "SegmentProd",
      "segment_sum": "SegmentSum",
      "sin": "Sin",
      "sinh": "Sinh",
      "square": "Square",
      "squared_difference": "SquaredDifference",
      "tan": "Tan",
      "tanh": "Tanh",
      "unsorted_segment_max": "UnsortedSegmentMax",
      "unsorted_segment_min": "UnsortedSegmentMin",
      "unsorted_segment_prod": "UnsortedSegmentProd",
      "unsorted_segment_sum": "UnsortedSegmentSum",
      "xlogy": "Xlogy",
      "zeta": "Zeta",
    ]
  }
}
