// @generated by tf4swift-opgen â€” DO NOT EDIT.
// 2025-09-08 10:21:08 +0000
import TF4SwiftCore

public extension Ops.Array {
  /// Canonical operation names mapped to TensorFlow graph op names available in this build.
  enum Names {
    /// TF op: Concat
    public static let concat = "Concat"
    /// TF op: ConcatOffset
    public static let concatOffset = "ConcatOffset"
    /// TF op: ConcatV2
    public static let concatV2 = "ConcatV2"
    /// TF op: ConcatenateDataset
    public static let concatenateDataset = "ConcatenateDataset"
    /// TF op: ExpandDims
    public static let expandDims = "ExpandDims"
    /// TF op: Gather
    public static let gather = "Gather"
    /// TF op: GatherNd
    public static let gatherNd = "GatherNd"
    /// TF op: GatherV2
    public static let gatherV2 = "GatherV2"
    /// TF op: OneHot
    public static let oneHot = "OneHot"
    /// TF op: Pack
    public static let pack = "Pack"
    /// TF op: Pad
    public static let pad = "Pad"
    /// TF op: PadV2
    public static let padV2 = "PadV2"
    /// TF op: Rank
    public static let rank = "Rank"
    /// TF op: Reshape
    public static let reshape = "Reshape"
    /// TF op: RestoreSlice
    public static let restoreSlice = "RestoreSlice"
    /// TF op: Reverse
    public static let reverse = "Reverse"
    /// TF op: ReverseSequence
    public static let reverseSequence = "ReverseSequence"
    /// TF op: RiscSlice
    public static let riscSlice = "RiscSlice"
    /// TF op: ScatterAdd
    public static let scatterAdd = "ScatterAdd"
    /// TF op: ScatterDiv
    public static let scatterDiv = "ScatterDiv"
    /// TF op: ScatterMax
    public static let scatterMax = "ScatterMax"
    /// TF op: ScatterMin
    public static let scatterMin = "ScatterMin"
    /// TF op: ScatterMul
    public static let scatterMul = "ScatterMul"
    /// TF op: ScatterNdAdd
    public static let scatterNdAdd = "ScatterNdAdd"
    /// TF op: ScatterNdMax
    public static let scatterNdMax = "ScatterNdMax"
    /// TF op: ScatterNdMin
    public static let scatterNdMin = "ScatterNdMin"
    /// TF op: ScatterNdNonAliasingAdd
    public static let scatterNdNonAliasingAdd = "ScatterNdNonAliasingAdd"
    /// TF op: ScatterNdSub
    public static let scatterNdSub = "ScatterNdSub"
    /// TF op: ScatterNdUpdate
    public static let scatterNdUpdate = "ScatterNdUpdate"
    /// TF op: ScatterSub
    public static let scatterSub = "ScatterSub"
    /// TF op: ScatterUpdate
    public static let scatterUpdate = "ScatterUpdate"
    /// TF op: ScatterNd
    public static let scatter_nd = "ScatterNd"
    /// TF op: Shape
    public static let shape = "Shape"
    /// TF op: ShapeN
    public static let shapeN = "ShapeN"
    /// TF op: Size
    public static let size = "Size"
    /// TF op: Slice
    public static let slice = "Slice"
    /// TF op: SparseSlice
    public static let sparseSlice = "SparseSlice"
    /// TF op: Split
    public static let split = "Split"
    /// TF op: SplitDedupData
    public static let splitDedupData = "SplitDedupData"
    /// TF op: SplitV
    public static let splitV = "SplitV"
    /// TF op: Squeeze
    public static let squeeze = "Squeeze"
    /// TF op: StridedSlice
    public static let stridedSlice = "StridedSlice"
    /// TF op: Tile
    public static let tile = "Tile"
    /// TF op: TopK
    public static let topK = "TopK"
    /// TF op: TopKUnique
    public static let topKUnique = "TopKUnique"
    /// TF op: TopKV2
    public static let topKV2 = "TopKV2"
    /// TF op: TopKWithUnique
    public static let topKWithUnique = "TopKWithUnique"
    /// TF op: Transpose
    public static let transpose = "Transpose"
    /// TF op: Unique
    public static let unique = "Unique"
    /// TF op: UniqueV2
    public static let uniqueV2 = "UniqueV2"
    /// TF op: Unpack
    public static let unpack = "Unpack"
    /// TF op: Where
    public static let `where` = "Where"
    public static let canonicalToGraph: [String:String] = [
      "concat": "Concat",
      "concatOffset": "ConcatOffset",
      "concatV2": "ConcatV2",
      "concatenateDataset": "ConcatenateDataset",
      "expandDims": "ExpandDims",
      "gather": "Gather",
      "gatherNd": "GatherNd",
      "gatherV2": "GatherV2",
      "oneHot": "OneHot",
      "pack": "Pack",
      "pad": "Pad",
      "padV2": "PadV2",
      "rank": "Rank",
      "reshape": "Reshape",
      "restoreSlice": "RestoreSlice",
      "reverse": "Reverse",
      "reverseSequence": "ReverseSequence",
      "riscSlice": "RiscSlice",
      "scatterAdd": "ScatterAdd",
      "scatterDiv": "ScatterDiv",
      "scatterMax": "ScatterMax",
      "scatterMin": "ScatterMin",
      "scatterMul": "ScatterMul",
      "scatterNdAdd": "ScatterNdAdd",
      "scatterNdMax": "ScatterNdMax",
      "scatterNdMin": "ScatterNdMin",
      "scatterNdNonAliasingAdd": "ScatterNdNonAliasingAdd",
      "scatterNdSub": "ScatterNdSub",
      "scatterNdUpdate": "ScatterNdUpdate",
      "scatterSub": "ScatterSub",
      "scatterUpdate": "ScatterUpdate",
      "scatter_nd": "ScatterNd",
      "shape": "Shape",
      "shapeN": "ShapeN",
      "size": "Size",
      "slice": "Slice",
      "sparseSlice": "SparseSlice",
      "split": "Split",
      "splitDedupData": "SplitDedupData",
      "splitV": "SplitV",
      "squeeze": "Squeeze",
      "stridedSlice": "StridedSlice",
      "tile": "Tile",
      "topK": "TopK",
      "topKUnique": "TopKUnique",
      "topKV2": "TopKV2",
      "topKWithUnique": "TopKWithUnique",
      "transpose": "Transpose",
      "unique": "Unique",
      "uniqueV2": "UniqueV2",
      "unpack": "Unpack",
      "where": "Where",
    ]
  }
}
