// @generated by tf4swift-opgen â€” DO NOT EDIT.
// 2025-09-08 15:29:30 +0000
import TF4SwiftCore

public extension Ops.Other {
  /// Canonical operation names mapped to TensorFlow graph op names available in this build.
  enum Names {
    /// TF op: _Arg
    public static let _Arg = "_Arg"
    /// TF op: _ArrayToList
    public static let _ArrayToList = "_ArrayToList"
    /// TF op: _ConfigureDistributedTPU
    public static let _ConfigureDistributedTPU = "_ConfigureDistributedTPU"
    /// TF op: _DeviceArg
    public static let _DeviceArg = "_DeviceArg"
    /// TF op: _DeviceRetval
    public static let _DeviceRetval = "_DeviceRetval"
    /// TF op: _DisconnectHostFromDistributedTPUSystem
    public static let _DisconnectHostFromDistributedTPUSystem = "_DisconnectHostFromDistributedTPUSystem"
    /// TF op: _EagerConst
    public static let _EagerConst = "_EagerConst"
    /// TF op: _FusedBatchNormEx
    public static let _FusedBatchNormEx = "_FusedBatchNormEx"
    /// TF op: _FusedBatchNormGradEx
    public static let _FusedBatchNormGradEx = "_FusedBatchNormGradEx"
    /// TF op: _FusedConv2D
    public static let _FusedConv2D = "_FusedConv2D"
    /// TF op: _FusedDepthwiseConv2dNative
    public static let _FusedDepthwiseConv2dNative = "_FusedDepthwiseConv2dNative"
    /// TF op: _FusedMatMul
    public static let _FusedMatMul = "_FusedMatMul"
    /// TF op: _HostCast
    public static let _HostCast = "_HostCast"
    /// TF op: _HostRecv
    public static let _HostRecv = "_HostRecv"
    /// TF op: _HostSend
    public static let _HostSend = "_HostSend"
    /// TF op: _If
    public static let _If = "_If"
    /// TF op: _InitializeHostForDistributedTPU
    public static let _InitializeHostForDistributedTPU = "_InitializeHostForDistributedTPU"
    /// TF op: _ListToArray
    public static let _ListToArray = "_ListToArray"
    /// TF op: _NcclBroadcastRecv
    public static let _NcclBroadcastRecv = "_NcclBroadcastRecv"
    /// TF op: _NcclBroadcastSend
    public static let _NcclBroadcastSend = "_NcclBroadcastSend"
    /// TF op: _NcclReduceRecv
    public static let _NcclReduceRecv = "_NcclReduceRecv"
    /// TF op: _NcclReduceSend
    public static let _NcclReduceSend = "_NcclReduceSend"
    /// TF op: _ParallelConcatStart
    public static let _ParallelConcatStart = "_ParallelConcatStart"
    /// TF op: _ParallelConcatUpdate
    public static let _ParallelConcatUpdate = "_ParallelConcatUpdate"
    /// TF op: _ReadVariablesOp
    public static let _ReadVariablesOp = "_ReadVariablesOp"
    /// TF op: _Recv
    public static let _Recv = "_Recv"
    /// TF op: _Retval
    public static let _Retval = "_Retval"
    /// TF op: _ScopedAllocator
    public static let _ScopedAllocator = "_ScopedAllocator"
    /// TF op: _ScopedAllocatorConcat
    public static let _ScopedAllocatorConcat = "_ScopedAllocatorConcat"
    /// TF op: _ScopedAllocatorSplit
    public static let _ScopedAllocatorSplit = "_ScopedAllocatorSplit"
    /// TF op: _Send
    public static let _Send = "_Send"
    /// TF op: _SetGlobalTPUArray
    public static let _SetGlobalTPUArray = "_SetGlobalTPUArray"
    /// TF op: _ShutdownDistributedTPU
    public static let _ShutdownDistributedTPU = "_ShutdownDistributedTPU"
    /// TF op: _SwitchN
    public static let _SwitchN = "_SwitchN"
    /// TF op: _TPUCompileMlir
    public static let _TPUCompileMlir = "_TPUCompileMlir"
    /// TF op: _TPUReplicate
    public static let _TPUReplicate = "_TPUReplicate"
    /// TF op: _TensorToHashBucketFast
    public static let _TensorToHashBucketFast = "_TensorToHashBucketFast"
    /// TF op: _UnaryOpsComposition
    public static let _UnaryOpsComposition = "_UnaryOpsComposition"
    /// TF op: _VarHandlesOp
    public static let _VarHandlesOp = "_VarHandlesOp"
    /// TF op: _WaitForDistributedTPU
    public static let _WaitForDistributedTPU = "_WaitForDistributedTPU"
    /// TF op: _While
    public static let _While = "_While"
    /// TF op: _XlaCompile
    public static let _XlaCompile = "_XlaCompile"
    /// TF op: _XlaCompileMlirPlaceholderProgramKey
    public static let _XlaCompileMlirPlaceholderProgramKey = "_XlaCompileMlirPlaceholderProgramKey"
    /// TF op: _XlaHostComputeMlir
    public static let _XlaHostComputeMlir = "_XlaHostComputeMlir"
    /// TF op: _XlaMerge
    public static let _XlaMerge = "_XlaMerge"
    /// TF op: _XlaRecvAtHost
    public static let _XlaRecvAtHost = "_XlaRecvAtHost"
    /// TF op: _XlaRecvAtHostV2
    public static let _XlaRecvAtHostV2 = "_XlaRecvAtHostV2"
    /// TF op: _XlaRun
    public static let _XlaRun = "_XlaRun"
    /// TF op: _XlaSendFromHost
    public static let _XlaSendFromHost = "_XlaSendFromHost"
    /// TF op: _XlaSendFromHostV2
    public static let _XlaSendFromHostV2 = "_XlaSendFromHostV2"
    /// TF op: Abort
    public static let abort = "Abort"
    /// TF op: Abs
    public static let abs = "Abs"
    /// TF op: AccumulateNV2
    public static let accumulateNV2 = "AccumulateNV2"
    /// TF op: AccumulatorApplyGradient
    public static let accumulatorApplyGradient = "AccumulatorApplyGradient"
    /// TF op: AccumulatorNumAccumulated
    public static let accumulatorNumAccumulated = "AccumulatorNumAccumulated"
    /// TF op: AccumulatorSetGlobalStep
    public static let accumulatorSetGlobalStep = "AccumulatorSetGlobalStep"
    /// TF op: AccumulatorTakeGradient
    public static let accumulatorTakeGradient = "AccumulatorTakeGradient"
    /// TF op: Acos
    public static let acos = "Acos"
    /// TF op: Add
    public static let add = "Add"
    /// TF op: AddManySparseToTensorsMap
    public static let addManySparseToTensorsMap = "AddManySparseToTensorsMap"
    /// TF op: AddN
    public static let addN = "AddN"
    /// TF op: AddSparseToTensorsMap
    public static let addSparseToTensorsMap = "AddSparseToTensorsMap"
    /// TF op: AddV2
    public static let addV2 = "AddV2"
    /// TF op: AdjustContrast
    public static let adjustContrast = "AdjustContrast"
    /// TF op: AdjustContrastv2
    public static let adjustContrastv2 = "AdjustContrastv2"
    /// TF op: AdjustHue
    public static let adjustHue = "AdjustHue"
    /// TF op: AdjustSaturation
    public static let adjustSaturation = "AdjustSaturation"
    /// TF op: All
    public static let all = "All"
    /// TF op: AllCandidateSampler
    public static let allCandidateSampler = "AllCandidateSampler"
    /// TF op: AllToAll
    public static let allToAll = "AllToAll"
    /// TF op: CollectiveReduce
    public static let all_reduce = "CollectiveReduce"
    /// TF op: Angle
    public static let angle = "Angle"
    /// TF op: AnonymousHashTable
    public static let anonymousHashTable = "AnonymousHashTable"
    /// TF op: AnonymousIterator
    public static let anonymousIterator = "AnonymousIterator"
    /// TF op: AnonymousIteratorV2
    public static let anonymousIteratorV2 = "AnonymousIteratorV2"
    /// TF op: AnonymousIteratorV3
    public static let anonymousIteratorV3 = "AnonymousIteratorV3"
    /// TF op: AnonymousMemoryCache
    public static let anonymousMemoryCache = "AnonymousMemoryCache"
    /// TF op: AnonymousMultiDeviceIterator
    public static let anonymousMultiDeviceIterator = "AnonymousMultiDeviceIterator"
    /// TF op: AnonymousMultiDeviceIteratorV3
    public static let anonymousMultiDeviceIteratorV3 = "AnonymousMultiDeviceIteratorV3"
    /// TF op: AnonymousMutableDenseHashTable
    public static let anonymousMutableDenseHashTable = "AnonymousMutableDenseHashTable"
    /// TF op: AnonymousMutableHashTable
    public static let anonymousMutableHashTable = "AnonymousMutableHashTable"
    /// TF op: AnonymousMutableHashTableOfTensors
    public static let anonymousMutableHashTableOfTensors = "AnonymousMutableHashTableOfTensors"
    /// TF op: AnonymousRandomSeedGenerator
    public static let anonymousRandomSeedGenerator = "AnonymousRandomSeedGenerator"
    /// TF op: AnonymousSeedGenerator
    public static let anonymousSeedGenerator = "AnonymousSeedGenerator"
    /// TF op: Any
    public static let `any` = "Any"
    /// TF op: ApplyAdaMax
    public static let applyAdaMax = "ApplyAdaMax"
    /// TF op: ApplyAdadelta
    public static let applyAdadelta = "ApplyAdadelta"
    /// TF op: ApplyAdagrad
    public static let applyAdagrad = "ApplyAdagrad"
    /// TF op: ApplyAdagradDA
    public static let applyAdagradDA = "ApplyAdagradDA"
    /// TF op: ApplyAdagradV2
    public static let applyAdagradV2 = "ApplyAdagradV2"
    /// TF op: ApplyAdam
    public static let applyAdam = "ApplyAdam"
    /// TF op: ApplyAddSign
    public static let applyAddSign = "ApplyAddSign"
    /// TF op: ApplyCenteredRMSProp
    public static let applyCenteredRMSProp = "ApplyCenteredRMSProp"
    /// TF op: ApplyFtrl
    public static let applyFtrl = "ApplyFtrl"
    /// TF op: ApplyFtrlV2
    public static let applyFtrlV2 = "ApplyFtrlV2"
    /// TF op: ApplyGradientDescent
    public static let applyGradientDescent = "ApplyGradientDescent"
    /// TF op: ApplyMomentum
    public static let applyMomentum = "ApplyMomentum"
    /// TF op: ApplyPowerSign
    public static let applyPowerSign = "ApplyPowerSign"
    /// TF op: ApplyProximalAdagrad
    public static let applyProximalAdagrad = "ApplyProximalAdagrad"
    /// TF op: ApplyProximalGradientDescent
    public static let applyProximalGradientDescent = "ApplyProximalGradientDescent"
    /// TF op: ApplyRMSProp
    public static let applyRMSProp = "ApplyRMSProp"
    /// TF op: ApproxTopK
    public static let approxTopK = "ApproxTopK"
    /// TF op: ApproximateEqual
    public static let approximateEqual = "ApproximateEqual"
    /// TF op: ArgMax
    public static let argMax = "ArgMax"
    /// TF op: ArgMin
    public static let argMin = "ArgMin"
    /// TF op: AsString
    public static let as_string = "AsString"
    /// TF op: Assert
    public static let assert = "Assert"
    /// TF op: AssertCardinalityDataset
    public static let assertCardinalityDataset = "AssertCardinalityDataset"
    /// TF op: AssertNextDataset
    public static let assertNextDataset = "AssertNextDataset"
    /// TF op: AssertPrevDataset
    public static let assertPrevDataset = "AssertPrevDataset"
    /// TF op: Assign
    public static let assign = "Assign"
    /// TF op: AssignAdd
    public static let assignAdd = "AssignAdd"
    /// TF op: AssignAddVariableOp
    public static let assignAddVariableOp = "AssignAddVariableOp"
    /// TF op: AssignSub
    public static let assignSub = "AssignSub"
    /// TF op: AssignSubVariableOp
    public static let assignSubVariableOp = "AssignSubVariableOp"
    /// TF op: AssignVariableOp
    public static let assignVariableOp = "AssignVariableOp"
    /// TF op: AssignVariableXlaConcatND
    public static let assignVariableXlaConcatND = "AssignVariableXlaConcatND"
    /// TF op: AudioSpectrogram
    public static let audioSpectrogram = "AudioSpectrogram"
    /// TF op: AudioSummary
    public static let audioSummary = "AudioSummary"
    /// TF op: AudioSummaryV2
    public static let audioSummaryV2 = "AudioSummaryV2"
    /// TF op: AutoShardDataset
    public static let autoShardDataset = "AutoShardDataset"
    /// TF op: AvgPool
    public static let avgPool = "AvgPool"
    /// TF op: AvgPool3D
    public static let avgPool3D = "AvgPool3D"
    /// TF op: AvgPool3DGrad
    public static let avgPool3DGrad = "AvgPool3DGrad"
    /// TF op: AvgPoolGrad
    public static let avgPoolGrad = "AvgPoolGrad"
    /// TF op: BandedTriangularSolve
    public static let bandedTriangularSolve = "BandedTriangularSolve"
    /// TF op: Barrier
    public static let barrier = "Barrier"
    /// TF op: BarrierClose
    public static let barrierClose = "BarrierClose"
    /// TF op: BarrierIncompleteSize
    public static let barrierIncompleteSize = "BarrierIncompleteSize"
    /// TF op: BarrierInsertMany
    public static let barrierInsertMany = "BarrierInsertMany"
    /// TF op: BarrierReadySize
    public static let barrierReadySize = "BarrierReadySize"
    /// TF op: BarrierTakeMany
    public static let barrierTakeMany = "BarrierTakeMany"
    /// TF op: Batch
    public static let batch = "Batch"
    /// TF op: BatchCholesky
    public static let batchCholesky = "BatchCholesky"
    /// TF op: BatchCholeskyGrad
    public static let batchCholeskyGrad = "BatchCholeskyGrad"
    /// TF op: BatchDataset
    public static let batchDataset = "BatchDataset"
    /// TF op: BatchDatasetV2
    public static let batchDatasetV2 = "BatchDatasetV2"
    /// TF op: BatchFFT
    public static let batchFFT = "BatchFFT"
    /// TF op: BatchFFT2D
    public static let batchFFT2D = "BatchFFT2D"
    /// TF op: BatchFFT3D
    public static let batchFFT3D = "BatchFFT3D"
    /// TF op: BatchFunction
    public static let batchFunction = "BatchFunction"
    /// TF op: BatchIFFT
    public static let batchIFFT = "BatchIFFT"
    /// TF op: BatchIFFT2D
    public static let batchIFFT2D = "BatchIFFT2D"
    /// TF op: BatchIFFT3D
    public static let batchIFFT3D = "BatchIFFT3D"
    /// TF op: BatchMatMul
    public static let batchMatMul = "BatchMatMul"
    /// TF op: BatchMatMulV2
    public static let batchMatMulV2 = "BatchMatMulV2"
    /// TF op: BatchMatMulV3
    public static let batchMatMulV3 = "BatchMatMulV3"
    /// TF op: BatchMatrixBandPart
    public static let batchMatrixBandPart = "BatchMatrixBandPart"
    /// TF op: BatchMatrixDeterminant
    public static let batchMatrixDeterminant = "BatchMatrixDeterminant"
    /// TF op: BatchMatrixDiag
    public static let batchMatrixDiag = "BatchMatrixDiag"
    /// TF op: BatchMatrixDiagPart
    public static let batchMatrixDiagPart = "BatchMatrixDiagPart"
    /// TF op: BatchMatrixInverse
    public static let batchMatrixInverse = "BatchMatrixInverse"
    /// TF op: BatchMatrixSetDiag
    public static let batchMatrixSetDiag = "BatchMatrixSetDiag"
    /// TF op: BatchMatrixSolve
    public static let batchMatrixSolve = "BatchMatrixSolve"
    /// TF op: BatchMatrixSolveLs
    public static let batchMatrixSolveLs = "BatchMatrixSolveLs"
    /// TF op: BatchMatrixTriangularSolve
    public static let batchMatrixTriangularSolve = "BatchMatrixTriangularSolve"
    /// TF op: BatchNormWithGlobalNormalization
    public static let batchNormWithGlobalNormalization = "BatchNormWithGlobalNormalization"
    /// TF op: BatchNormWithGlobalNormalizationGrad
    public static let batchNormWithGlobalNormalizationGrad = "BatchNormWithGlobalNormalizationGrad"
    /// TF op: BatchSelfAdjointEig
    public static let batchSelfAdjointEig = "BatchSelfAdjointEig"
    /// TF op: BatchSelfAdjointEigV2
    public static let batchSelfAdjointEigV2 = "BatchSelfAdjointEigV2"
    /// TF op: BatchSvd
    public static let batchSvd = "BatchSvd"
    /// TF op: BatchToSpace
    public static let batchToSpace = "BatchToSpace"
    /// TF op: BatchToSpaceND
    public static let batch_to_space_nd = "BatchToSpaceND"
    /// TF op: BesselI0
    public static let besselI0 = "BesselI0"
    /// TF op: BesselI0e
    public static let besselI0e = "BesselI0e"
    /// TF op: BesselI1
    public static let besselI1 = "BesselI1"
    /// TF op: BesselI1e
    public static let besselI1e = "BesselI1e"
    /// TF op: BesselJ0
    public static let besselJ0 = "BesselJ0"
    /// TF op: BesselJ1
    public static let besselJ1 = "BesselJ1"
    /// TF op: BesselK0
    public static let besselK0 = "BesselK0"
    /// TF op: BesselK0e
    public static let besselK0e = "BesselK0e"
    /// TF op: BesselK1
    public static let besselK1 = "BesselK1"
    /// TF op: BesselK1e
    public static let besselK1e = "BesselK1e"
    /// TF op: BesselY0
    public static let besselY0 = "BesselY0"
    /// TF op: BesselY1
    public static let besselY1 = "BesselY1"
    /// TF op: BiasAdd
    public static let biasAdd = "BiasAdd"
    /// TF op: BiasAddGrad
    public static let biasAddGrad = "BiasAddGrad"
    /// TF op: BiasAddV1
    public static let biasAddV1 = "BiasAddV1"
    /// TF op: Bincount
    public static let bincount = "Bincount"
    /// TF op: Bitcast
    public static let bitcast = "Bitcast"
    /// TF op: BitwiseAnd
    public static let bitwise_and = "BitwiseAnd"
    /// TF op: BitwiseOr
    public static let bitwise_or = "BitwiseOr"
    /// TF op: BitwiseXor
    public static let bitwise_xor = "BitwiseXor"
    /// TF op: BlockLSTM
    public static let blockLSTM = "BlockLSTM"
    /// TF op: BlockLSTMGrad
    public static let blockLSTMGrad = "BlockLSTMGrad"
    /// TF op: BlockLSTMGradV2
    public static let blockLSTMGradV2 = "BlockLSTMGradV2"
    /// TF op: BlockLSTMV2
    public static let blockLSTMV2 = "BlockLSTMV2"
    /// TF op: BoostedTreesAggregateStats
    public static let boostedTreesAggregateStats = "BoostedTreesAggregateStats"
    /// TF op: BoostedTreesBucketize
    public static let boostedTreesBucketize = "BoostedTreesBucketize"
    /// TF op: BoostedTreesCalculateBestFeatureSplit
    public static let boostedTreesCalculateBestFeatureSplit = "BoostedTreesCalculateBestFeatureSplit"
    /// TF op: BoostedTreesCalculateBestFeatureSplitV2
    public static let boostedTreesCalculateBestFeatureSplitV2 = "BoostedTreesCalculateBestFeatureSplitV2"
    /// TF op: BoostedTreesCalculateBestGainsPerFeature
    public static let boostedTreesCalculateBestGainsPerFeature = "BoostedTreesCalculateBestGainsPerFeature"
    /// TF op: BoostedTreesCenterBias
    public static let boostedTreesCenterBias = "BoostedTreesCenterBias"
    /// TF op: BoostedTreesCreateEnsemble
    public static let boostedTreesCreateEnsemble = "BoostedTreesCreateEnsemble"
    /// TF op: BoostedTreesCreateQuantileStreamResource
    public static let boostedTreesCreateQuantileStreamResource = "BoostedTreesCreateQuantileStreamResource"
    /// TF op: BoostedTreesDeserializeEnsemble
    public static let boostedTreesDeserializeEnsemble = "BoostedTreesDeserializeEnsemble"
    /// TF op: BoostedTreesEnsembleResourceHandleOp
    public static let boostedTreesEnsembleResourceHandleOp = "BoostedTreesEnsembleResourceHandleOp"
    /// TF op: BoostedTreesExampleDebugOutputs
    public static let boostedTreesExampleDebugOutputs = "BoostedTreesExampleDebugOutputs"
    /// TF op: BoostedTreesFlushQuantileSummaries
    public static let boostedTreesFlushQuantileSummaries = "BoostedTreesFlushQuantileSummaries"
    /// TF op: BoostedTreesGetEnsembleStates
    public static let boostedTreesGetEnsembleStates = "BoostedTreesGetEnsembleStates"
    /// TF op: BoostedTreesMakeQuantileSummaries
    public static let boostedTreesMakeQuantileSummaries = "BoostedTreesMakeQuantileSummaries"
    /// TF op: BoostedTreesMakeStatsSummary
    public static let boostedTreesMakeStatsSummary = "BoostedTreesMakeStatsSummary"
    /// TF op: BoostedTreesPredict
    public static let boostedTreesPredict = "BoostedTreesPredict"
    /// TF op: BoostedTreesQuantileStreamResourceAddSummaries
    public static let boostedTreesQuantileStreamResourceAddSummaries = "BoostedTreesQuantileStreamResourceAddSummaries"
    /// TF op: BoostedTreesQuantileStreamResourceDeserialize
    public static let boostedTreesQuantileStreamResourceDeserialize = "BoostedTreesQuantileStreamResourceDeserialize"
    /// TF op: BoostedTreesQuantileStreamResourceFlush
    public static let boostedTreesQuantileStreamResourceFlush = "BoostedTreesQuantileStreamResourceFlush"
    /// TF op: BoostedTreesQuantileStreamResourceGetBucketBoundaries
    public static let boostedTreesQuantileStreamResourceGetBucketBoundaries = "BoostedTreesQuantileStreamResourceGetBucketBoundaries"
    /// TF op: BoostedTreesQuantileStreamResourceHandleOp
    public static let boostedTreesQuantileStreamResourceHandleOp = "BoostedTreesQuantileStreamResourceHandleOp"
    /// TF op: BoostedTreesSerializeEnsemble
    public static let boostedTreesSerializeEnsemble = "BoostedTreesSerializeEnsemble"
    /// TF op: BoostedTreesSparseAggregateStats
    public static let boostedTreesSparseAggregateStats = "BoostedTreesSparseAggregateStats"
    /// TF op: BoostedTreesSparseCalculateBestFeatureSplit
    public static let boostedTreesSparseCalculateBestFeatureSplit = "BoostedTreesSparseCalculateBestFeatureSplit"
    /// TF op: BoostedTreesTrainingPredict
    public static let boostedTreesTrainingPredict = "BoostedTreesTrainingPredict"
    /// TF op: BoostedTreesUpdateEnsemble
    public static let boostedTreesUpdateEnsemble = "BoostedTreesUpdateEnsemble"
    /// TF op: BoostedTreesUpdateEnsembleV2
    public static let boostedTreesUpdateEnsembleV2 = "BoostedTreesUpdateEnsembleV2"
    /// TF op: BroadcastArgs
    public static let broadcastArgs = "BroadcastArgs"
    /// TF op: BroadcastGradientArgs
    public static let broadcastGradientArgs = "BroadcastGradientArgs"
    /// TF op: BroadcastTo
    public static let broadcastTo = "BroadcastTo"
    /// TF op: CollectiveBcastRecv
    public static let broadcast_recv = "CollectiveBcastRecv"
    /// TF op: CollectiveBcastSend
    public static let broadcast_send = "CollectiveBcastSend"
    /// TF op: Bucketize
    public static let bucketize = "Bucketize"
    /// TF op: BytesProducedStatsDataset
    public static let bytesProducedStatsDataset = "BytesProducedStatsDataset"
    /// TF op: CSRSparseMatrixComponents
    public static let cSRSparseMatrixComponents = "CSRSparseMatrixComponents"
    /// TF op: CSRSparseMatrixToDense
    public static let cSRSparseMatrixToDense = "CSRSparseMatrixToDense"
    /// TF op: CSRSparseMatrixToSparseTensor
    public static let cSRSparseMatrixToSparseTensor = "CSRSparseMatrixToSparseTensor"
    /// TF op: CSVDataset
    public static let cSVDataset = "CSVDataset"
    /// TF op: CSVDatasetV2
    public static let cSVDatasetV2 = "CSVDatasetV2"
    /// TF op: CTCBeamSearchDecoder
    public static let cTCBeamSearchDecoder = "CTCBeamSearchDecoder"
    /// TF op: CTCGreedyDecoder
    public static let cTCGreedyDecoder = "CTCGreedyDecoder"
    /// TF op: CTCLoss
    public static let cTCLoss = "CTCLoss"
    /// TF op: CTCLossV2
    public static let cTCLossV2 = "CTCLossV2"
    /// TF op: CacheDataset
    public static let cacheDataset = "CacheDataset"
    /// TF op: CacheDatasetV2
    public static let cacheDatasetV2 = "CacheDatasetV2"
    /// TF op: Case
    public static let `case` = "Case"
    /// TF op: Cast
    public static let cast = "Cast"
    /// TF op: Ceil
    public static let ceil = "Ceil"
    /// TF op: CheckNumericsV2
    public static let checkNumericsV2 = "CheckNumericsV2"
    /// TF op: CheckPinned
    public static let checkPinned = "CheckPinned"
    /// TF op: CheckNumerics
    public static let check_numerics = "CheckNumerics"
    /// TF op: CholeskyGrad
    public static let choleskyGrad = "CholeskyGrad"
    /// TF op: ChooseFastestBranchDataset
    public static let chooseFastestBranchDataset = "ChooseFastestBranchDataset"
    /// TF op: ChooseFastestDataset
    public static let chooseFastestDataset = "ChooseFastestDataset"
    /// TF op: ClipByValue
    public static let clipByValue = "ClipByValue"
    /// TF op: CloseSummaryWriter
    public static let closeSummaryWriter = "CloseSummaryWriter"
    /// TF op: CollateTPUEmbeddingMemory
    public static let collateTPUEmbeddingMemory = "CollateTPUEmbeddingMemory"
    /// TF op: CollectiveAllToAllV2
    public static let collectiveAllToAllV2 = "CollectiveAllToAllV2"
    /// TF op: CollectiveAllToAllV3
    public static let collectiveAllToAllV3 = "CollectiveAllToAllV3"
    /// TF op: CollectiveAssignGroupV2
    public static let collectiveAssignGroupV2 = "CollectiveAssignGroupV2"
    /// TF op: CollectiveBcastRecvV2
    public static let collectiveBcastRecvV2 = "CollectiveBcastRecvV2"
    /// TF op: CollectiveBcastSendV2
    public static let collectiveBcastSendV2 = "CollectiveBcastSendV2"
    /// TF op: CollectiveGather
    public static let collectiveGather = "CollectiveGather"
    /// TF op: CollectiveGatherV2
    public static let collectiveGatherV2 = "CollectiveGatherV2"
    /// TF op: CollectiveInitializeCommunicator
    public static let collectiveInitializeCommunicator = "CollectiveInitializeCommunicator"
    /// TF op: CollectivePermute
    public static let collectivePermute = "CollectivePermute"
    /// TF op: CollectiveReduceScatterV2
    public static let collectiveReduceScatterV2 = "CollectiveReduceScatterV2"
    /// TF op: CollectiveReduceV2
    public static let collectiveReduceV2 = "CollectiveReduceV2"
    /// TF op: CollectiveReduceV3
    public static let collectiveReduceV3 = "CollectiveReduceV3"
    /// TF op: CombinedNonMaxSuppression
    public static let combinedNonMaxSuppression = "CombinedNonMaxSuppression"
    /// TF op: Complex
    public static let complex = "Complex"
    /// TF op: ComplexAbs
    public static let complexAbs = "ComplexAbs"
    /// TF op: CompositeTensorVariantFromComponents
    public static let compositeTensorVariantFromComponents = "CompositeTensorVariantFromComponents"
    /// TF op: CompositeTensorVariantToComponents
    public static let compositeTensorVariantToComponents = "CompositeTensorVariantToComponents"
    /// TF op: CompressElement
    public static let compressElement = "CompressElement"
    /// TF op: ComputeAccidentalHits
    public static let computeAccidentalHits = "ComputeAccidentalHits"
    /// TF op: ComputeBatchSize
    public static let computeBatchSize = "ComputeBatchSize"
    /// TF op: ComputeDedupDataSize
    public static let computeDedupDataSize = "ComputeDedupDataSize"
    /// TF op: ComputeDedupDataSizeV2
    public static let computeDedupDataSizeV2 = "ComputeDedupDataSizeV2"
    /// TF op: ComputeDedupDataTupleMask
    public static let computeDedupDataTupleMask = "ComputeDedupDataTupleMask"
    /// TF op: ComputeDedupDataTupleMaskV2
    public static let computeDedupDataTupleMaskV2 = "ComputeDedupDataTupleMaskV2"
    /// TF op: Concat
    public static let concat = "Concat"
    /// TF op: ConcatOffset
    public static let concatOffset = "ConcatOffset"
    /// TF op: ConcatV2
    public static let concatV2 = "ConcatV2"
    /// TF op: ConcatenateDataset
    public static let concatenateDataset = "ConcatenateDataset"
    /// TF op: ConditionalAccumulator
    public static let conditionalAccumulator = "ConditionalAccumulator"
    /// TF op: ConfigureAndInitializeGlobalTPU
    public static let configureAndInitializeGlobalTPU = "ConfigureAndInitializeGlobalTPU"
    /// TF op: ConfigureDistributedTPU
    public static let configureDistributedTPU = "ConfigureDistributedTPU"
    /// TF op: ConfigureTPUEmbedding
    public static let configureTPUEmbedding = "ConfigureTPUEmbedding"
    /// TF op: ConfigureTPUEmbeddingHost
    public static let configureTPUEmbeddingHost = "ConfigureTPUEmbeddingHost"
    /// TF op: ConfigureTPUEmbeddingMemory
    public static let configureTPUEmbeddingMemory = "ConfigureTPUEmbeddingMemory"
    /// TF op: Conj
    public static let conj = "Conj"
    /// TF op: ConjugateTranspose
    public static let conjugateTranspose = "ConjugateTranspose"
    /// TF op: ConnectTPUEmbeddingHosts
    public static let connectTPUEmbeddingHosts = "ConnectTPUEmbeddingHosts"
    /// TF op: Const
    public static let const = "Const"
    /// TF op: ConsumeMutexLock
    public static let consumeMutexLock = "ConsumeMutexLock"
    /// TF op: ControlTrigger
    public static let controlTrigger = "ControlTrigger"
    /// TF op: Conv
    public static let conv = "Conv"
    /// TF op: Conv2D
    public static let conv2D = "Conv2D"
    /// TF op: Conv2DBackpropFilter
    public static let conv2DBackpropFilter = "Conv2DBackpropFilter"
    /// TF op: Conv2DBackpropFilterV2
    public static let conv2DBackpropFilterV2 = "Conv2DBackpropFilterV2"
    /// TF op: Conv2DBackpropInput
    public static let conv2DBackpropInput = "Conv2DBackpropInput"
    /// TF op: Conv2DBackpropInputV2
    public static let conv2DBackpropInputV2 = "Conv2DBackpropInputV2"
    /// TF op: Conv3D
    public static let conv3D = "Conv3D"
    /// TF op: Conv3DBackpropFilter
    public static let conv3DBackpropFilter = "Conv3DBackpropFilter"
    /// TF op: Conv3DBackpropInput
    public static let conv3DBackpropInput = "Conv3DBackpropInput"
    /// TF op: Conv3DBackpropInputV2
    public static let conv3DBackpropInputV2 = "Conv3DBackpropInputV2"
    /// TF op: ConvertToCooTensor
    public static let convertToCooTensor = "ConvertToCooTensor"
    /// TF op: ConvertToListOfSparseCoreCooTensors
    public static let convertToListOfSparseCoreCooTensors = "ConvertToListOfSparseCoreCooTensors"
    /// TF op: ConvertToSparseCoreCsrWrappedCooTensor
    public static let convertToSparseCoreCsrWrappedCooTensor = "ConvertToSparseCoreCsrWrappedCooTensor"
    /// TF op: Copy
    public static let copy = "Copy"
    /// TF op: CopyHost
    public static let copyHost = "CopyHost"
    /// TF op: CopyToMesh
    public static let copyToMesh = "CopyToMesh"
    /// TF op: CopyToMeshGrad
    public static let copyToMeshGrad = "CopyToMeshGrad"
    /// TF op: CountUpTo
    public static let countUpTo = "CountUpTo"
    /// TF op: CreateSummaryDbWriter
    public static let createSummaryDbWriter = "CreateSummaryDbWriter"
    /// TF op: CreateSummaryFileWriter
    public static let createSummaryFileWriter = "CreateSummaryFileWriter"
    /// TF op: CropAndResize
    public static let cropAndResize = "CropAndResize"
    /// TF op: CropAndResizeGradBoxes
    public static let cropAndResizeGradBoxes = "CropAndResizeGradBoxes"
    /// TF op: CropAndResizeGradImage
    public static let cropAndResizeGradImage = "CropAndResizeGradImage"
    /// TF op: CrossReplicaSum
    public static let crossReplicaSum = "CrossReplicaSum"
    /// TF op: CudnnRNN
    public static let cudnnRNN = "CudnnRNN"
    /// TF op: CudnnRNNBackprop
    public static let cudnnRNNBackprop = "CudnnRNNBackprop"
    /// TF op: CudnnRNNBackpropV2
    public static let cudnnRNNBackpropV2 = "CudnnRNNBackpropV2"
    /// TF op: CudnnRNNBackpropV3
    public static let cudnnRNNBackpropV3 = "CudnnRNNBackpropV3"
    /// TF op: CudnnRNNCanonicalToParams
    public static let cudnnRNNCanonicalToParams = "CudnnRNNCanonicalToParams"
    /// TF op: CudnnRNNCanonicalToParamsV2
    public static let cudnnRNNCanonicalToParamsV2 = "CudnnRNNCanonicalToParamsV2"
    /// TF op: CudnnRNNParamsSize
    public static let cudnnRNNParamsSize = "CudnnRNNParamsSize"
    /// TF op: CudnnRNNParamsToCanonical
    public static let cudnnRNNParamsToCanonical = "CudnnRNNParamsToCanonical"
    /// TF op: CudnnRNNParamsToCanonicalV2
    public static let cudnnRNNParamsToCanonicalV2 = "CudnnRNNParamsToCanonicalV2"
    /// TF op: CudnnRNNV2
    public static let cudnnRNNV2 = "CudnnRNNV2"
    /// TF op: CudnnRNNV3
    public static let cudnnRNNV3 = "CudnnRNNV3"
    /// TF op: Cumprod
    public static let cumprod = "Cumprod"
    /// TF op: Cumsum
    public static let cumsum = "Cumsum"
    /// TF op: CumulativeLogsumexp
    public static let cumulativeLogsumexp = "CumulativeLogsumexp"
    /// TF op: DTensorRestoreV2
    public static let dTensorRestoreV2 = "DTensorRestoreV2"
    /// TF op: DTensorSetGlobalTPUArray
    public static let dTensorSetGlobalTPUArray = "DTensorSetGlobalTPUArray"
    /// TF op: DataFormatDimMap
    public static let dataFormatDimMap = "DataFormatDimMap"
    /// TF op: DataFormatVecPermute
    public static let dataFormatVecPermute = "DataFormatVecPermute"
    /// TF op: DataServiceDataset
    public static let dataServiceDataset = "DataServiceDataset"
    /// TF op: DataServiceDatasetV2
    public static let dataServiceDatasetV2 = "DataServiceDatasetV2"
    /// TF op: DataServiceDatasetV3
    public static let dataServiceDatasetV3 = "DataServiceDatasetV3"
    /// TF op: DataServiceDatasetV4
    public static let dataServiceDatasetV4 = "DataServiceDatasetV4"
    /// TF op: DatasetCardinality
    public static let datasetCardinality = "DatasetCardinality"
    /// TF op: DatasetFingerprint
    public static let datasetFingerprint = "DatasetFingerprint"
    /// TF op: DatasetFromGraph
    public static let datasetFromGraph = "DatasetFromGraph"
    /// TF op: DatasetToGraph
    public static let datasetToGraph = "DatasetToGraph"
    /// TF op: DatasetToGraphV2
    public static let datasetToGraphV2 = "DatasetToGraphV2"
    /// TF op: DatasetToSingleElement
    public static let datasetToSingleElement = "DatasetToSingleElement"
    /// TF op: DatasetToTFRecord
    public static let datasetToTFRecord = "DatasetToTFRecord"
    /// TF op: Dawsn
    public static let dawsn = "Dawsn"
    /// TF op: DebugGradientIdentity
    public static let debugGradientIdentity = "DebugGradientIdentity"
    /// TF op: DebugGradientRefIdentity
    public static let debugGradientRefIdentity = "DebugGradientRefIdentity"
    /// TF op: DebugIdentity
    public static let debugIdentity = "DebugIdentity"
    /// TF op: DebugIdentityV2
    public static let debugIdentityV2 = "DebugIdentityV2"
    /// TF op: DebugIdentityV3
    public static let debugIdentityV3 = "DebugIdentityV3"
    /// TF op: DebugNanCount
    public static let debugNanCount = "DebugNanCount"
    /// TF op: DebugNumericSummary
    public static let debugNumericSummary = "DebugNumericSummary"
    /// TF op: DebugNumericSummaryV2
    public static let debugNumericSummaryV2 = "DebugNumericSummaryV2"
    /// TF op: DecodeAndCropJpeg
    public static let decodeAndCropJpeg = "DecodeAndCropJpeg"
    /// TF op: DecodeBmp
    public static let decodeBmp = "DecodeBmp"
    /// TF op: DecodeCSV
    public static let decodeCSV = "DecodeCSV"
    /// TF op: DecodeGif
    public static let decodeGif = "DecodeGif"
    /// TF op: DecodeImage
    public static let decodeImage = "DecodeImage"
    /// TF op: DecodeJSONExample
    public static let decodeJSONExample = "DecodeJSONExample"
    /// TF op: DecodeJpeg
    public static let decodeJpeg = "DecodeJpeg"
    /// TF op: DecodePaddedRaw
    public static let decodePaddedRaw = "DecodePaddedRaw"
    /// TF op: DecodePng
    public static let decodePng = "DecodePng"
    /// TF op: DecodeRaw
    public static let decodeRaw = "DecodeRaw"
    /// TF op: DecodeWav
    public static let decode_wav = "DecodeWav"
    /// TF op: DeepCopy
    public static let deepCopy = "DeepCopy"
    /// TF op: DeleteIterator
    public static let deleteIterator = "DeleteIterator"
    /// TF op: DeleteMemoryCache
    public static let deleteMemoryCache = "DeleteMemoryCache"
    /// TF op: DeleteMultiDeviceIterator
    public static let deleteMultiDeviceIterator = "DeleteMultiDeviceIterator"
    /// TF op: DeleteRandomSeedGenerator
    public static let deleteRandomSeedGenerator = "DeleteRandomSeedGenerator"
    /// TF op: DeleteRpcFutureResource
    public static let deleteRpcFutureResource = "DeleteRpcFutureResource"
    /// TF op: DeleteSeedGenerator
    public static let deleteSeedGenerator = "DeleteSeedGenerator"
    /// TF op: DeleteSessionTensor
    public static let deleteSessionTensor = "DeleteSessionTensor"
    /// TF op: DenseBincount
    public static let denseBincount = "DenseBincount"
    /// TF op: DenseCountSparseOutput
    public static let denseCountSparseOutput = "DenseCountSparseOutput"
    /// TF op: DenseToCSRSparseMatrix
    public static let denseToCSRSparseMatrix = "DenseToCSRSparseMatrix"
    /// TF op: DenseToDenseSetOperation
    public static let denseToDenseSetOperation = "DenseToDenseSetOperation"
    /// TF op: DenseToSparseBatchDataset
    public static let denseToSparseBatchDataset = "DenseToSparseBatchDataset"
    /// TF op: DenseToSparseSetOperation
    public static let denseToSparseSetOperation = "DenseToSparseSetOperation"
    /// TF op: DepthToSpace
    public static let depthToSpace = "DepthToSpace"
    /// TF op: DepthwiseConv2dNative
    public static let depthwiseConv2dNative = "DepthwiseConv2dNative"
    /// TF op: DepthwiseConv2dNativeBackpropFilter
    public static let depthwiseConv2dNativeBackpropFilter = "DepthwiseConv2dNativeBackpropFilter"
    /// TF op: DepthwiseConv2dNativeBackpropInput
    public static let depthwiseConv2dNativeBackpropInput = "DepthwiseConv2dNativeBackpropInput"
    /// TF op: Dequantize
    public static let dequantize = "Dequantize"
    /// TF op: DeserializeIterator
    public static let deserializeIterator = "DeserializeIterator"
    /// TF op: DeserializeManySparse
    public static let deserializeManySparse = "DeserializeManySparse"
    /// TF op: DeserializeSparse
    public static let deserializeSparse = "DeserializeSparse"
    /// TF op: DestroyResourceOp
    public static let destroyResourceOp = "DestroyResourceOp"
    /// TF op: DestroyTemporaryVariable
    public static let destroyTemporaryVariable = "DestroyTemporaryVariable"
    /// TF op: DeviceIndex
    public static let deviceIndex = "DeviceIndex"
    /// TF op: DiagPart
    public static let diagPart = "DiagPart"
    /// TF op: Dilation2D
    public static let dilation2D = "Dilation2D"
    /// TF op: Dilation2DBackpropFilter
    public static let dilation2DBackpropFilter = "Dilation2DBackpropFilter"
    /// TF op: Dilation2DBackpropInput
    public static let dilation2DBackpropInput = "Dilation2DBackpropInput"
    /// TF op: DirectedInterleaveDataset
    public static let directedInterleaveDataset = "DirectedInterleaveDataset"
    /// TF op: DisableCopyOnRead
    public static let disableCopyOnRead = "DisableCopyOnRead"
    /// TF op: DistributedSave
    public static let distributedSave = "DistributedSave"
    /// TF op: Div
    public static let div = "Div"
    /// TF op: DivNoNan
    public static let divNoNan = "DivNoNan"
    /// TF op: DrawBoundingBoxes
    public static let drawBoundingBoxes = "DrawBoundingBoxes"
    /// TF op: DrawBoundingBoxesV2
    public static let drawBoundingBoxesV2 = "DrawBoundingBoxesV2"
    /// TF op: DummyIterationCounter
    public static let dummyIterationCounter = "DummyIterationCounter"
    /// TF op: DummyMemoryCache
    public static let dummyMemoryCache = "DummyMemoryCache"
    /// TF op: DummySeedGenerator
    public static let dummySeedGenerator = "DummySeedGenerator"
    /// TF op: DynamicEnqueueTPUEmbeddingArbitraryTensorBatch
    public static let dynamicEnqueueTPUEmbeddingArbitraryTensorBatch = "DynamicEnqueueTPUEmbeddingArbitraryTensorBatch"
    /// TF op: DynamicEnqueueTPUEmbeddingRaggedTensorBatch
    public static let dynamicEnqueueTPUEmbeddingRaggedTensorBatch = "DynamicEnqueueTPUEmbeddingRaggedTensorBatch"
    /// TF op: DynamicPartition
    public static let dynamicPartition = "DynamicPartition"
    /// TF op: DynamicStitch
    public static let dynamicStitch = "DynamicStitch"
    /// TF op: EagerPyFunc
    public static let eagerPyFunc = "EagerPyFunc"
    /// TF op: EditDistance
    public static let editDistance = "EditDistance"
    /// TF op: Eig
    public static let eig = "Eig"
    /// TF op: Einsum
    public static let einsum = "Einsum"
    /// TF op: EluGrad
    public static let eluGrad = "EluGrad"
    /// TF op: Empty
    public static let empty = "Empty"
    /// TF op: EmptyTensorList
    public static let emptyTensorList = "EmptyTensorList"
    /// TF op: EmptyTensorMap
    public static let emptyTensorMap = "EmptyTensorMap"
    /// TF op: EncodeJpeg
    public static let encodeJpeg = "EncodeJpeg"
    /// TF op: EncodeJpegVariableQuality
    public static let encodeJpegVariableQuality = "EncodeJpegVariableQuality"
    /// TF op: EncodeWav
    public static let encode_wav = "EncodeWav"
    /// TF op: EnqueueTPUEmbeddingArbitraryTensorBatch
    public static let enqueueTPUEmbeddingArbitraryTensorBatch = "EnqueueTPUEmbeddingArbitraryTensorBatch"
    /// TF op: EnqueueTPUEmbeddingBatch
    public static let enqueueTPUEmbeddingBatch = "EnqueueTPUEmbeddingBatch"
    /// TF op: EnqueueTPUEmbeddingIntegerBatch
    public static let enqueueTPUEmbeddingIntegerBatch = "EnqueueTPUEmbeddingIntegerBatch"
    /// TF op: EnqueueTPUEmbeddingRaggedTensorBatch
    public static let enqueueTPUEmbeddingRaggedTensorBatch = "EnqueueTPUEmbeddingRaggedTensorBatch"
    /// TF op: EnqueueTPUEmbeddingSparseBatch
    public static let enqueueTPUEmbeddingSparseBatch = "EnqueueTPUEmbeddingSparseBatch"
    /// TF op: EnqueueTPUEmbeddingSparseTensorBatch
    public static let enqueueTPUEmbeddingSparseTensorBatch = "EnqueueTPUEmbeddingSparseTensorBatch"
    /// TF op: EnsureShape
    public static let ensureShape = "EnsureShape"
    /// TF op: Enter
    public static let enter = "Enter"
    /// TF op: Equal
    public static let equal = "Equal"
    /// TF op: Erfinv
    public static let erfinv = "Erfinv"
    /// TF op: EuclideanNorm
    public static let euclideanNorm = "EuclideanNorm"
    /// TF op: ExecuteTPUEmbeddingPartitioner
    public static let executeTPUEmbeddingPartitioner = "ExecuteTPUEmbeddingPartitioner"
    /// TF op: Exit
    public static let exit = "Exit"
    /// TF op: Exp
    public static let exp = "Exp"
    /// TF op: ExpandDims
    public static let expandDims = "ExpandDims"
    /// TF op: ExperimentalAssertNextDataset
    public static let experimentalAssertNextDataset = "ExperimentalAssertNextDataset"
    /// TF op: ExperimentalAutoShardDataset
    public static let experimentalAutoShardDataset = "ExperimentalAutoShardDataset"
    /// TF op: ExperimentalBytesProducedStatsDataset
    public static let experimentalBytesProducedStatsDataset = "ExperimentalBytesProducedStatsDataset"
    /// TF op: ExperimentalCSVDataset
    public static let experimentalCSVDataset = "ExperimentalCSVDataset"
    /// TF op: ExperimentalChooseFastestDataset
    public static let experimentalChooseFastestDataset = "ExperimentalChooseFastestDataset"
    /// TF op: ExperimentalDatasetCardinality
    public static let experimentalDatasetCardinality = "ExperimentalDatasetCardinality"
    /// TF op: ExperimentalDatasetToTFRecord
    public static let experimentalDatasetToTFRecord = "ExperimentalDatasetToTFRecord"
    /// TF op: ExperimentalDenseToSparseBatchDataset
    public static let experimentalDenseToSparseBatchDataset = "ExperimentalDenseToSparseBatchDataset"
    /// TF op: ExperimentalDirectedInterleaveDataset
    public static let experimentalDirectedInterleaveDataset = "ExperimentalDirectedInterleaveDataset"
    /// TF op: ExperimentalGroupByReducerDataset
    public static let experimentalGroupByReducerDataset = "ExperimentalGroupByReducerDataset"
    /// TF op: ExperimentalGroupByWindowDataset
    public static let experimentalGroupByWindowDataset = "ExperimentalGroupByWindowDataset"
    /// TF op: ExperimentalIgnoreErrorsDataset
    public static let experimentalIgnoreErrorsDataset = "ExperimentalIgnoreErrorsDataset"
    /// TF op: ExperimentalIteratorGetDevice
    public static let experimentalIteratorGetDevice = "ExperimentalIteratorGetDevice"
    /// TF op: ExperimentalLMDBDataset
    public static let experimentalLMDBDataset = "ExperimentalLMDBDataset"
    /// TF op: ExperimentalLatencyStatsDataset
    public static let experimentalLatencyStatsDataset = "ExperimentalLatencyStatsDataset"
    /// TF op: ExperimentalMapAndBatchDataset
    public static let experimentalMapAndBatchDataset = "ExperimentalMapAndBatchDataset"
    /// TF op: ExperimentalMapDataset
    public static let experimentalMapDataset = "ExperimentalMapDataset"
    /// TF op: ExperimentalMatchingFilesDataset
    public static let experimentalMatchingFilesDataset = "ExperimentalMatchingFilesDataset"
    /// TF op: ExperimentalMaxIntraOpParallelismDataset
    public static let experimentalMaxIntraOpParallelismDataset = "ExperimentalMaxIntraOpParallelismDataset"
    /// TF op: ExperimentalNonSerializableDataset
    public static let experimentalNonSerializableDataset = "ExperimentalNonSerializableDataset"
    /// TF op: ExperimentalParallelInterleaveDataset
    public static let experimentalParallelInterleaveDataset = "ExperimentalParallelInterleaveDataset"
    /// TF op: ExperimentalParseExampleDataset
    public static let experimentalParseExampleDataset = "ExperimentalParseExampleDataset"
    /// TF op: ExperimentalPrivateThreadPoolDataset
    public static let experimentalPrivateThreadPoolDataset = "ExperimentalPrivateThreadPoolDataset"
    /// TF op: ExperimentalRandomDataset
    public static let experimentalRandomDataset = "ExperimentalRandomDataset"
    /// TF op: ExperimentalRebatchDataset
    public static let experimentalRebatchDataset = "ExperimentalRebatchDataset"
    /// TF op: ExperimentalScanDataset
    public static let experimentalScanDataset = "ExperimentalScanDataset"
    /// TF op: ExperimentalSetStatsAggregatorDataset
    public static let experimentalSetStatsAggregatorDataset = "ExperimentalSetStatsAggregatorDataset"
    /// TF op: ExperimentalSleepDataset
    public static let experimentalSleepDataset = "ExperimentalSleepDataset"
    /// TF op: ExperimentalSlidingWindowDataset
    public static let experimentalSlidingWindowDataset = "ExperimentalSlidingWindowDataset"
    /// TF op: ExperimentalSqlDataset
    public static let experimentalSqlDataset = "ExperimentalSqlDataset"
    /// TF op: ExperimentalStatsAggregatorHandle
    public static let experimentalStatsAggregatorHandle = "ExperimentalStatsAggregatorHandle"
    /// TF op: ExperimentalStatsAggregatorSummary
    public static let experimentalStatsAggregatorSummary = "ExperimentalStatsAggregatorSummary"
    /// TF op: ExperimentalTakeWhileDataset
    public static let experimentalTakeWhileDataset = "ExperimentalTakeWhileDataset"
    /// TF op: ExperimentalThreadPoolDataset
    public static let experimentalThreadPoolDataset = "ExperimentalThreadPoolDataset"
    /// TF op: ExperimentalThreadPoolHandle
    public static let experimentalThreadPoolHandle = "ExperimentalThreadPoolHandle"
    /// TF op: ExperimentalUnbatchDataset
    public static let experimentalUnbatchDataset = "ExperimentalUnbatchDataset"
    /// TF op: ExperimentalUniqueDataset
    public static let experimentalUniqueDataset = "ExperimentalUniqueDataset"
    /// TF op: Expint
    public static let expint = "Expint"
    /// TF op: ExtractGlimpse
    public static let extractGlimpse = "ExtractGlimpse"
    /// TF op: ExtractGlimpseV2
    public static let extractGlimpseV2 = "ExtractGlimpseV2"
    /// TF op: ExtractImagePatches
    public static let extractImagePatches = "ExtractImagePatches"
    /// TF op: ExtractJpegShape
    public static let extractJpegShape = "ExtractJpegShape"
    /// TF op: ExtractVolumePatches
    public static let extractVolumePatches = "ExtractVolumePatches"
    /// TF op: FFTND
    public static let fFTND = "FFTND"
    /// TF op: FIFOQueue
    public static let fIFOQueue = "FIFOQueue"
    /// TF op: FIFOQueueV2
    public static let fIFOQueueV2 = "FIFOQueueV2"
    /// TF op: Fact
    public static let fact = "Fact"
    /// TF op: FakeParam
    public static let fakeParam = "FakeParam"
    /// TF op: FakeQueue
    public static let fakeQueue = "FakeQueue"
    /// TF op: FakeQuantWithMinMaxArgs
    public static let fake_quant_with_min_max_args = "FakeQuantWithMinMaxArgs"
    /// TF op: FakeQuantWithMinMaxArgsGradient
    public static let fake_quant_with_min_max_args_gradient = "FakeQuantWithMinMaxArgsGradient"
    /// TF op: FakeQuantWithMinMaxVars
    public static let fake_quant_with_min_max_vars = "FakeQuantWithMinMaxVars"
    /// TF op: FakeQuantWithMinMaxVarsGradient
    public static let fake_quant_with_min_max_vars_gradient = "FakeQuantWithMinMaxVarsGradient"
    /// TF op: FakeQuantWithMinMaxVarsPerChannel
    public static let fake_quant_with_min_max_vars_per_channel = "FakeQuantWithMinMaxVarsPerChannel"
    /// TF op: FakeQuantWithMinMaxVarsPerChannelGradient
    public static let fake_quant_with_min_max_vars_per_channel_gradient = "FakeQuantWithMinMaxVarsPerChannelGradient"
    /// TF op: FFT
    public static let fft = "FFT"
    /// TF op: FFT2D
    public static let fft2d = "FFT2D"
    /// TF op: FFT3D
    public static let fft3d = "FFT3D"
    /// TF op: FileSystemSetConfiguration
    public static let fileSystemSetConfiguration = "FileSystemSetConfiguration"
    /// TF op: Fill
    public static let fill = "Fill"
    /// TF op: FilterByLastComponentDataset
    public static let filterByLastComponentDataset = "FilterByLastComponentDataset"
    /// TF op: FilterDataset
    public static let filterDataset = "FilterDataset"
    /// TF op: FinalizeDataset
    public static let finalizeDataset = "FinalizeDataset"
    /// TF op: FinalizeTPUEmbedding
    public static let finalizeTPUEmbedding = "FinalizeTPUEmbedding"
    /// TF op: FinalizeTPUEmbeddingV2
    public static let finalizeTPUEmbeddingV2 = "FinalizeTPUEmbeddingV2"
    /// TF op: Fingerprint
    public static let fingerprint = "Fingerprint"
    /// TF op: FixedLengthRecordDataset
    public static let fixedLengthRecordDataset = "FixedLengthRecordDataset"
    /// TF op: FixedLengthRecordDatasetV2
    public static let fixedLengthRecordDatasetV2 = "FixedLengthRecordDatasetV2"
    /// TF op: FixedLengthRecordReader
    public static let fixedLengthRecordReader = "FixedLengthRecordReader"
    /// TF op: FixedLengthRecordReaderV2
    public static let fixedLengthRecordReaderV2 = "FixedLengthRecordReaderV2"
    /// TF op: FixedUnigramCandidateSampler
    public static let fixedUnigramCandidateSampler = "FixedUnigramCandidateSampler"
    /// TF op: FlatMapDataset
    public static let flatMapDataset = "FlatMapDataset"
    /// TF op: Floor
    public static let floor = "Floor"
    /// TF op: FloorDiv
    public static let floor_div = "FloorDiv"
    /// TF op: FlushSummaryWriter
    public static let flushSummaryWriter = "FlushSummaryWriter"
    /// TF op: For
    public static let `for` = "For"
    /// TF op: FractionalAvgPool
    public static let fractionalAvgPool = "FractionalAvgPool"
    /// TF op: FractionalAvgPoolGrad
    public static let fractionalAvgPoolGrad = "FractionalAvgPoolGrad"
    /// TF op: FractionalMaxPool
    public static let fractionalMaxPool = "FractionalMaxPool"
    /// TF op: FractionalMaxPoolGrad
    public static let fractionalMaxPoolGrad = "FractionalMaxPoolGrad"
    /// TF op: FresnelCos
    public static let fresnelCos = "FresnelCos"
    /// TF op: FresnelSin
    public static let fresnelSin = "FresnelSin"
    /// TF op: FusedBatchNorm
    public static let fusedBatchNorm = "FusedBatchNorm"
    /// TF op: FusedBatchNormGrad
    public static let fusedBatchNormGrad = "FusedBatchNormGrad"
    /// TF op: FusedBatchNormGradV2
    public static let fusedBatchNormGradV2 = "FusedBatchNormGradV2"
    /// TF op: FusedBatchNormGradV3
    public static let fusedBatchNormGradV3 = "FusedBatchNormGradV3"
    /// TF op: FusedBatchNormV2
    public static let fusedBatchNormV2 = "FusedBatchNormV2"
    /// TF op: FusedBatchNormV3
    public static let fusedBatchNormV3 = "FusedBatchNormV3"
    /// TF op: FusedPadConv2D
    public static let fusedPadConv2D = "FusedPadConv2D"
    /// TF op: FusedResizeAndPadConv2D
    public static let fusedResizeAndPadConv2D = "FusedResizeAndPadConv2D"
    /// TF op: GRUBlockCell
    public static let gRUBlockCell = "GRUBlockCell"
    /// TF op: GRUBlockCellGrad
    public static let gRUBlockCellGrad = "GRUBlockCellGrad"
    /// TF op: Gather
    public static let gather = "Gather"
    /// TF op: GatherNd
    public static let gatherNd = "GatherNd"
    /// TF op: GatherV2
    public static let gatherV2 = "GatherV2"
    /// TF op: GenerateBoundingBoxProposals
    public static let generateBoundingBoxProposals = "GenerateBoundingBoxProposals"
    /// TF op: GenerateVocabRemapping
    public static let generateVocabRemapping = "GenerateVocabRemapping"
    /// TF op: GeneratorDataset
    public static let generatorDataset = "GeneratorDataset"
    /// TF op: GetElementAtIndex
    public static let getElementAtIndex = "GetElementAtIndex"
    /// TF op: GetMinibatchSplitsWithPhysicalReplica
    public static let getMinibatchSplitsWithPhysicalReplica = "GetMinibatchSplitsWithPhysicalReplica"
    /// TF op: GetMinibatchesInCsrWithPhysicalReplica
    public static let getMinibatchesInCsrWithPhysicalReplica = "GetMinibatchesInCsrWithPhysicalReplica"
    /// TF op: GetOptions
    public static let getOptions = "GetOptions"
    /// TF op: GetSessionHandle
    public static let getSessionHandle = "GetSessionHandle"
    /// TF op: GetSessionHandleV2
    public static let getSessionHandleV2 = "GetSessionHandleV2"
    /// TF op: GetSessionTensor
    public static let getSessionTensor = "GetSessionTensor"
    /// TF op: GetStatsFromListOfSparseCoreCooTensors
    public static let getStatsFromListOfSparseCoreCooTensors = "GetStatsFromListOfSparseCoreCooTensors"
    /// TF op: GetTpuTaskId
    public static let getTpuTaskId = "GetTpuTaskId"
    /// TF op: GlobalIterId
    public static let globalIterId = "GlobalIterId"
    /// TF op: GlobalShuffleDataset
    public static let globalShuffleDataset = "GlobalShuffleDataset"
    /// TF op: GroupByReducerDataset
    public static let groupByReducerDataset = "GroupByReducerDataset"
    /// TF op: GroupByWindowDataset
    public static let groupByWindowDataset = "GroupByWindowDataset"
    /// TF op: GuaranteeConst
    public static let guaranteeConst = "GuaranteeConst"
    /// TF op: HashTable
    public static let hashTable = "HashTable"
    /// TF op: HashTableV2
    public static let hashTableV2 = "HashTableV2"
    /// TF op: HistogramFixedWidth
    public static let histogramFixedWidth = "HistogramFixedWidth"
    /// TF op: HistogramSummary
    public static let histogramSummary = "HistogramSummary"
    /// TF op: HostConst
    public static let hostConst = "HostConst"
    /// TF op: IFFTND
    public static let iFFTND = "IFFTND"
    /// TF op: IRFFT
    public static let iRFFT = "IRFFT"
    /// TF op: IRFFT2D
    public static let iRFFT2D = "IRFFT2D"
    /// TF op: IRFFT3D
    public static let iRFFT3D = "IRFFT3D"
    /// TF op: IRFFTND
    public static let iRFFTND = "IRFFTND"
    /// TF op: Identity
    public static let identity = "Identity"
    /// TF op: IdentityN
    public static let identityN = "IdentityN"
    /// TF op: IdentityReader
    public static let identityReader = "IdentityReader"
    /// TF op: IdentityReaderV2
    public static let identityReaderV2 = "IdentityReaderV2"
    /// TF op: If
    public static let `if` = "If"
    /// TF op: IFFT
    public static let ifft = "IFFT"
    /// TF op: IFFT2D
    public static let ifft2d = "IFFT2D"
    /// TF op: IFFT3D
    public static let ifft3d = "IFFT3D"
    /// TF op: IgammaGradA
    public static let igammaGradA = "IgammaGradA"
    /// TF op: IgnoreErrorsDataset
    public static let ignoreErrorsDataset = "IgnoreErrorsDataset"
    /// TF op: Imag
    public static let imag = "Imag"
    /// TF op: ImageProjectiveTransformV2
    public static let imageProjectiveTransformV2 = "ImageProjectiveTransformV2"
    /// TF op: ImageProjectiveTransformV3
    public static let imageProjectiveTransformV3 = "ImageProjectiveTransformV3"
    /// TF op: ImageSummary
    public static let imageSummary = "ImageSummary"
    /// TF op: ImmutableConst
    public static let immutableConst = "ImmutableConst"
    /// TF op: ImportEvent
    public static let importEvent = "ImportEvent"
    /// TF op: InTopK
    public static let inTopK = "InTopK"
    /// TF op: InTopKV2
    public static let inTopKV2 = "InTopKV2"
    /// TF op: IndexFlatMapDataset
    public static let indexFlatMapDataset = "IndexFlatMapDataset"
    /// TF op: InfeedDequeue
    public static let infeedDequeue = "InfeedDequeue"
    /// TF op: InfeedDequeueTuple
    public static let infeedDequeueTuple = "InfeedDequeueTuple"
    /// TF op: InfeedEnqueue
    public static let infeedEnqueue = "InfeedEnqueue"
    /// TF op: InfeedEnqueuePrelinearizedBuffer
    public static let infeedEnqueuePrelinearizedBuffer = "InfeedEnqueuePrelinearizedBuffer"
    /// TF op: InfeedEnqueueTuple
    public static let infeedEnqueueTuple = "InfeedEnqueueTuple"
    /// TF op: InitializeTable
    public static let initializeTable = "InitializeTable"
    /// TF op: InitializeTableFromDataset
    public static let initializeTableFromDataset = "InitializeTableFromDataset"
    /// TF op: InitializeTableFromTextFile
    public static let initializeTableFromTextFile = "InitializeTableFromTextFile"
    /// TF op: InitializeTableFromTextFileV2
    public static let initializeTableFromTextFileV2 = "InitializeTableFromTextFileV2"
    /// TF op: InitializeTableV2
    public static let initializeTableV2 = "InitializeTableV2"
    /// TF op: InplaceAdd
    public static let inplaceAdd = "InplaceAdd"
    /// TF op: InplaceSub
    public static let inplaceSub = "InplaceSub"
    /// TF op: InplaceUpdate
    public static let inplaceUpdate = "InplaceUpdate"
    /// TF op: InterleaveDataset
    public static let interleaveDataset = "InterleaveDataset"
    /// TF op: Inv
    public static let inv = "Inv"
    /// TF op: InvGrad
    public static let invGrad = "InvGrad"
    /// TF op: Invert
    public static let invert = "Invert"
    /// TF op: IsBoostedTreesEnsembleInitialized
    public static let isBoostedTreesEnsembleInitialized = "IsBoostedTreesEnsembleInitialized"
    /// TF op: IsBoostedTreesQuantileStreamResourceInitialized
    public static let isBoostedTreesQuantileStreamResourceInitialized = "IsBoostedTreesQuantileStreamResourceInitialized"
    /// TF op: IsTPUEmbeddingInitialized
    public static let isTPUEmbeddingInitialized = "IsTPUEmbeddingInitialized"
    /// TF op: IsVariableInitialized
    public static let isVariableInitialized = "IsVariableInitialized"
    /// TF op: IsotonicRegression
    public static let isotonicRegression = "IsotonicRegression"
    /// TF op: Iterator
    public static let iterator = "Iterator"
    /// TF op: IteratorFromStringHandle
    public static let iteratorFromStringHandle = "IteratorFromStringHandle"
    /// TF op: IteratorFromStringHandleV2
    public static let iteratorFromStringHandleV2 = "IteratorFromStringHandleV2"
    /// TF op: IteratorGetDevice
    public static let iteratorGetDevice = "IteratorGetDevice"
    /// TF op: IteratorGetModelProto
    public static let iteratorGetModelProto = "IteratorGetModelProto"
    /// TF op: IteratorGetNext
    public static let iteratorGetNext = "IteratorGetNext"
    /// TF op: IteratorGetNextAsOptional
    public static let iteratorGetNextAsOptional = "IteratorGetNextAsOptional"
    /// TF op: IteratorGetNextSync
    public static let iteratorGetNextSync = "IteratorGetNextSync"
    /// TF op: IteratorToStringHandle
    public static let iteratorToStringHandle = "IteratorToStringHandle"
    /// TF op: IteratorV2
    public static let iteratorV2 = "IteratorV2"
    /// TF op: KMC2ChainInitialization
    public static let kMC2ChainInitialization = "KMC2ChainInitialization"
    /// TF op: KmeansPlusPlusInitialization
    public static let kmeansPlusPlusInitialization = "KmeansPlusPlusInitialization"
    /// TF op: KthOrderStatistic
    public static let kthOrderStatistic = "KthOrderStatistic"
    /// TF op: LMDBDataset
    public static let lMDBDataset = "LMDBDataset"
    /// TF op: LMDBReader
    public static let lMDBReader = "LMDBReader"
    /// TF op: LRNGrad
    public static let lRNGrad = "LRNGrad"
    /// TF op: LSTMBlockCell
    public static let lSTMBlockCell = "LSTMBlockCell"
    /// TF op: LSTMBlockCellGrad
    public static let lSTMBlockCellGrad = "LSTMBlockCellGrad"
    /// TF op: LatencyStatsDataset
    public static let latencyStatsDataset = "LatencyStatsDataset"
    /// TF op: LeakyRelu
    public static let leakyRelu = "LeakyRelu"
    /// TF op: LeakyReluGrad
    public static let leakyReluGrad = "LeakyReluGrad"
    /// TF op: LearnedUnigramCandidateSampler
    public static let learnedUnigramCandidateSampler = "LearnedUnigramCandidateSampler"
    /// TF op: LeftShift
    public static let left_shift = "LeftShift"
    /// TF op: LegacyParallelInterleaveDatasetV2
    public static let legacyParallelInterleaveDatasetV2 = "LegacyParallelInterleaveDatasetV2"
    /// TF op: LinSpace
    public static let lin_space = "LinSpace"
    /// TF op: ListDataset
    public static let listDataset = "ListDataset"
    /// TF op: ListDiff
    public static let listDiff = "ListDiff"
    /// TF op: ListSnapshotChunksDataset
    public static let listSnapshotChunksDataset = "ListSnapshotChunksDataset"
    /// TF op: LoadAllTPUEmbeddingParameters
    public static let loadAllTPUEmbeddingParameters = "LoadAllTPUEmbeddingParameters"
    /// TF op: LoadAndRemapMatrix
    public static let loadAndRemapMatrix = "LoadAndRemapMatrix"
    /// TF op: LoadDataset
    public static let loadDataset = "LoadDataset"
    /// TF op: LoadTPUEmbeddingADAMParameters
    public static let loadTPUEmbeddingADAMParameters = "LoadTPUEmbeddingADAMParameters"
    /// TF op: LoadTPUEmbeddingAdadeltaParameters
    public static let loadTPUEmbeddingAdadeltaParameters = "LoadTPUEmbeddingAdadeltaParameters"
    /// TF op: LoadTPUEmbeddingAdagradMomentumParameters
    public static let loadTPUEmbeddingAdagradMomentumParameters = "LoadTPUEmbeddingAdagradMomentumParameters"
    /// TF op: LoadTPUEmbeddingAdagradParameters
    public static let loadTPUEmbeddingAdagradParameters = "LoadTPUEmbeddingAdagradParameters"
    /// TF op: LoadTPUEmbeddingCenteredRMSPropParameters
    public static let loadTPUEmbeddingCenteredRMSPropParameters = "LoadTPUEmbeddingCenteredRMSPropParameters"
    /// TF op: LoadTPUEmbeddingFTRLParameters
    public static let loadTPUEmbeddingFTRLParameters = "LoadTPUEmbeddingFTRLParameters"
    /// TF op: LoadTPUEmbeddingFrequencyEstimatorParameters
    public static let loadTPUEmbeddingFrequencyEstimatorParameters = "LoadTPUEmbeddingFrequencyEstimatorParameters"
    /// TF op: LoadTPUEmbeddingMDLAdagradLightParameters
    public static let loadTPUEmbeddingMDLAdagradLightParameters = "LoadTPUEmbeddingMDLAdagradLightParameters"
    /// TF op: LoadTPUEmbeddingMomentumParameters
    public static let loadTPUEmbeddingMomentumParameters = "LoadTPUEmbeddingMomentumParameters"
    /// TF op: LoadTPUEmbeddingProximalAdagradParameters
    public static let loadTPUEmbeddingProximalAdagradParameters = "LoadTPUEmbeddingProximalAdagradParameters"
    /// TF op: LoadTPUEmbeddingProximalYogiParameters
    public static let loadTPUEmbeddingProximalYogiParameters = "LoadTPUEmbeddingProximalYogiParameters"
    /// TF op: LoadTPUEmbeddingRMSPropParameters
    public static let loadTPUEmbeddingRMSPropParameters = "LoadTPUEmbeddingRMSPropParameters"
    /// TF op: LoadTPUEmbeddingStochasticGradientDescentParameters
    public static let loadTPUEmbeddingStochasticGradientDescentParameters = "LoadTPUEmbeddingStochasticGradientDescentParameters"
    /// TF op: LogMatrixDeterminant
    public static let logMatrixDeterminant = "LogMatrixDeterminant"
    /// TF op: LogSoftmax
    public static let logSoftmax = "LogSoftmax"
    /// TF op: LogUniformCandidateSampler
    public static let logUniformCandidateSampler = "LogUniformCandidateSampler"
    /// TF op: LookupTableExport
    public static let lookupTableExport = "LookupTableExport"
    /// TF op: LookupTableExportV2
    public static let lookupTableExportV2 = "LookupTableExportV2"
    /// TF op: LookupTableFind
    public static let lookupTableFind = "LookupTableFind"
    /// TF op: LookupTableFindV2
    public static let lookupTableFindV2 = "LookupTableFindV2"
    /// TF op: LookupTableImport
    public static let lookupTableImport = "LookupTableImport"
    /// TF op: LookupTableImportV2
    public static let lookupTableImportV2 = "LookupTableImportV2"
    /// TF op: LookupTableInsert
    public static let lookupTableInsert = "LookupTableInsert"
    /// TF op: LookupTableInsertV2
    public static let lookupTableInsertV2 = "LookupTableInsertV2"
    /// TF op: LookupTableRemoveV2
    public static let lookupTableRemoveV2 = "LookupTableRemoveV2"
    /// TF op: LookupTableSize
    public static let lookupTableSize = "LookupTableSize"
    /// TF op: LookupTableSizeV2
    public static let lookupTableSizeV2 = "LookupTableSizeV2"
    /// TF op: LoopCond
    public static let loopCond = "LoopCond"
    /// TF op: StringLower
    public static let lower = "StringLower"
    /// TF op: LowerBound
    public static let lowerBound = "LowerBound"
    /// TF op: MakeIterator
    public static let makeIterator = "MakeIterator"
    /// TF op: MakeUnique
    public static let makeUnique = "MakeUnique"
    /// TF op: MapAndBatchDataset
    public static let mapAndBatchDataset = "MapAndBatchDataset"
    /// TF op: MapClear
    public static let mapClear = "MapClear"
    /// TF op: MapDataset
    public static let mapDataset = "MapDataset"
    /// TF op: MapDefun
    public static let mapDefun = "MapDefun"
    /// TF op: MapIncompleteSize
    public static let mapIncompleteSize = "MapIncompleteSize"
    /// TF op: MapPeek
    public static let mapPeek = "MapPeek"
    /// TF op: MapSize
    public static let mapSize = "MapSize"
    /// TF op: MapStage
    public static let mapStage = "MapStage"
    /// TF op: MapUnstage
    public static let mapUnstage = "MapUnstage"
    /// TF op: MapUnstageNoKey
    public static let mapUnstageNoKey = "MapUnstageNoKey"
    /// TF op: MatMul
    public static let matMul = "MatMul"
    /// TF op: MatchingFilesDataset
    public static let matchingFilesDataset = "MatchingFilesDataset"
    /// TF op: MatrixDiag
    public static let matrixDiag = "MatrixDiag"
    /// TF op: MatrixDiagPart
    public static let matrixDiagPart = "MatrixDiagPart"
    /// TF op: MatrixDiagPartV2
    public static let matrixDiagPartV2 = "MatrixDiagPartV2"
    /// TF op: MatrixDiagV2
    public static let matrixDiagV2 = "MatrixDiagV2"
    /// TF op: MatrixExponential
    public static let matrixExponential = "MatrixExponential"
    /// TF op: MatrixLogarithm
    public static let matrixLogarithm = "MatrixLogarithm"
    /// TF op: MatrixSetDiag
    public static let matrixSetDiag = "MatrixSetDiag"
    /// TF op: MatrixSetDiagV2
    public static let matrixSetDiagV2 = "MatrixSetDiagV2"
    /// TF op: MatrixSolveLs
    public static let matrixSolveLs = "MatrixSolveLs"
    /// TF op: MatrixTriangularSolve
    public static let matrixTriangularSolve = "MatrixTriangularSolve"
    /// TF op: Max
    public static let max = "Max"
    /// TF op: MaxIntraOpParallelismDataset
    public static let maxIntraOpParallelismDataset = "MaxIntraOpParallelismDataset"
    /// TF op: MaxPool
    public static let maxPool = "MaxPool"
    /// TF op: MaxPool3D
    public static let maxPool3D = "MaxPool3D"
    /// TF op: MaxPool3DGrad
    public static let maxPool3DGrad = "MaxPool3DGrad"
    /// TF op: MaxPool3DGradGrad
    public static let maxPool3DGradGrad = "MaxPool3DGradGrad"
    /// TF op: MaxPoolGrad
    public static let maxPoolGrad = "MaxPoolGrad"
    /// TF op: MaxPoolGradGrad
    public static let maxPoolGradGrad = "MaxPoolGradGrad"
    /// TF op: MaxPoolGradGradV2
    public static let maxPoolGradGradV2 = "MaxPoolGradGradV2"
    /// TF op: MaxPoolGradGradWithArgmax
    public static let maxPoolGradGradWithArgmax = "MaxPoolGradGradWithArgmax"
    /// TF op: MaxPoolGradV2
    public static let maxPoolGradV2 = "MaxPoolGradV2"
    /// TF op: MaxPoolGradWithArgmax
    public static let maxPoolGradWithArgmax = "MaxPoolGradWithArgmax"
    /// TF op: MaxPoolV2
    public static let maxPoolV2 = "MaxPoolV2"
    /// TF op: MaxPoolWithArgmax
    public static let maxPoolWithArgmax = "MaxPoolWithArgmax"
    /// TF op: Mean
    public static let mean = "Mean"
    /// TF op: Merge
    public static let merge = "Merge"
    /// TF op: MergeDedupData
    public static let mergeDedupData = "MergeDedupData"
    /// TF op: MergeSummary
    public static let mergeSummary = "MergeSummary"
    /// TF op: MergeV2Checkpoints
    public static let mergeV2Checkpoints = "MergeV2Checkpoints"
    /// TF op: Mfcc
    public static let mfcc = "Mfcc"
    /// TF op: Min
    public static let min = "Min"
    /// TF op: MirrorPad
    public static let mirrorPad = "MirrorPad"
    /// TF op: MirrorPadGrad
    public static let mirrorPadGrad = "MirrorPadGrad"
    /// TF op: MlirPassthroughOp
    public static let mlirPassthroughOp = "MlirPassthroughOp"
    /// TF op: Mod
    public static let mod = "Mod"
    /// TF op: ModelDataset
    public static let modelDataset = "ModelDataset"
    /// TF op: Mul
    public static let mul = "Mul"
    /// TF op: MulNoNan
    public static let mulNoNan = "MulNoNan"
    /// TF op: MultiDeviceIterator
    public static let multiDeviceIterator = "MultiDeviceIterator"
    /// TF op: MultiDeviceIteratorFromStringHandle
    public static let multiDeviceIteratorFromStringHandle = "MultiDeviceIteratorFromStringHandle"
    /// TF op: MultiDeviceIteratorGetNextFromShard
    public static let multiDeviceIteratorGetNextFromShard = "MultiDeviceIteratorGetNextFromShard"
    /// TF op: MultiDeviceIteratorInit
    public static let multiDeviceIteratorInit = "MultiDeviceIteratorInit"
    /// TF op: MultiDeviceIteratorToStringHandle
    public static let multiDeviceIteratorToStringHandle = "MultiDeviceIteratorToStringHandle"
    /// TF op: Multinomial
    public static let multinomial = "Multinomial"
    /// TF op: MutableDenseHashTable
    public static let mutableDenseHashTable = "MutableDenseHashTable"
    /// TF op: MutableDenseHashTableV2
    public static let mutableDenseHashTableV2 = "MutableDenseHashTableV2"
    /// TF op: MutableHashTable
    public static let mutableHashTable = "MutableHashTable"
    /// TF op: MutableHashTableOfTensors
    public static let mutableHashTableOfTensors = "MutableHashTableOfTensors"
    /// TF op: MutableHashTableOfTensorsV2
    public static let mutableHashTableOfTensorsV2 = "MutableHashTableOfTensorsV2"
    /// TF op: MutableHashTableV2
    public static let mutableHashTableV2 = "MutableHashTableV2"
    /// TF op: MutexLock
    public static let mutexLock = "MutexLock"
    /// TF op: MutexV2
    public static let mutexV2 = "MutexV2"
    /// TF op: NcclAllReduce
    public static let ncclAllReduce = "NcclAllReduce"
    /// TF op: NcclBroadcast
    public static let ncclBroadcast = "NcclBroadcast"
    /// TF op: NcclReduce
    public static let ncclReduce = "NcclReduce"
    /// TF op: Ndtri
    public static let ndtri = "Ndtri"
    /// TF op: NearestNeighbors
    public static let nearestNeighbors = "NearestNeighbors"
    /// TF op: NegTrain
    public static let negTrain = "NegTrain"
    /// TF op: NextIteration
    public static let nextIteration = "NextIteration"
    /// TF op: NoOp
    public static let noOp = "NoOp"
    /// TF op: NonDeterministicInts
    public static let nonDeterministicInts = "NonDeterministicInts"
    /// TF op: NonMaxSuppression
    public static let nonMaxSuppression = "NonMaxSuppression"
    /// TF op: NonMaxSuppressionV2
    public static let nonMaxSuppressionV2 = "NonMaxSuppressionV2"
    /// TF op: NonMaxSuppressionV3
    public static let nonMaxSuppressionV3 = "NonMaxSuppressionV3"
    /// TF op: NonMaxSuppressionV4
    public static let nonMaxSuppressionV4 = "NonMaxSuppressionV4"
    /// TF op: NonMaxSuppressionV5
    public static let nonMaxSuppressionV5 = "NonMaxSuppressionV5"
    /// TF op: NonMaxSuppressionWithOverlaps
    public static let nonMaxSuppressionWithOverlaps = "NonMaxSuppressionWithOverlaps"
    /// TF op: NonSerializableDataset
    public static let nonSerializableDataset = "NonSerializableDataset"
    /// TF op: NotEqual
    public static let notEqual = "NotEqual"
    /// TF op: NthElement
    public static let nthElement = "NthElement"
    /// TF op: OneHot
    public static let oneHot = "OneHot"
    /// TF op: OneShotIterator
    public static let oneShotIterator = "OneShotIterator"
    /// TF op: OnesLike
    public static let onesLike = "OnesLike"
    /// TF op: OptimizeDataset
    public static let optimizeDataset = "OptimizeDataset"
    /// TF op: OptimizeDatasetV2
    public static let optimizeDatasetV2 = "OptimizeDatasetV2"
    /// TF op: OptionalFromValue
    public static let optionalFromValue = "OptionalFromValue"
    /// TF op: OptionalGetValue
    public static let optionalGetValue = "OptionalGetValue"
    /// TF op: OptionalHasValue
    public static let optionalHasValue = "OptionalHasValue"
    /// TF op: OptionalNone
    public static let optionalNone = "OptionalNone"
    /// TF op: OptionsDataset
    public static let optionsDataset = "OptionsDataset"
    /// TF op: OrderedMapClear
    public static let orderedMapClear = "OrderedMapClear"
    /// TF op: OrderedMapIncompleteSize
    public static let orderedMapIncompleteSize = "OrderedMapIncompleteSize"
    /// TF op: OrderedMapPeek
    public static let orderedMapPeek = "OrderedMapPeek"
    /// TF op: OrderedMapSize
    public static let orderedMapSize = "OrderedMapSize"
    /// TF op: OrderedMapStage
    public static let orderedMapStage = "OrderedMapStage"
    /// TF op: OrderedMapUnstage
    public static let orderedMapUnstage = "OrderedMapUnstage"
    /// TF op: OrderedMapUnstageNoKey
    public static let orderedMapUnstageNoKey = "OrderedMapUnstageNoKey"
    /// TF op: OutfeedDequeue
    public static let outfeedDequeue = "OutfeedDequeue"
    /// TF op: OutfeedDequeueTuple
    public static let outfeedDequeueTuple = "OutfeedDequeueTuple"
    /// TF op: OutfeedDequeueTupleV2
    public static let outfeedDequeueTupleV2 = "OutfeedDequeueTupleV2"
    /// TF op: OutfeedDequeueV2
    public static let outfeedDequeueV2 = "OutfeedDequeueV2"
    /// TF op: OutfeedEnqueue
    public static let outfeedEnqueue = "OutfeedEnqueue"
    /// TF op: OutfeedEnqueueTuple
    public static let outfeedEnqueueTuple = "OutfeedEnqueueTuple"
    /// TF op: Pack
    public static let pack = "Pack"
    /// TF op: Pad
    public static let pad = "Pad"
    /// TF op: PadV2
    public static let padV2 = "PadV2"
    /// TF op: PaddedBatchDataset
    public static let paddedBatchDataset = "PaddedBatchDataset"
    /// TF op: PaddedBatchDatasetV2
    public static let paddedBatchDatasetV2 = "PaddedBatchDatasetV2"
    /// TF op: PaddingFIFOQueue
    public static let paddingFIFOQueue = "PaddingFIFOQueue"
    /// TF op: PaddingFIFOQueueV2
    public static let paddingFIFOQueueV2 = "PaddingFIFOQueueV2"
    /// TF op: ParallelBatchDataset
    public static let parallelBatchDataset = "ParallelBatchDataset"
    /// TF op: ParallelConcat
    public static let parallelConcat = "ParallelConcat"
    /// TF op: ParallelDynamicStitch
    public static let parallelDynamicStitch = "ParallelDynamicStitch"
    /// TF op: ParallelFilterDataset
    public static let parallelFilterDataset = "ParallelFilterDataset"
    /// TF op: ParallelInterleaveDataset
    public static let parallelInterleaveDataset = "ParallelInterleaveDataset"
    /// TF op: ParallelInterleaveDatasetV2
    public static let parallelInterleaveDatasetV2 = "ParallelInterleaveDatasetV2"
    /// TF op: ParallelInterleaveDatasetV3
    public static let parallelInterleaveDatasetV3 = "ParallelInterleaveDatasetV3"
    /// TF op: ParallelInterleaveDatasetV4
    public static let parallelInterleaveDatasetV4 = "ParallelInterleaveDatasetV4"
    /// TF op: ParallelMapDataset
    public static let parallelMapDataset = "ParallelMapDataset"
    /// TF op: ParallelMapDatasetV2
    public static let parallelMapDatasetV2 = "ParallelMapDatasetV2"
    /// TF op: ParameterizedTruncatedNormal
    public static let parameterizedTruncatedNormal = "ParameterizedTruncatedNormal"
    /// TF op: ParseExample
    public static let parseExample = "ParseExample"
    /// TF op: ParseExampleDataset
    public static let parseExampleDataset = "ParseExampleDataset"
    /// TF op: ParseExampleDatasetV2
    public static let parseExampleDatasetV2 = "ParseExampleDatasetV2"
    /// TF op: ParseExampleV2
    public static let parseExampleV2 = "ParseExampleV2"
    /// TF op: ParseSequenceExample
    public static let parseSequenceExample = "ParseSequenceExample"
    /// TF op: ParseSequenceExampleV2
    public static let parseSequenceExampleV2 = "ParseSequenceExampleV2"
    /// TF op: ParseSingleExample
    public static let parseSingleExample = "ParseSingleExample"
    /// TF op: ParseSingleSequenceExample
    public static let parseSingleSequenceExample = "ParseSingleSequenceExample"
    /// TF op: PartitionedCall
    public static let partitionedCall = "PartitionedCall"
    /// TF op: Placeholder
    public static let placeholder = "Placeholder"
    /// TF op: PlaceholderV2
    public static let placeholderV2 = "PlaceholderV2"
    /// TF op: PlaceholderWithDefault
    public static let placeholderWithDefault = "PlaceholderWithDefault"
    /// TF op: PopulationCount
    public static let populationCount = "PopulationCount"
    /// TF op: Pow
    public static let pow = "Pow"
    /// TF op: PrefetchDataset
    public static let prefetchDataset = "PrefetchDataset"
    /// TF op: Prelinearize
    public static let prelinearize = "Prelinearize"
    /// TF op: PrelinearizeTuple
    public static let prelinearizeTuple = "PrelinearizeTuple"
    /// TF op: PreventGradient
    public static let preventGradient = "PreventGradient"
    /// TF op: Print
    public static let print = "Print"
    /// TF op: PrintV2
    public static let printV2 = "PrintV2"
    /// TF op: PriorityQueue
    public static let priorityQueue = "PriorityQueue"
    /// TF op: PriorityQueueV2
    public static let priorityQueueV2 = "PriorityQueueV2"
    /// TF op: PrivateThreadPoolDataset
    public static let privateThreadPoolDataset = "PrivateThreadPoolDataset"
    /// TF op: Prod
    public static let prod = "Prod"
    /// TF op: PyFunc
    public static let pyFunc = "PyFunc"
    /// TF op: PyFuncStateless
    public static let pyFuncStateless = "PyFuncStateless"
    /// TF op: QuantizeAndDequantize
    public static let quantizeAndDequantize = "QuantizeAndDequantize"
    /// TF op: QuantizeAndDequantizeV2
    public static let quantizeAndDequantizeV2 = "QuantizeAndDequantizeV2"
    /// TF op: QuantizeAndDequantizeV3
    public static let quantizeAndDequantizeV3 = "QuantizeAndDequantizeV3"
    /// TF op: QuantizeAndDequantizeV4
    public static let quantizeAndDequantizeV4 = "QuantizeAndDequantizeV4"
    /// TF op: QuantizeAndDequantizeV4Grad
    public static let quantizeAndDequantizeV4Grad = "QuantizeAndDequantizeV4Grad"
    /// TF op: QuantizeDownAndShrinkRange
    public static let quantizeDownAndShrinkRange = "QuantizeDownAndShrinkRange"
    /// TF op: QuantizeV2
    public static let quantizeV2 = "QuantizeV2"
    /// TF op: QuantizedAdd
    public static let quantizedAdd = "QuantizedAdd"
    /// TF op: QuantizedBatchNormWithGlobalNormalization
    public static let quantizedBatchNormWithGlobalNormalization = "QuantizedBatchNormWithGlobalNormalization"
    /// TF op: QuantizedBiasAdd
    public static let quantizedBiasAdd = "QuantizedBiasAdd"
    /// TF op: QuantizedConv2DAndRelu
    public static let quantizedConv2DAndRelu = "QuantizedConv2DAndRelu"
    /// TF op: QuantizedConv2DAndReluAndRequantize
    public static let quantizedConv2DAndReluAndRequantize = "QuantizedConv2DAndReluAndRequantize"
    /// TF op: QuantizedConv2DAndRequantize
    public static let quantizedConv2DAndRequantize = "QuantizedConv2DAndRequantize"
    /// TF op: QuantizedConv2DPerChannel
    public static let quantizedConv2DPerChannel = "QuantizedConv2DPerChannel"
    /// TF op: QuantizedConv2DWithBias
    public static let quantizedConv2DWithBias = "QuantizedConv2DWithBias"
    /// TF op: QuantizedConv2DWithBiasAndRelu
    public static let quantizedConv2DWithBiasAndRelu = "QuantizedConv2DWithBiasAndRelu"
    /// TF op: QuantizedConv2DWithBiasAndReluAndRequantize
    public static let quantizedConv2DWithBiasAndReluAndRequantize = "QuantizedConv2DWithBiasAndReluAndRequantize"
    /// TF op: QuantizedConv2DWithBiasAndRequantize
    public static let quantizedConv2DWithBiasAndRequantize = "QuantizedConv2DWithBiasAndRequantize"
    /// TF op: QuantizedConv2DWithBiasSignedSumAndReluAndRequantize
    public static let quantizedConv2DWithBiasSignedSumAndReluAndRequantize = "QuantizedConv2DWithBiasSignedSumAndReluAndRequantize"
    /// TF op: QuantizedConv2DWithBiasSumAndRelu
    public static let quantizedConv2DWithBiasSumAndRelu = "QuantizedConv2DWithBiasSumAndRelu"
    /// TF op: QuantizedConv2DWithBiasSumAndReluAndRequantize
    public static let quantizedConv2DWithBiasSumAndReluAndRequantize = "QuantizedConv2DWithBiasSumAndReluAndRequantize"
    /// TF op: QuantizedDepthwiseConv2D
    public static let quantizedDepthwiseConv2D = "QuantizedDepthwiseConv2D"
    /// TF op: QuantizedDepthwiseConv2DWithBias
    public static let quantizedDepthwiseConv2DWithBias = "QuantizedDepthwiseConv2DWithBias"
    /// TF op: QuantizedDepthwiseConv2DWithBiasAndRelu
    public static let quantizedDepthwiseConv2DWithBiasAndRelu = "QuantizedDepthwiseConv2DWithBiasAndRelu"
    /// TF op: QuantizedDepthwiseConv2DWithBiasAndReluAndRequantize
    public static let quantizedDepthwiseConv2DWithBiasAndReluAndRequantize = "QuantizedDepthwiseConv2DWithBiasAndReluAndRequantize"
    /// TF op: QuantizedInstanceNorm
    public static let quantizedInstanceNorm = "QuantizedInstanceNorm"
    /// TF op: QuantizedMatMul
    public static let quantizedMatMul = "QuantizedMatMul"
    /// TF op: QuantizedMatMulWithBias
    public static let quantizedMatMulWithBias = "QuantizedMatMulWithBias"
    /// TF op: QuantizedMatMulWithBiasAndDequantize
    public static let quantizedMatMulWithBiasAndDequantize = "QuantizedMatMulWithBiasAndDequantize"
    /// TF op: QuantizedMatMulWithBiasAndRelu
    public static let quantizedMatMulWithBiasAndRelu = "QuantizedMatMulWithBiasAndRelu"
    /// TF op: QuantizedMatMulWithBiasAndReluAndRequantize
    public static let quantizedMatMulWithBiasAndReluAndRequantize = "QuantizedMatMulWithBiasAndReluAndRequantize"
    /// TF op: QuantizedMatMulWithBiasAndRequantize
    public static let quantizedMatMulWithBiasAndRequantize = "QuantizedMatMulWithBiasAndRequantize"
    /// TF op: QuantizedMul
    public static let quantizedMul = "QuantizedMul"
    /// TF op: QuantizedRelu
    public static let quantizedRelu = "QuantizedRelu"
    /// TF op: QuantizedRelu6
    public static let quantizedRelu6 = "QuantizedRelu6"
    /// TF op: QuantizedReshape
    public static let quantizedReshape = "QuantizedReshape"
    /// TF op: QuantizedResizeBilinear
    public static let quantizedResizeBilinear = "QuantizedResizeBilinear"
    /// TF op: QuantizedConcat
    public static let quantized_concat = "QuantizedConcat"
    /// TF op: QueueClose
    public static let queueClose = "QueueClose"
    /// TF op: QueueCloseV2
    public static let queueCloseV2 = "QueueCloseV2"
    /// TF op: QueueDequeue
    public static let queueDequeue = "QueueDequeue"
    /// TF op: QueueDequeueMany
    public static let queueDequeueMany = "QueueDequeueMany"
    /// TF op: QueueDequeueManyV2
    public static let queueDequeueManyV2 = "QueueDequeueManyV2"
    /// TF op: QueueDequeueUpTo
    public static let queueDequeueUpTo = "QueueDequeueUpTo"
    /// TF op: QueueDequeueUpToV2
    public static let queueDequeueUpToV2 = "QueueDequeueUpToV2"
    /// TF op: QueueDequeueV2
    public static let queueDequeueV2 = "QueueDequeueV2"
    /// TF op: QueueEnqueue
    public static let queueEnqueue = "QueueEnqueue"
    /// TF op: QueueEnqueueMany
    public static let queueEnqueueMany = "QueueEnqueueMany"
    /// TF op: QueueEnqueueManyV2
    public static let queueEnqueueManyV2 = "QueueEnqueueManyV2"
    /// TF op: QueueEnqueueV2
    public static let queueEnqueueV2 = "QueueEnqueueV2"
    /// TF op: QueueIsClosed
    public static let queueIsClosed = "QueueIsClosed"
    /// TF op: QueueIsClosedV2
    public static let queueIsClosedV2 = "QueueIsClosedV2"
    /// TF op: QueueSize
    public static let queueSize = "QueueSize"
    /// TF op: QueueSizeV2
    public static let queueSizeV2 = "QueueSizeV2"
    /// TF op: RFFT
    public static let rFFT = "RFFT"
    /// TF op: RFFT2D
    public static let rFFT2D = "RFFT2D"
    /// TF op: RFFT3D
    public static let rFFT3D = "RFFT3D"
    /// TF op: RFFTND
    public static let rFFTND = "RFFTND"
    /// TF op: RaggedBincount
    public static let raggedBincount = "RaggedBincount"
    /// TF op: RaggedCountSparseOutput
    public static let raggedCountSparseOutput = "RaggedCountSparseOutput"
    /// TF op: RaggedCross
    public static let raggedCross = "RaggedCross"
    /// TF op: RaggedFillEmptyRows
    public static let raggedFillEmptyRows = "RaggedFillEmptyRows"
    /// TF op: RaggedFillEmptyRowsGrad
    public static let raggedFillEmptyRowsGrad = "RaggedFillEmptyRowsGrad"
    /// TF op: RaggedGather
    public static let raggedGather = "RaggedGather"
    /// TF op: RaggedRange
    public static let raggedRange = "RaggedRange"
    /// TF op: RaggedTensorFromVariant
    public static let raggedTensorFromVariant = "RaggedTensorFromVariant"
    /// TF op: RaggedTensorToSparse
    public static let raggedTensorToSparse = "RaggedTensorToSparse"
    /// TF op: RaggedTensorToTensor
    public static let raggedTensorToTensor = "RaggedTensorToTensor"
    /// TF op: RaggedTensorToVariant
    public static let raggedTensorToVariant = "RaggedTensorToVariant"
    /// TF op: RaggedTensorToVariantGradient
    public static let raggedTensorToVariantGradient = "RaggedTensorToVariantGradient"
    /// TF op: RandomCrop
    public static let randomCrop = "RandomCrop"
    /// TF op: RandomDataset
    public static let randomDataset = "RandomDataset"
    /// TF op: RandomDatasetV2
    public static let randomDatasetV2 = "RandomDatasetV2"
    /// TF op: RandomGamma
    public static let randomGamma = "RandomGamma"
    /// TF op: RandomGammaGrad
    public static let randomGammaGrad = "RandomGammaGrad"
    /// TF op: RandomIndexShuffle
    public static let randomIndexShuffle = "RandomIndexShuffle"
    /// TF op: RandomPoisson
    public static let randomPoisson = "RandomPoisson"
    /// TF op: RandomPoissonV2
    public static let randomPoissonV2 = "RandomPoissonV2"
    /// TF op: RandomShuffle
    public static let randomShuffle = "RandomShuffle"
    /// TF op: RandomShuffleQueue
    public static let randomShuffleQueue = "RandomShuffleQueue"
    /// TF op: RandomShuffleQueueV2
    public static let randomShuffleQueueV2 = "RandomShuffleQueueV2"
    /// TF op: RandomStandardNormal
    public static let randomStandardNormal = "RandomStandardNormal"
    /// TF op: RandomUniform
    public static let randomUniform = "RandomUniform"
    /// TF op: RandomUniformInt
    public static let randomUniformInt = "RandomUniformInt"
    /// TF op: Range
    public static let range = "Range"
    /// TF op: RangeDataset
    public static let rangeDataset = "RangeDataset"
    /// TF op: Rank
    public static let rank = "Rank"
    /// TF op: ReadFile
    public static let readFile = "ReadFile"
    /// TF op: ReadVariableOp
    public static let readVariableOp = "ReadVariableOp"
    /// TF op: ReadVariableXlaSplitND
    public static let readVariableXlaSplitND = "ReadVariableXlaSplitND"
    /// TF op: ReaderNumRecordsProduced
    public static let readerNumRecordsProduced = "ReaderNumRecordsProduced"
    /// TF op: ReaderNumRecordsProducedV2
    public static let readerNumRecordsProducedV2 = "ReaderNumRecordsProducedV2"
    /// TF op: ReaderNumWorkUnitsCompleted
    public static let readerNumWorkUnitsCompleted = "ReaderNumWorkUnitsCompleted"
    /// TF op: ReaderNumWorkUnitsCompletedV2
    public static let readerNumWorkUnitsCompletedV2 = "ReaderNumWorkUnitsCompletedV2"
    /// TF op: ReaderRead
    public static let readerRead = "ReaderRead"
    /// TF op: ReaderReadUpTo
    public static let readerReadUpTo = "ReaderReadUpTo"
    /// TF op: ReaderReadUpToV2
    public static let readerReadUpToV2 = "ReaderReadUpToV2"
    /// TF op: ReaderReadV2
    public static let readerReadV2 = "ReaderReadV2"
    /// TF op: ReaderReset
    public static let readerReset = "ReaderReset"
    /// TF op: ReaderResetV2
    public static let readerResetV2 = "ReaderResetV2"
    /// TF op: ReaderRestoreState
    public static let readerRestoreState = "ReaderRestoreState"
    /// TF op: ReaderRestoreStateV2
    public static let readerRestoreStateV2 = "ReaderRestoreStateV2"
    /// TF op: ReaderSerializeState
    public static let readerSerializeState = "ReaderSerializeState"
    /// TF op: ReaderSerializeStateV2
    public static let readerSerializeStateV2 = "ReaderSerializeStateV2"
    /// TF op: Real
    public static let real = "Real"
    /// TF op: RealDiv
    public static let realdiv = "RealDiv"
    /// TF op: RebatchDataset
    public static let rebatchDataset = "RebatchDataset"
    /// TF op: RebatchDatasetV2
    public static let rebatchDatasetV2 = "RebatchDatasetV2"
    /// TF op: ReciprocalGrad
    public static let reciprocalGrad = "ReciprocalGrad"
    /// TF op: RecordInput
    public static let recordInput = "RecordInput"
    /// TF op: Recv
    public static let recv = "Recv"
    /// TF op: RecvTPUEmbeddingActivations
    public static let recvTPUEmbeddingActivations = "RecvTPUEmbeddingActivations"
    /// TF op: ReduceDataset
    public static let reduceDataset = "ReduceDataset"
    /// TF op: ReduceJoin
    public static let reduceJoin = "ReduceJoin"
    /// TF op: RefEnter
    public static let refEnter = "RefEnter"
    /// TF op: RefExit
    public static let refExit = "RefExit"
    /// TF op: RefIdentity
    public static let refIdentity = "RefIdentity"
    /// TF op: RefMerge
    public static let refMerge = "RefMerge"
    /// TF op: RefNextIteration
    public static let refNextIteration = "RefNextIteration"
    /// TF op: RefSelect
    public static let refSelect = "RefSelect"
    /// TF op: RefSwitch
    public static let refSwitch = "RefSwitch"
    /// TF op: RegexFullMatch
    public static let regexFullMatch = "RegexFullMatch"
    /// TF op: RegexReplace
    public static let regexReplace = "RegexReplace"
    /// TF op: RegisterDataset
    public static let registerDataset = "RegisterDataset"
    /// TF op: RegisterDatasetV2
    public static let registerDatasetV2 = "RegisterDatasetV2"
    /// TF op: Relayout
    public static let relayout = "Relayout"
    /// TF op: RelayoutLike
    public static let relayoutLike = "RelayoutLike"
    /// TF op: Relu6
    public static let relu6 = "Relu6"
    /// TF op: Relu6Grad
    public static let relu6Grad = "Relu6Grad"
    /// TF op: ReluGrad
    public static let reluGrad = "ReluGrad"
    /// TF op: RemoteCall
    public static let remoteCall = "RemoteCall"
    /// TF op: RepeatDataset
    public static let repeatDataset = "RepeatDataset"
    /// TF op: RequantizationRange
    public static let requantizationRange = "RequantizationRange"
    /// TF op: RequantizationRangePerChannel
    public static let requantizationRangePerChannel = "RequantizationRangePerChannel"
    /// TF op: Requantize
    public static let requantize = "Requantize"
    /// TF op: RequantizePerChannel
    public static let requantizePerChannel = "RequantizePerChannel"
    /// TF op: Reshape
    public static let reshape = "Reshape"
    /// TF op: ResizeArea
    public static let resizeArea = "ResizeArea"
    /// TF op: ResizeBicubic
    public static let resizeBicubic = "ResizeBicubic"
    /// TF op: ResizeBicubicGrad
    public static let resizeBicubicGrad = "ResizeBicubicGrad"
    /// TF op: ResizeBilinear
    public static let resizeBilinear = "ResizeBilinear"
    /// TF op: ResizeBilinearGrad
    public static let resizeBilinearGrad = "ResizeBilinearGrad"
    /// TF op: ResizeNearestNeighbor
    public static let resizeNearestNeighbor = "ResizeNearestNeighbor"
    /// TF op: ResizeNearestNeighborGrad
    public static let resizeNearestNeighborGrad = "ResizeNearestNeighborGrad"
    /// TF op: ResourceAccumulatorApplyGradient
    public static let resourceAccumulatorApplyGradient = "ResourceAccumulatorApplyGradient"
    /// TF op: ResourceAccumulatorNumAccumulated
    public static let resourceAccumulatorNumAccumulated = "ResourceAccumulatorNumAccumulated"
    /// TF op: ResourceAccumulatorSetGlobalStep
    public static let resourceAccumulatorSetGlobalStep = "ResourceAccumulatorSetGlobalStep"
    /// TF op: ResourceAccumulatorTakeGradient
    public static let resourceAccumulatorTakeGradient = "ResourceAccumulatorTakeGradient"
    /// TF op: ResourceApplyAdaMax
    public static let resourceApplyAdaMax = "ResourceApplyAdaMax"
    /// TF op: ResourceApplyAdadelta
    public static let resourceApplyAdadelta = "ResourceApplyAdadelta"
    /// TF op: ResourceApplyAdagrad
    public static let resourceApplyAdagrad = "ResourceApplyAdagrad"
    /// TF op: ResourceApplyAdagradDA
    public static let resourceApplyAdagradDA = "ResourceApplyAdagradDA"
    /// TF op: ResourceApplyAdagradV2
    public static let resourceApplyAdagradV2 = "ResourceApplyAdagradV2"
    /// TF op: ResourceApplyAdam
    public static let resourceApplyAdam = "ResourceApplyAdam"
    /// TF op: ResourceApplyAdamWithAmsgrad
    public static let resourceApplyAdamWithAmsgrad = "ResourceApplyAdamWithAmsgrad"
    /// TF op: ResourceApplyAddSign
    public static let resourceApplyAddSign = "ResourceApplyAddSign"
    /// TF op: ResourceApplyCenteredRMSProp
    public static let resourceApplyCenteredRMSProp = "ResourceApplyCenteredRMSProp"
    /// TF op: ResourceApplyFtrl
    public static let resourceApplyFtrl = "ResourceApplyFtrl"
    /// TF op: ResourceApplyFtrlV2
    public static let resourceApplyFtrlV2 = "ResourceApplyFtrlV2"
    /// TF op: ResourceApplyGradientDescent
    public static let resourceApplyGradientDescent = "ResourceApplyGradientDescent"
    /// TF op: ResourceApplyKerasMomentum
    public static let resourceApplyKerasMomentum = "ResourceApplyKerasMomentum"
    /// TF op: ResourceApplyMomentum
    public static let resourceApplyMomentum = "ResourceApplyMomentum"
    /// TF op: ResourceApplyPowerSign
    public static let resourceApplyPowerSign = "ResourceApplyPowerSign"
    /// TF op: ResourceApplyProximalAdagrad
    public static let resourceApplyProximalAdagrad = "ResourceApplyProximalAdagrad"
    /// TF op: ResourceApplyProximalGradientDescent
    public static let resourceApplyProximalGradientDescent = "ResourceApplyProximalGradientDescent"
    /// TF op: ResourceApplyRMSProp
    public static let resourceApplyRMSProp = "ResourceApplyRMSProp"
    /// TF op: ResourceConditionalAccumulator
    public static let resourceConditionalAccumulator = "ResourceConditionalAccumulator"
    /// TF op: ResourceCountUpTo
    public static let resourceCountUpTo = "ResourceCountUpTo"
    /// TF op: ResourceGather
    public static let resourceGather = "ResourceGather"
    /// TF op: ResourceGatherNd
    public static let resourceGatherNd = "ResourceGatherNd"
    /// TF op: ResourceScatterAdd
    public static let resourceScatterAdd = "ResourceScatterAdd"
    /// TF op: ResourceScatterDiv
    public static let resourceScatterDiv = "ResourceScatterDiv"
    /// TF op: ResourceScatterMax
    public static let resourceScatterMax = "ResourceScatterMax"
    /// TF op: ResourceScatterMin
    public static let resourceScatterMin = "ResourceScatterMin"
    /// TF op: ResourceScatterMul
    public static let resourceScatterMul = "ResourceScatterMul"
    /// TF op: ResourceScatterNdAdd
    public static let resourceScatterNdAdd = "ResourceScatterNdAdd"
    /// TF op: ResourceScatterNdMax
    public static let resourceScatterNdMax = "ResourceScatterNdMax"
    /// TF op: ResourceScatterNdMin
    public static let resourceScatterNdMin = "ResourceScatterNdMin"
    /// TF op: ResourceScatterNdSub
    public static let resourceScatterNdSub = "ResourceScatterNdSub"
    /// TF op: ResourceScatterNdUpdate
    public static let resourceScatterNdUpdate = "ResourceScatterNdUpdate"
    /// TF op: ResourceScatterSub
    public static let resourceScatterSub = "ResourceScatterSub"
    /// TF op: ResourceScatterUpdate
    public static let resourceScatterUpdate = "ResourceScatterUpdate"
    /// TF op: ResourceSparseApplyAdadelta
    public static let resourceSparseApplyAdadelta = "ResourceSparseApplyAdadelta"
    /// TF op: ResourceSparseApplyAdagrad
    public static let resourceSparseApplyAdagrad = "ResourceSparseApplyAdagrad"
    /// TF op: ResourceSparseApplyAdagradDA
    public static let resourceSparseApplyAdagradDA = "ResourceSparseApplyAdagradDA"
    /// TF op: ResourceSparseApplyAdagradV2
    public static let resourceSparseApplyAdagradV2 = "ResourceSparseApplyAdagradV2"
    /// TF op: ResourceSparseApplyCenteredRMSProp
    public static let resourceSparseApplyCenteredRMSProp = "ResourceSparseApplyCenteredRMSProp"
    /// TF op: ResourceSparseApplyFtrl
    public static let resourceSparseApplyFtrl = "ResourceSparseApplyFtrl"
    /// TF op: ResourceSparseApplyFtrlV2
    public static let resourceSparseApplyFtrlV2 = "ResourceSparseApplyFtrlV2"
    /// TF op: ResourceSparseApplyKerasMomentum
    public static let resourceSparseApplyKerasMomentum = "ResourceSparseApplyKerasMomentum"
    /// TF op: ResourceSparseApplyMomentum
    public static let resourceSparseApplyMomentum = "ResourceSparseApplyMomentum"
    /// TF op: ResourceSparseApplyProximalAdagrad
    public static let resourceSparseApplyProximalAdagrad = "ResourceSparseApplyProximalAdagrad"
    /// TF op: ResourceSparseApplyProximalGradientDescent
    public static let resourceSparseApplyProximalGradientDescent = "ResourceSparseApplyProximalGradientDescent"
    /// TF op: ResourceSparseApplyRMSProp
    public static let resourceSparseApplyRMSProp = "ResourceSparseApplyRMSProp"
    /// TF op: ResourceStridedSliceAssign
    public static let resourceStridedSliceAssign = "ResourceStridedSliceAssign"
    /// TF op: Restore
    public static let restore = "Restore"
    /// TF op: RestoreSlice
    public static let restoreSlice = "RestoreSlice"
    /// TF op: RestoreV2
    public static let restoreV2 = "RestoreV2"
    /// TF op: RetrieveAllTPUEmbeddingParameters
    public static let retrieveAllTPUEmbeddingParameters = "RetrieveAllTPUEmbeddingParameters"
    /// TF op: RetrieveTPUEmbeddingADAMParameters
    public static let retrieveTPUEmbeddingADAMParameters = "RetrieveTPUEmbeddingADAMParameters"
    /// TF op: RetrieveTPUEmbeddingAdadeltaParameters
    public static let retrieveTPUEmbeddingAdadeltaParameters = "RetrieveTPUEmbeddingAdadeltaParameters"
    /// TF op: RetrieveTPUEmbeddingAdagradMomentumParameters
    public static let retrieveTPUEmbeddingAdagradMomentumParameters = "RetrieveTPUEmbeddingAdagradMomentumParameters"
    /// TF op: RetrieveTPUEmbeddingAdagradParameters
    public static let retrieveTPUEmbeddingAdagradParameters = "RetrieveTPUEmbeddingAdagradParameters"
    /// TF op: RetrieveTPUEmbeddingCenteredRMSPropParameters
    public static let retrieveTPUEmbeddingCenteredRMSPropParameters = "RetrieveTPUEmbeddingCenteredRMSPropParameters"
    /// TF op: RetrieveTPUEmbeddingFTRLParameters
    public static let retrieveTPUEmbeddingFTRLParameters = "RetrieveTPUEmbeddingFTRLParameters"
    /// TF op: RetrieveTPUEmbeddingFrequencyEstimatorParameters
    public static let retrieveTPUEmbeddingFrequencyEstimatorParameters = "RetrieveTPUEmbeddingFrequencyEstimatorParameters"
    /// TF op: RetrieveTPUEmbeddingMDLAdagradLightParameters
    public static let retrieveTPUEmbeddingMDLAdagradLightParameters = "RetrieveTPUEmbeddingMDLAdagradLightParameters"
    /// TF op: RetrieveTPUEmbeddingMomentumParameters
    public static let retrieveTPUEmbeddingMomentumParameters = "RetrieveTPUEmbeddingMomentumParameters"
    /// TF op: RetrieveTPUEmbeddingProximalAdagradParameters
    public static let retrieveTPUEmbeddingProximalAdagradParameters = "RetrieveTPUEmbeddingProximalAdagradParameters"
    /// TF op: RetrieveTPUEmbeddingProximalYogiParameters
    public static let retrieveTPUEmbeddingProximalYogiParameters = "RetrieveTPUEmbeddingProximalYogiParameters"
    /// TF op: RetrieveTPUEmbeddingRMSPropParameters
    public static let retrieveTPUEmbeddingRMSPropParameters = "RetrieveTPUEmbeddingRMSPropParameters"
    /// TF op: RetrieveTPUEmbeddingStochasticGradientDescentParameters
    public static let retrieveTPUEmbeddingStochasticGradientDescentParameters = "RetrieveTPUEmbeddingStochasticGradientDescentParameters"
    /// TF op: ReverseV2
    public static let reverse = "ReverseV2"
    /// TF op: ReverseSequence
    public static let reverseSequence = "ReverseSequence"
    /// TF op: RewriteDataset
    public static let rewriteDataset = "RewriteDataset"
    /// TF op: RightShift
    public static let right_shift = "RightShift"
    /// TF op: RiscAbs
    public static let riscAbs = "RiscAbs"
    /// TF op: RiscAdd
    public static let riscAdd = "RiscAdd"
    /// TF op: RiscBinaryArithmetic
    public static let riscBinaryArithmetic = "RiscBinaryArithmetic"
    /// TF op: RiscBinaryComparison
    public static let riscBinaryComparison = "RiscBinaryComparison"
    /// TF op: RiscBitcast
    public static let riscBitcast = "RiscBitcast"
    /// TF op: RiscBroadcast
    public static let riscBroadcast = "RiscBroadcast"
    /// TF op: RiscCast
    public static let riscCast = "RiscCast"
    /// TF op: RiscCeil
    public static let riscCeil = "RiscCeil"
    /// TF op: RiscCholesky
    public static let riscCholesky = "RiscCholesky"
    /// TF op: RiscConcat
    public static let riscConcat = "RiscConcat"
    /// TF op: RiscCondition
    public static let riscCondition = "RiscCondition"
    /// TF op: RiscConv
    public static let riscConv = "RiscConv"
    /// TF op: RiscCos
    public static let riscCos = "RiscCos"
    /// TF op: RiscDiv
    public static let riscDiv = "RiscDiv"
    /// TF op: RiscDot
    public static let riscDot = "RiscDot"
    /// TF op: RiscExp
    public static let riscExp = "RiscExp"
    /// TF op: RiscFft
    public static let riscFft = "RiscFft"
    /// TF op: RiscFloor
    public static let riscFloor = "RiscFloor"
    /// TF op: RiscGather
    public static let riscGather = "RiscGather"
    /// TF op: RiscImag
    public static let riscImag = "RiscImag"
    /// TF op: RiscIsFinite
    public static let riscIsFinite = "RiscIsFinite"
    /// TF op: RiscLog
    public static let riscLog = "RiscLog"
    /// TF op: RiscLogicalAnd
    public static let riscLogicalAnd = "RiscLogicalAnd"
    /// TF op: RiscLogicalNot
    public static let riscLogicalNot = "RiscLogicalNot"
    /// TF op: RiscLogicalOr
    public static let riscLogicalOr = "RiscLogicalOr"
    /// TF op: RiscMax
    public static let riscMax = "RiscMax"
    /// TF op: RiscMin
    public static let riscMin = "RiscMin"
    /// TF op: RiscMul
    public static let riscMul = "RiscMul"
    /// TF op: RiscNeg
    public static let riscNeg = "RiscNeg"
    /// TF op: RiscPad
    public static let riscPad = "RiscPad"
    /// TF op: RiscPool
    public static let riscPool = "RiscPool"
    /// TF op: RiscPow
    public static let riscPow = "RiscPow"
    /// TF op: RiscRandomUniform
    public static let riscRandomUniform = "RiscRandomUniform"
    /// TF op: RiscReal
    public static let riscReal = "RiscReal"
    /// TF op: RiscReduce
    public static let riscReduce = "RiscReduce"
    /// TF op: RiscRem
    public static let riscRem = "RiscRem"
    /// TF op: RiscReshape
    public static let riscReshape = "RiscReshape"
    /// TF op: RiscReverse
    public static let riscReverse = "RiscReverse"
    /// TF op: RiscScatter
    public static let riscScatter = "RiscScatter"
    /// TF op: RiscShape
    public static let riscShape = "RiscShape"
    /// TF op: RiscSign
    public static let riscSign = "RiscSign"
    /// TF op: RiscSlice
    public static let riscSlice = "RiscSlice"
    /// TF op: RiscSort
    public static let riscSort = "RiscSort"
    /// TF op: RiscSqueeze
    public static let riscSqueeze = "RiscSqueeze"
    /// TF op: RiscSub
    public static let riscSub = "RiscSub"
    /// TF op: RiscTranspose
    public static let riscTranspose = "RiscTranspose"
    /// TF op: RiscTriangularSolve
    public static let riscTriangularSolve = "RiscTriangularSolve"
    /// TF op: RiscUnary
    public static let riscUnary = "RiscUnary"
    /// TF op: RiscWhile
    public static let riscWhile = "RiscWhile"
    /// TF op: RngReadAndSkip
    public static let rngReadAndSkip = "RngReadAndSkip"
    /// TF op: RngSkip
    public static let rngSkip = "RngSkip"
    /// TF op: Roll
    public static let roll = "Roll"
    /// TF op: Round
    public static let round = "Round"
    /// TF op: RpcCall
    public static let rpcCall = "RpcCall"
    /// TF op: RpcCheckStatus
    public static let rpcCheckStatus = "RpcCheckStatus"
    /// TF op: RpcClient
    public static let rpcClient = "RpcClient"
    /// TF op: RpcGetValue
    public static let rpcGetValue = "RpcGetValue"
    /// TF op: RpcServer
    public static let rpcServer = "RpcServer"
    /// TF op: RpcServerRegister
    public static let rpcServerRegister = "RpcServerRegister"
    /// TF op: RpcServerStart
    public static let rpcServerStart = "RpcServerStart"
    /// TF op: Rsqrt
    public static let rsqrt = "Rsqrt"
    /// TF op: RsqrtGrad
    public static let rsqrtGrad = "RsqrtGrad"
    /// TF op: SampleDistortedBoundingBox
    public static let sampleDistortedBoundingBox = "SampleDistortedBoundingBox"
    /// TF op: SampleDistortedBoundingBoxV2
    public static let sampleDistortedBoundingBoxV2 = "SampleDistortedBoundingBoxV2"
    /// TF op: SamplingDataset
    public static let samplingDataset = "SamplingDataset"
    /// TF op: Save
    public static let save = "Save"
    /// TF op: SaveDataset
    public static let saveDataset = "SaveDataset"
    /// TF op: SaveDatasetV2
    public static let saveDatasetV2 = "SaveDatasetV2"
    /// TF op: SaveSlices
    public static let saveSlices = "SaveSlices"
    /// TF op: SaveV2
    public static let saveV2 = "SaveV2"
    /// TF op: ScalarSummary
    public static let scalarSummary = "ScalarSummary"
    /// TF op: ScaleAndTranslateGrad
    public static let scaleAndTranslateGrad = "ScaleAndTranslateGrad"
    /// TF op: ScanDataset
    public static let scanDataset = "ScanDataset"
    /// TF op: ScatterAdd
    public static let scatterAdd = "ScatterAdd"
    /// TF op: ScatterDiv
    public static let scatterDiv = "ScatterDiv"
    /// TF op: ScatterMax
    public static let scatterMax = "ScatterMax"
    /// TF op: ScatterMin
    public static let scatterMin = "ScatterMin"
    /// TF op: ScatterMul
    public static let scatterMul = "ScatterMul"
    /// TF op: ScatterNdAdd
    public static let scatterNdAdd = "ScatterNdAdd"
    /// TF op: ScatterNdMax
    public static let scatterNdMax = "ScatterNdMax"
    /// TF op: ScatterNdMin
    public static let scatterNdMin = "ScatterNdMin"
    /// TF op: ScatterNdNonAliasingAdd
    public static let scatterNdNonAliasingAdd = "ScatterNdNonAliasingAdd"
    /// TF op: ScatterNdSub
    public static let scatterNdSub = "ScatterNdSub"
    /// TF op: ScatterNdUpdate
    public static let scatterNdUpdate = "ScatterNdUpdate"
    /// TF op: ScatterSub
    public static let scatterSub = "ScatterSub"
    /// TF op: ScatterUpdate
    public static let scatterUpdate = "ScatterUpdate"
    /// TF op: ScatterNd
    public static let scatter_nd = "ScatterNd"
    /// TF op: SdcaOptimizerV2
    public static let sdcaOptimizerV2 = "SdcaOptimizerV2"
    /// TF op: SdcaFprint
    public static let sdca_fprint = "SdcaFprint"
    /// TF op: SdcaOptimizer
    public static let sdca_optimizer = "SdcaOptimizer"
    /// TF op: SdcaShrinkL1
    public static let sdca_shrink_l1 = "SdcaShrinkL1"
    /// TF op: SegmentMaxV2
    public static let segmentMaxV2 = "SegmentMaxV2"
    /// TF op: SegmentMinV2
    public static let segmentMinV2 = "SegmentMinV2"
    /// TF op: SegmentProdV2
    public static let segmentProdV2 = "SegmentProdV2"
    /// TF op: SegmentSumV2
    public static let segmentSumV2 = "SegmentSumV2"
    /// TF op: Select
    public static let select = "Select"
    /// TF op: SelectV2
    public static let selectV2 = "SelectV2"
    /// TF op: SelfAdjointEig
    public static let selfAdjointEig = "SelfAdjointEig"
    /// TF op: SelfAdjointEigV2
    public static let selfAdjointEigV2 = "SelfAdjointEigV2"
    /// TF op: SeluGrad
    public static let seluGrad = "SeluGrad"
    /// TF op: Send
    public static let send = "Send"
    /// TF op: SendTPUEmbeddingGradients
    public static let sendTPUEmbeddingGradients = "SendTPUEmbeddingGradients"
    /// TF op: SerializeIterator
    public static let serializeIterator = "SerializeIterator"
    /// TF op: SerializeManySparse
    public static let serializeManySparse = "SerializeManySparse"
    /// TF op: SerializeSparse
    public static let serializeSparse = "SerializeSparse"
    /// TF op: SerializeTensor
    public static let serializeTensor = "SerializeTensor"
    /// TF op: SetSize
    public static let setSize = "SetSize"
    /// TF op: SetStatsAggregatorDataset
    public static let setStatsAggregatorDataset = "SetStatsAggregatorDataset"
    /// TF op: Shape
    public static let shape = "Shape"
    /// TF op: ShapeN
    public static let shapeN = "ShapeN"
    /// TF op: ShardDataset
    public static let shardDataset = "ShardDataset"
    /// TF op: ShardedFilename
    public static let shardedFilename = "ShardedFilename"
    /// TF op: ShardedFilespec
    public static let shardedFilespec = "ShardedFilespec"
    /// TF op: ShuffleAndRepeatDataset
    public static let shuffleAndRepeatDataset = "ShuffleAndRepeatDataset"
    /// TF op: ShuffleAndRepeatDatasetV2
    public static let shuffleAndRepeatDatasetV2 = "ShuffleAndRepeatDatasetV2"
    /// TF op: ShuffleDataset
    public static let shuffleDataset = "ShuffleDataset"
    /// TF op: ShuffleDatasetV2
    public static let shuffleDatasetV2 = "ShuffleDatasetV2"
    /// TF op: ShuffleDatasetV3
    public static let shuffleDatasetV3 = "ShuffleDatasetV3"
    /// TF op: ShutdownDistributedTPU
    public static let shutdownDistributedTPU = "ShutdownDistributedTPU"
    /// TF op: ShutdownTPUSystem
    public static let shutdownTPUSystem = "ShutdownTPUSystem"
    /// TF op: Sigmoid
    public static let sigmoid = "Sigmoid"
    /// TF op: SigmoidGrad
    public static let sigmoidGrad = "SigmoidGrad"
    /// TF op: Sign
    public static let sign = "Sign"
    /// TF op: Size
    public static let size = "Size"
    /// TF op: SkipDataset
    public static let skipDataset = "SkipDataset"
    /// TF op: Skipgram
    public static let skipgram = "Skipgram"
    /// TF op: SleepDataset
    public static let sleepDataset = "SleepDataset"
    /// TF op: Slice
    public static let slice = "Slice"
    /// TF op: SlidingWindowDataset
    public static let slidingWindowDataset = "SlidingWindowDataset"
    /// TF op: Snapshot
    public static let snapshot = "Snapshot"
    /// TF op: SnapshotChunkDataset
    public static let snapshotChunkDataset = "SnapshotChunkDataset"
    /// TF op: SnapshotDataset
    public static let snapshotDataset = "SnapshotDataset"
    /// TF op: SnapshotDatasetReader
    public static let snapshotDatasetReader = "SnapshotDatasetReader"
    /// TF op: SnapshotDatasetV2
    public static let snapshotDatasetV2 = "SnapshotDatasetV2"
    /// TF op: SnapshotNestedDatasetReader
    public static let snapshotNestedDatasetReader = "SnapshotNestedDatasetReader"
    /// TF op: SobolSample
    public static let sobolSample = "SobolSample"
    /// TF op: Softmax
    public static let softmax = "Softmax"
    /// TF op: SoftmaxCrossEntropyWithLogits
    public static let softmaxCrossEntropyWithLogits = "SoftmaxCrossEntropyWithLogits"
    /// TF op: Softplus
    public static let softplus = "Softplus"
    /// TF op: SoftplusGrad
    public static let softplusGrad = "SoftplusGrad"
    /// TF op: SoftsignGrad
    public static let softsignGrad = "SoftsignGrad"
    /// TF op: SortListOfSparseCoreCooTensors
    public static let sortListOfSparseCoreCooTensors = "SortListOfSparseCoreCooTensors"
    /// TF op: SpaceToBatch
    public static let spaceToBatch = "SpaceToBatch"
    /// TF op: SpaceToDepth
    public static let spaceToDepth = "SpaceToDepth"
    /// TF op: SpaceToBatchND
    public static let space_to_batch_nd = "SpaceToBatchND"
    /// TF op: SparseAccumulatorApplyGradient
    public static let sparseAccumulatorApplyGradient = "SparseAccumulatorApplyGradient"
    /// TF op: SparseAccumulatorTakeGradient
    public static let sparseAccumulatorTakeGradient = "SparseAccumulatorTakeGradient"
    /// TF op: SparseAdd
    public static let sparseAdd = "SparseAdd"
    /// TF op: SparseAddGrad
    public static let sparseAddGrad = "SparseAddGrad"
    /// TF op: SparseApplyAdadelta
    public static let sparseApplyAdadelta = "SparseApplyAdadelta"
    /// TF op: SparseApplyAdagrad
    public static let sparseApplyAdagrad = "SparseApplyAdagrad"
    /// TF op: SparseApplyAdagradDA
    public static let sparseApplyAdagradDA = "SparseApplyAdagradDA"
    /// TF op: SparseApplyAdagradV2
    public static let sparseApplyAdagradV2 = "SparseApplyAdagradV2"
    /// TF op: SparseApplyCenteredRMSProp
    public static let sparseApplyCenteredRMSProp = "SparseApplyCenteredRMSProp"
    /// TF op: SparseApplyFtrl
    public static let sparseApplyFtrl = "SparseApplyFtrl"
    /// TF op: SparseApplyFtrlV2
    public static let sparseApplyFtrlV2 = "SparseApplyFtrlV2"
    /// TF op: SparseApplyMomentum
    public static let sparseApplyMomentum = "SparseApplyMomentum"
    /// TF op: SparseApplyProximalAdagrad
    public static let sparseApplyProximalAdagrad = "SparseApplyProximalAdagrad"
    /// TF op: SparseApplyProximalGradientDescent
    public static let sparseApplyProximalGradientDescent = "SparseApplyProximalGradientDescent"
    /// TF op: SparseApplyRMSProp
    public static let sparseApplyRMSProp = "SparseApplyRMSProp"
    /// TF op: SparseBincount
    public static let sparseBincount = "SparseBincount"
    /// TF op: SparseConcat
    public static let sparseConcat = "SparseConcat"
    /// TF op: SparseConditionalAccumulator
    public static let sparseConditionalAccumulator = "SparseConditionalAccumulator"
    /// TF op: SparseCountSparseOutput
    public static let sparseCountSparseOutput = "SparseCountSparseOutput"
    /// TF op: SparseCross
    public static let sparseCross = "SparseCross"
    /// TF op: SparseCrossHashed
    public static let sparseCrossHashed = "SparseCrossHashed"
    /// TF op: SparseCrossV2
    public static let sparseCrossV2 = "SparseCrossV2"
    /// TF op: SparseDenseCwiseAdd
    public static let sparseDenseCwiseAdd = "SparseDenseCwiseAdd"
    /// TF op: SparseDenseCwiseDiv
    public static let sparseDenseCwiseDiv = "SparseDenseCwiseDiv"
    /// TF op: SparseDenseCwiseMul
    public static let sparseDenseCwiseMul = "SparseDenseCwiseMul"
    /// TF op: SparseFillEmptyRows
    public static let sparseFillEmptyRows = "SparseFillEmptyRows"
    /// TF op: SparseFillEmptyRowsGrad
    public static let sparseFillEmptyRowsGrad = "SparseFillEmptyRowsGrad"
    /// TF op: SparseMatMul
    public static let sparseMatMul = "SparseMatMul"
    /// TF op: SparseMatrixAdd
    public static let sparseMatrixAdd = "SparseMatrixAdd"
    /// TF op: SparseMatrixMatMul
    public static let sparseMatrixMatMul = "SparseMatrixMatMul"
    /// TF op: SparseMatrixMul
    public static let sparseMatrixMul = "SparseMatrixMul"
    /// TF op: SparseMatrixNNZ
    public static let sparseMatrixNNZ = "SparseMatrixNNZ"
    /// TF op: SparseMatrixOrderingAMD
    public static let sparseMatrixOrderingAMD = "SparseMatrixOrderingAMD"
    /// TF op: SparseMatrixSoftmax
    public static let sparseMatrixSoftmax = "SparseMatrixSoftmax"
    /// TF op: SparseMatrixSoftmaxGrad
    public static let sparseMatrixSoftmaxGrad = "SparseMatrixSoftmaxGrad"
    /// TF op: SparseMatrixSparseCholesky
    public static let sparseMatrixSparseCholesky = "SparseMatrixSparseCholesky"
    /// TF op: SparseMatrixSparseMatMul
    public static let sparseMatrixSparseMatMul = "SparseMatrixSparseMatMul"
    /// TF op: SparseMatrixTranspose
    public static let sparseMatrixTranspose = "SparseMatrixTranspose"
    /// TF op: SparseMatrixZeros
    public static let sparseMatrixZeros = "SparseMatrixZeros"
    /// TF op: SparseReduceMax
    public static let sparseReduceMax = "SparseReduceMax"
    /// TF op: SparseReduceMaxSparse
    public static let sparseReduceMaxSparse = "SparseReduceMaxSparse"
    /// TF op: SparseReduceSum
    public static let sparseReduceSum = "SparseReduceSum"
    /// TF op: SparseReduceSumSparse
    public static let sparseReduceSumSparse = "SparseReduceSumSparse"
    /// TF op: SparseReorder
    public static let sparseReorder = "SparseReorder"
    /// TF op: SparseReshape
    public static let sparseReshape = "SparseReshape"
    /// TF op: SparseSegmentMean
    public static let sparseSegmentMean = "SparseSegmentMean"
    /// TF op: SparseSegmentMeanGrad
    public static let sparseSegmentMeanGrad = "SparseSegmentMeanGrad"
    /// TF op: SparseSegmentMeanGradV2
    public static let sparseSegmentMeanGradV2 = "SparseSegmentMeanGradV2"
    /// TF op: SparseSegmentMeanWithNumSegments
    public static let sparseSegmentMeanWithNumSegments = "SparseSegmentMeanWithNumSegments"
    /// TF op: SparseSegmentSqrtN
    public static let sparseSegmentSqrtN = "SparseSegmentSqrtN"
    /// TF op: SparseSegmentSqrtNGrad
    public static let sparseSegmentSqrtNGrad = "SparseSegmentSqrtNGrad"
    /// TF op: SparseSegmentSqrtNGradV2
    public static let sparseSegmentSqrtNGradV2 = "SparseSegmentSqrtNGradV2"
    /// TF op: SparseSegmentSqrtNWithNumSegments
    public static let sparseSegmentSqrtNWithNumSegments = "SparseSegmentSqrtNWithNumSegments"
    /// TF op: SparseSegmentSum
    public static let sparseSegmentSum = "SparseSegmentSum"
    /// TF op: SparseSegmentSumGrad
    public static let sparseSegmentSumGrad = "SparseSegmentSumGrad"
    /// TF op: SparseSegmentSumGradV2
    public static let sparseSegmentSumGradV2 = "SparseSegmentSumGradV2"
    /// TF op: SparseSegmentSumWithNumSegments
    public static let sparseSegmentSumWithNumSegments = "SparseSegmentSumWithNumSegments"
    /// TF op: SparseSlice
    public static let sparseSlice = "SparseSlice"
    /// TF op: SparseSliceGrad
    public static let sparseSliceGrad = "SparseSliceGrad"
    /// TF op: SparseSoftmax
    public static let sparseSoftmax = "SparseSoftmax"
    /// TF op: SparseSoftmaxCrossEntropyWithLogits
    public static let sparseSoftmaxCrossEntropyWithLogits = "SparseSoftmaxCrossEntropyWithLogits"
    /// TF op: SparseSparseMaximum
    public static let sparseSparseMaximum = "SparseSparseMaximum"
    /// TF op: SparseSparseMinimum
    public static let sparseSparseMinimum = "SparseSparseMinimum"
    /// TF op: SparseSplit
    public static let sparseSplit = "SparseSplit"
    /// TF op: SparseTensorDenseAdd
    public static let sparseTensorDenseAdd = "SparseTensorDenseAdd"
    /// TF op: SparseTensorDenseMatMul
    public static let sparseTensorDenseMatMul = "SparseTensorDenseMatMul"
    /// TF op: SparseTensorSliceDataset
    public static let sparseTensorSliceDataset = "SparseTensorSliceDataset"
    /// TF op: SparseTensorToCSRSparseMatrix
    public static let sparseTensorToCSRSparseMatrix = "SparseTensorToCSRSparseMatrix"
    /// TF op: SparseToDense
    public static let sparseToDense = "SparseToDense"
    /// TF op: SparseToSparseSetOperation
    public static let sparseToSparseSetOperation = "SparseToSparseSetOperation"
    /// TF op: Spence
    public static let spence = "Spence"
    /// TF op: Split
    public static let split = "Split"
    /// TF op: SplitDedupData
    public static let splitDedupData = "SplitDedupData"
    /// TF op: SplitV
    public static let splitV = "SplitV"
    /// TF op: SqlDataset
    public static let sqlDataset = "SqlDataset"
    /// TF op: Sqrt
    public static let sqrt = "Sqrt"
    /// TF op: SqrtGrad
    public static let sqrtGrad = "SqrtGrad"
    /// TF op: Squeeze
    public static let squeeze = "Squeeze"
    /// TF op: Stack
    public static let stack = "Stack"
    /// TF op: StackClose
    public static let stackClose = "StackClose"
    /// TF op: StackCloseV2
    public static let stackCloseV2 = "StackCloseV2"
    /// TF op: StackPop
    public static let stackPop = "StackPop"
    /// TF op: StackPopV2
    public static let stackPopV2 = "StackPopV2"
    /// TF op: StackPush
    public static let stackPush = "StackPush"
    /// TF op: StackPushV2
    public static let stackPushV2 = "StackPushV2"
    /// TF op: StackV2
    public static let stackV2 = "StackV2"
    /// TF op: Stage
    public static let stage = "Stage"
    /// TF op: StageClear
    public static let stageClear = "StageClear"
    /// TF op: StagePeek
    public static let stagePeek = "StagePeek"
    /// TF op: StageSize
    public static let stageSize = "StageSize"
    /// TF op: StatefulPartitionedCall
    public static let statefulPartitionedCall = "StatefulPartitionedCall"
    /// TF op: StatefulRandomBinomial
    public static let statefulRandomBinomial = "StatefulRandomBinomial"
    /// TF op: StatefulStandardNormal
    public static let statefulStandardNormal = "StatefulStandardNormal"
    /// TF op: StatefulStandardNormalV2
    public static let statefulStandardNormalV2 = "StatefulStandardNormalV2"
    /// TF op: StatefulTruncatedNormal
    public static let statefulTruncatedNormal = "StatefulTruncatedNormal"
    /// TF op: StatefulUniform
    public static let statefulUniform = "StatefulUniform"
    /// TF op: StatefulUniformFullInt
    public static let statefulUniformFullInt = "StatefulUniformFullInt"
    /// TF op: StatefulUniformInt
    public static let statefulUniformInt = "StatefulUniformInt"
    /// TF op: StatelessCase
    public static let statelessCase = "StatelessCase"
    /// TF op: StatelessIf
    public static let statelessIf = "StatelessIf"
    /// TF op: StatelessMultinomial
    public static let statelessMultinomial = "StatelessMultinomial"
    /// TF op: StatelessParameterizedTruncatedNormal
    public static let statelessParameterizedTruncatedNormal = "StatelessParameterizedTruncatedNormal"
    /// TF op: StatelessRandomBinomial
    public static let statelessRandomBinomial = "StatelessRandomBinomial"
    /// TF op: StatelessRandomGammaV2
    public static let statelessRandomGammaV2 = "StatelessRandomGammaV2"
    /// TF op: StatelessRandomGammaV3
    public static let statelessRandomGammaV3 = "StatelessRandomGammaV3"
    /// TF op: StatelessRandomGetAlg
    public static let statelessRandomGetAlg = "StatelessRandomGetAlg"
    /// TF op: StatelessRandomGetKeyCounter
    public static let statelessRandomGetKeyCounter = "StatelessRandomGetKeyCounter"
    /// TF op: StatelessRandomGetKeyCounterAlg
    public static let statelessRandomGetKeyCounterAlg = "StatelessRandomGetKeyCounterAlg"
    /// TF op: StatelessRandomNormal
    public static let statelessRandomNormal = "StatelessRandomNormal"
    /// TF op: StatelessRandomNormalV2
    public static let statelessRandomNormalV2 = "StatelessRandomNormalV2"
    /// TF op: StatelessRandomPoisson
    public static let statelessRandomPoisson = "StatelessRandomPoisson"
    /// TF op: StatelessRandomUniform
    public static let statelessRandomUniform = "StatelessRandomUniform"
    /// TF op: StatelessRandomUniformFullInt
    public static let statelessRandomUniformFullInt = "StatelessRandomUniformFullInt"
    /// TF op: StatelessRandomUniformFullIntV2
    public static let statelessRandomUniformFullIntV2 = "StatelessRandomUniformFullIntV2"
    /// TF op: StatelessRandomUniformInt
    public static let statelessRandomUniformInt = "StatelessRandomUniformInt"
    /// TF op: StatelessRandomUniformIntV2
    public static let statelessRandomUniformIntV2 = "StatelessRandomUniformIntV2"
    /// TF op: StatelessRandomUniformV2
    public static let statelessRandomUniformV2 = "StatelessRandomUniformV2"
    /// TF op: StatelessSampleDistortedBoundingBox
    public static let statelessSampleDistortedBoundingBox = "StatelessSampleDistortedBoundingBox"
    /// TF op: StatelessShuffle
    public static let statelessShuffle = "StatelessShuffle"
    /// TF op: StatelessTruncatedNormal
    public static let statelessTruncatedNormal = "StatelessTruncatedNormal"
    /// TF op: StatelessTruncatedNormalV2
    public static let statelessTruncatedNormalV2 = "StatelessTruncatedNormalV2"
    /// TF op: StatelessWhile
    public static let statelessWhile = "StatelessWhile"
    /// TF op: StaticRegexFullMatch
    public static let staticRegexFullMatch = "StaticRegexFullMatch"
    /// TF op: StaticRegexReplace
    public static let staticRegexReplace = "StaticRegexReplace"
    /// TF op: StatsAggregatorHandle
    public static let statsAggregatorHandle = "StatsAggregatorHandle"
    /// TF op: StatsAggregatorHandleV2
    public static let statsAggregatorHandleV2 = "StatsAggregatorHandleV2"
    /// TF op: StatsAggregatorSetSummaryWriter
    public static let statsAggregatorSetSummaryWriter = "StatsAggregatorSetSummaryWriter"
    /// TF op: StatsAggregatorSummary
    public static let statsAggregatorSummary = "StatsAggregatorSummary"
    /// TF op: StochasticCastToInt
    public static let stochasticCastToInt = "StochasticCastToInt"
    /// TF op: StopGradient
    public static let stopGradient = "StopGradient"
    /// TF op: StoreMinibatchStatisticsInFdo
    public static let storeMinibatchStatisticsInFdo = "StoreMinibatchStatisticsInFdo"
    /// TF op: StridedSlice
    public static let stridedSlice = "StridedSlice"
    /// TF op: StridedSliceAssign
    public static let stridedSliceAssign = "StridedSliceAssign"
    /// TF op: StridedSliceGrad
    public static let stridedSliceGrad = "StridedSliceGrad"
    /// TF op: StringFormat
    public static let stringFormat = "StringFormat"
    /// TF op: StringJoin
    public static let stringJoin = "StringJoin"
    /// TF op: StringLength
    public static let stringLength = "StringLength"
    /// TF op: StringNGrams
    public static let stringNGrams = "StringNGrams"
    /// TF op: StringSplit
    public static let stringSplit = "StringSplit"
    /// TF op: StringSplitV2
    public static let stringSplitV2 = "StringSplitV2"
    /// TF op: StringToHashBucket
    public static let stringToHashBucket = "StringToHashBucket"
    /// TF op: StringToNumber
    public static let stringToNumber = "StringToNumber"
    /// TF op: StringStrip
    public static let strip = "StringStrip"
    /// TF op: Sub
    public static let sub = "Sub"
    /// TF op: Substr
    public static let substr = "Substr"
    /// TF op: Sum
    public static let sum = "Sum"
    /// TF op: SummaryWriter
    public static let summaryWriter = "SummaryWriter"
    /// TF op: Svd
    public static let svd = "Svd"
    /// TF op: Switch
    public static let `switch` = "Switch"
    /// TF op: SymbolicGradient
    public static let symbolicGradient = "SymbolicGradient"
    /// TF op: SyncDevice
    public static let syncDevice = "SyncDevice"
    /// TF op: TFRecordDataset
    public static let tFRecordDataset = "TFRecordDataset"
    /// TF op: TFRecordDatasetV2
    public static let tFRecordDatasetV2 = "TFRecordDatasetV2"
    /// TF op: TFRecordReader
    public static let tFRecordReader = "TFRecordReader"
    /// TF op: TFRecordReaderV2
    public static let tFRecordReaderV2 = "TFRecordReaderV2"
    /// TF op: TPUAnnotateTensorsWithDynamicShape
    public static let tPUAnnotateTensorsWithDynamicShape = "TPUAnnotateTensorsWithDynamicShape"
    /// TF op: TPUCompilationResult
    public static let tPUCompilationResult = "TPUCompilationResult"
    /// TF op: TPUCompile
    public static let tPUCompile = "TPUCompile"
    /// TF op: TPUCompileSucceededAssert
    public static let tPUCompileSucceededAssert = "TPUCompileSucceededAssert"
    /// TF op: TPUCopyWithDynamicShape
    public static let tPUCopyWithDynamicShape = "TPUCopyWithDynamicShape"
    /// TF op: TPUEmbeddingActivations
    public static let tPUEmbeddingActivations = "TPUEmbeddingActivations"
    /// TF op: TPUExecute
    public static let tPUExecute = "TPUExecute"
    /// TF op: TPUExecuteAndUpdateVariables
    public static let tPUExecuteAndUpdateVariables = "TPUExecuteAndUpdateVariables"
    /// TF op: TPUOrdinalSelector
    public static let tPUOrdinalSelector = "TPUOrdinalSelector"
    /// TF op: TPUPartitionedCall
    public static let tPUPartitionedCall = "TPUPartitionedCall"
    /// TF op: TPUPartitionedInput
    public static let tPUPartitionedInput = "TPUPartitionedInput"
    /// TF op: TPUPartitionedInputV2
    public static let tPUPartitionedInputV2 = "TPUPartitionedInputV2"
    /// TF op: TPUPartitionedOutput
    public static let tPUPartitionedOutput = "TPUPartitionedOutput"
    /// TF op: TPUPartitionedOutputV2
    public static let tPUPartitionedOutputV2 = "TPUPartitionedOutputV2"
    /// TF op: TPUReplicateMetadata
    public static let tPUReplicateMetadata = "TPUReplicateMetadata"
    /// TF op: TPUReplicatedInput
    public static let tPUReplicatedInput = "TPUReplicatedInput"
    /// TF op: TPUReplicatedOutput
    public static let tPUReplicatedOutput = "TPUReplicatedOutput"
    /// TF op: TPUReshardVariables
    public static let tPUReshardVariables = "TPUReshardVariables"
    /// TF op: TPURoundRobin
    public static let tPURoundRobin = "TPURoundRobin"
    /// TF op: TakeDataset
    public static let takeDataset = "TakeDataset"
    /// TF op: TakeManySparseFromTensorsMap
    public static let takeManySparseFromTensorsMap = "TakeManySparseFromTensorsMap"
    /// TF op: TakeWhileDataset
    public static let takeWhileDataset = "TakeWhileDataset"
    /// TF op: TanhGrad
    public static let tanhGrad = "TanhGrad"
    /// TF op: TemporaryVariable
    public static let temporaryVariable = "TemporaryVariable"
    /// TF op: TensorArray
    public static let tensorArray = "TensorArray"
    /// TF op: TensorArrayClose
    public static let tensorArrayClose = "TensorArrayClose"
    /// TF op: TensorArrayCloseV2
    public static let tensorArrayCloseV2 = "TensorArrayCloseV2"
    /// TF op: TensorArrayCloseV3
    public static let tensorArrayCloseV3 = "TensorArrayCloseV3"
    /// TF op: TensorArrayConcat
    public static let tensorArrayConcat = "TensorArrayConcat"
    /// TF op: TensorArrayConcatV2
    public static let tensorArrayConcatV2 = "TensorArrayConcatV2"
    /// TF op: TensorArrayConcatV3
    public static let tensorArrayConcatV3 = "TensorArrayConcatV3"
    /// TF op: TensorArrayGather
    public static let tensorArrayGather = "TensorArrayGather"
    /// TF op: TensorArrayGatherV2
    public static let tensorArrayGatherV2 = "TensorArrayGatherV2"
    /// TF op: TensorArrayGatherV3
    public static let tensorArrayGatherV3 = "TensorArrayGatherV3"
    /// TF op: TensorArrayGrad
    public static let tensorArrayGrad = "TensorArrayGrad"
    /// TF op: TensorArrayGradV2
    public static let tensorArrayGradV2 = "TensorArrayGradV2"
    /// TF op: TensorArrayGradV3
    public static let tensorArrayGradV3 = "TensorArrayGradV3"
    /// TF op: TensorArrayGradWithShape
    public static let tensorArrayGradWithShape = "TensorArrayGradWithShape"
    /// TF op: TensorArrayPack
    public static let tensorArrayPack = "TensorArrayPack"
    /// TF op: TensorArrayRead
    public static let tensorArrayRead = "TensorArrayRead"
    /// TF op: TensorArrayReadV2
    public static let tensorArrayReadV2 = "TensorArrayReadV2"
    /// TF op: TensorArrayReadV3
    public static let tensorArrayReadV3 = "TensorArrayReadV3"
    /// TF op: TensorArrayScatter
    public static let tensorArrayScatter = "TensorArrayScatter"
    /// TF op: TensorArrayScatterV2
    public static let tensorArrayScatterV2 = "TensorArrayScatterV2"
    /// TF op: TensorArrayScatterV3
    public static let tensorArrayScatterV3 = "TensorArrayScatterV3"
    /// TF op: TensorArraySize
    public static let tensorArraySize = "TensorArraySize"
    /// TF op: TensorArraySizeV2
    public static let tensorArraySizeV2 = "TensorArraySizeV2"
    /// TF op: TensorArraySizeV3
    public static let tensorArraySizeV3 = "TensorArraySizeV3"
    /// TF op: TensorArraySplit
    public static let tensorArraySplit = "TensorArraySplit"
    /// TF op: TensorArraySplitV2
    public static let tensorArraySplitV2 = "TensorArraySplitV2"
    /// TF op: TensorArraySplitV3
    public static let tensorArraySplitV3 = "TensorArraySplitV3"
    /// TF op: TensorArrayUnpack
    public static let tensorArrayUnpack = "TensorArrayUnpack"
    /// TF op: TensorArrayV2
    public static let tensorArrayV2 = "TensorArrayV2"
    /// TF op: TensorArrayV3
    public static let tensorArrayV3 = "TensorArrayV3"
    /// TF op: TensorArrayWrite
    public static let tensorArrayWrite = "TensorArrayWrite"
    /// TF op: TensorArrayWriteV2
    public static let tensorArrayWriteV2 = "TensorArrayWriteV2"
    /// TF op: TensorArrayWriteV3
    public static let tensorArrayWriteV3 = "TensorArrayWriteV3"
    /// TF op: TensorDataset
    public static let tensorDataset = "TensorDataset"
    /// TF op: TensorListConcat
    public static let tensorListConcat = "TensorListConcat"
    /// TF op: TensorListConcatLists
    public static let tensorListConcatLists = "TensorListConcatLists"
    /// TF op: TensorListConcatV2
    public static let tensorListConcatV2 = "TensorListConcatV2"
    /// TF op: TensorListElementShape
    public static let tensorListElementShape = "TensorListElementShape"
    /// TF op: TensorListFromTensor
    public static let tensorListFromTensor = "TensorListFromTensor"
    /// TF op: TensorListGather
    public static let tensorListGather = "TensorListGather"
    /// TF op: TensorListGetItem
    public static let tensorListGetItem = "TensorListGetItem"
    /// TF op: TensorListLength
    public static let tensorListLength = "TensorListLength"
    /// TF op: TensorListPopBack
    public static let tensorListPopBack = "TensorListPopBack"
    /// TF op: TensorListPushBack
    public static let tensorListPushBack = "TensorListPushBack"
    /// TF op: TensorListPushBackBatch
    public static let tensorListPushBackBatch = "TensorListPushBackBatch"
    /// TF op: TensorListReserve
    public static let tensorListReserve = "TensorListReserve"
    /// TF op: TensorListResize
    public static let tensorListResize = "TensorListResize"
    /// TF op: TensorListScatter
    public static let tensorListScatter = "TensorListScatter"
    /// TF op: TensorListScatterIntoExistingList
    public static let tensorListScatterIntoExistingList = "TensorListScatterIntoExistingList"
    /// TF op: TensorListScatterV2
    public static let tensorListScatterV2 = "TensorListScatterV2"
    /// TF op: TensorListSetItem
    public static let tensorListSetItem = "TensorListSetItem"
    /// TF op: TensorListSplit
    public static let tensorListSplit = "TensorListSplit"
    /// TF op: TensorListStack
    public static let tensorListStack = "TensorListStack"
    /// TF op: TensorMapErase
    public static let tensorMapErase = "TensorMapErase"
    /// TF op: TensorMapHasKey
    public static let tensorMapHasKey = "TensorMapHasKey"
    /// TF op: TensorMapInsert
    public static let tensorMapInsert = "TensorMapInsert"
    /// TF op: TensorMapLookup
    public static let tensorMapLookup = "TensorMapLookup"
    /// TF op: TensorMapSize
    public static let tensorMapSize = "TensorMapSize"
    /// TF op: TensorMapStackKeys
    public static let tensorMapStackKeys = "TensorMapStackKeys"
    /// TF op: TensorScatterUpdate
    public static let tensorScatterUpdate = "TensorScatterUpdate"
    /// TF op: TensorSliceDataset
    public static let tensorSliceDataset = "TensorSliceDataset"
    /// TF op: TensorStridedSliceUpdate
    public static let tensorStridedSliceUpdate = "TensorStridedSliceUpdate"
    /// TF op: TensorSummary
    public static let tensorSummary = "TensorSummary"
    /// TF op: TensorSummaryV2
    public static let tensorSummaryV2 = "TensorSummaryV2"
    /// TF op: TensorScatterAdd
    public static let tensor_scatter_nd_add = "TensorScatterAdd"
    /// TF op: TensorScatterMax
    public static let tensor_scatter_nd_max = "TensorScatterMax"
    /// TF op: TensorScatterMin
    public static let tensor_scatter_nd_min = "TensorScatterMin"
    /// TF op: TensorScatterSub
    public static let tensor_scatter_nd_sub = "TensorScatterSub"
    /// TF op: TextLineDataset
    public static let textLineDataset = "TextLineDataset"
    /// TF op: TextLineReader
    public static let textLineReader = "TextLineReader"
    /// TF op: TextLineReaderV2
    public static let textLineReaderV2 = "TextLineReaderV2"
    /// TF op: ThreadPoolDataset
    public static let threadPoolDataset = "ThreadPoolDataset"
    /// TF op: ThreadPoolHandle
    public static let threadPoolHandle = "ThreadPoolHandle"
    /// TF op: ThreadUnsafeUnigramCandidateSampler
    public static let threadUnsafeUnigramCandidateSampler = "ThreadUnsafeUnigramCandidateSampler"
    /// TF op: Tile
    public static let tile = "Tile"
    /// TF op: TileGrad
    public static let tileGrad = "TileGrad"
    /// TF op: Timestamp
    public static let timestamp = "Timestamp"
    /// TF op: ToBool
    public static let toBool = "ToBool"
    /// TF op: StringToHashBucketFast
    public static let to_hash_bucket_fast = "StringToHashBucketFast"
    /// TF op: StringToHashBucketStrong
    public static let to_hash_bucket_strong = "StringToHashBucketStrong"
    /// TF op: TopK
    public static let topK = "TopK"
    /// TF op: TopKUnique
    public static let topKUnique = "TopKUnique"
    /// TF op: TopKV2
    public static let topKV2 = "TopKV2"
    /// TF op: TopKWithUnique
    public static let topKWithUnique = "TopKWithUnique"
    /// TF op: TpuHandleToProtoKey
    public static let tpuHandleToProtoKey = "TpuHandleToProtoKey"
    /// TF op: Transpose
    public static let transpose = "Transpose"
    /// TF op: TridiagonalMatMul
    public static let tridiagonalMatMul = "TridiagonalMatMul"
    /// TF op: TridiagonalSolve
    public static let tridiagonalSolve = "TridiagonalSolve"
    /// TF op: TruncatedNormal
    public static let truncatedNormal = "TruncatedNormal"
    /// TF op: TruncateDiv
    public static let truncatediv = "TruncateDiv"
    /// TF op: TruncateMod
    public static let truncatemod = "TruncateMod"
    /// TF op: Unbatch
    public static let unbatch = "Unbatch"
    /// TF op: UnbatchDataset
    public static let unbatchDataset = "UnbatchDataset"
    /// TF op: UnbatchGrad
    public static let unbatchGrad = "UnbatchGrad"
    /// TF op: UncompressElement
    public static let uncompressElement = "UncompressElement"
    /// TF op: UnicodeDecode
    public static let unicodeDecode = "UnicodeDecode"
    /// TF op: UnicodeDecodeWithOffsets
    public static let unicodeDecodeWithOffsets = "UnicodeDecodeWithOffsets"
    /// TF op: UnicodeEncode
    public static let unicodeEncode = "UnicodeEncode"
    /// TF op: UnicodeScript
    public static let unicode_script = "UnicodeScript"
    /// TF op: UnicodeTranscode
    public static let unicode_transcode = "UnicodeTranscode"
    /// TF op: UniformCandidateSampler
    public static let uniformCandidateSampler = "UniformCandidateSampler"
    /// TF op: UniformDequantize
    public static let uniformDequantize = "UniformDequantize"
    /// TF op: UniformQuantize
    public static let uniformQuantize = "UniformQuantize"
    /// TF op: UniformQuantizedAdd
    public static let uniformQuantizedAdd = "UniformQuantizedAdd"
    /// TF op: UniformQuantizedClipByValue
    public static let uniformQuantizedClipByValue = "UniformQuantizedClipByValue"
    /// TF op: UniformQuantizedConvolution
    public static let uniformQuantizedConvolution = "UniformQuantizedConvolution"
    /// TF op: UniformQuantizedConvolutionHybrid
    public static let uniformQuantizedConvolutionHybrid = "UniformQuantizedConvolutionHybrid"
    /// TF op: UniformQuantizedDot
    public static let uniformQuantizedDot = "UniformQuantizedDot"
    /// TF op: UniformQuantizedDotHybrid
    public static let uniformQuantizedDotHybrid = "UniformQuantizedDotHybrid"
    /// TF op: UniformRequantize
    public static let uniformRequantize = "UniformRequantize"
    /// TF op: Unique
    public static let unique = "Unique"
    /// TF op: UniqueDataset
    public static let uniqueDataset = "UniqueDataset"
    /// TF op: UniqueV2
    public static let uniqueV2 = "UniqueV2"
    /// TF op: UniqueWithCounts
    public static let uniqueWithCounts = "UniqueWithCounts"
    /// TF op: UniqueWithCountsV2
    public static let uniqueWithCountsV2 = "UniqueWithCountsV2"
    /// TF op: Unpack
    public static let unpack = "Unpack"
    /// TF op: UnravelIndex
    public static let unravelIndex = "UnravelIndex"
    /// TF op: UnsortedSegmentJoin
    public static let unsorted_segment_join = "UnsortedSegmentJoin"
    /// TF op: Unstage
    public static let unstage = "Unstage"
    /// TF op: UnwrapDatasetVariant
    public static let unwrapDatasetVariant = "UnwrapDatasetVariant"
    /// TF op: UpdateTaskIdAndGlobalCoreArray
    public static let updateTaskIdAndGlobalCoreArray = "UpdateTaskIdAndGlobalCoreArray"
    /// TF op: StringUpper
    public static let upper = "StringUpper"
    /// TF op: UpperBound
    public static let upperBound = "UpperBound"
    /// TF op: VarHandleOp
    public static let varHandleOp = "VarHandleOp"
    /// TF op: VarIsInitializedOp
    public static let varIsInitializedOp = "VarIsInitializedOp"
    /// TF op: Variable
    public static let variable = "Variable"
    /// TF op: VariableShape
    public static let variableShape = "VariableShape"
    /// TF op: VariableV2
    public static let variableV2 = "VariableV2"
    /// TF op: WeightedFlatMapDataset
    public static let weightedFlatMapDataset = "WeightedFlatMapDataset"
    /// TF op: Where
    public static let `where` = "Where"
    /// TF op: While
    public static let `while` = "While"
    /// TF op: WholeFileReader
    public static let wholeFileReader = "WholeFileReader"
    /// TF op: WholeFileReaderV2
    public static let wholeFileReaderV2 = "WholeFileReaderV2"
    /// TF op: WindowDataset
    public static let windowDataset = "WindowDataset"
    /// TF op: WindowOp
    public static let windowOp = "WindowOp"
    /// TF op: WorkerHeartbeat
    public static let workerHeartbeat = "WorkerHeartbeat"
    /// TF op: WrapDatasetVariant
    public static let wrapDatasetVariant = "WrapDatasetVariant"
    /// TF op: WriteAudioSummary
    public static let writeAudioSummary = "WriteAudioSummary"
    /// TF op: WriteGraphSummary
    public static let writeGraphSummary = "WriteGraphSummary"
    /// TF op: WriteHistogramSummary
    public static let writeHistogramSummary = "WriteHistogramSummary"
    /// TF op: WriteImageSummary
    public static let writeImageSummary = "WriteImageSummary"
    /// TF op: WriteRawProtoSummary
    public static let writeRawProtoSummary = "WriteRawProtoSummary"
    /// TF op: WriteScalarSummary
    public static let writeScalarSummary = "WriteScalarSummary"
    /// TF op: WriteSummary
    public static let writeSummary = "WriteSummary"
    /// TF op: Xdivy
    public static let xdivy = "Xdivy"
    /// TF op: XlaAllReduce
    public static let xlaAllReduce = "XlaAllReduce"
    /// TF op: XlaBroadcastHelper
    public static let xlaBroadcastHelper = "XlaBroadcastHelper"
    /// TF op: XlaCallModule
    public static let xlaCallModule = "XlaCallModule"
    /// TF op: XlaClusterOutput
    public static let xlaClusterOutput = "XlaClusterOutput"
    /// TF op: XlaConcatND
    public static let xlaConcatND = "XlaConcatND"
    /// TF op: XlaConv
    public static let xlaConv = "XlaConv"
    /// TF op: XlaConvV2
    public static let xlaConvV2 = "XlaConvV2"
    /// TF op: XlaCustomCall
    public static let xlaCustomCall = "XlaCustomCall"
    /// TF op: XlaCustomCallV2
    public static let xlaCustomCallV2 = "XlaCustomCallV2"
    /// TF op: XlaDequantize
    public static let xlaDequantize = "XlaDequantize"
    /// TF op: XlaDot
    public static let xlaDot = "XlaDot"
    /// TF op: XlaDotV2
    public static let xlaDotV2 = "XlaDotV2"
    /// TF op: XlaDynamicSlice
    public static let xlaDynamicSlice = "XlaDynamicSlice"
    /// TF op: XlaDynamicUpdateSlice
    public static let xlaDynamicUpdateSlice = "XlaDynamicUpdateSlice"
    /// TF op: XlaEinsum
    public static let xlaEinsum = "XlaEinsum"
    /// TF op: XlaGather
    public static let xlaGather = "XlaGather"
    /// TF op: XlaHostCompute
    public static let xlaHostCompute = "XlaHostCompute"
    /// TF op: XlaIf
    public static let xlaIf = "XlaIf"
    /// TF op: XlaKeyValueSort
    public static let xlaKeyValueSort = "XlaKeyValueSort"
    /// TF op: XlaLaunch
    public static let xlaLaunch = "XlaLaunch"
    /// TF op: XlaLaunchV2
    public static let xlaLaunchV2 = "XlaLaunchV2"
    /// TF op: XlaOptimizationBarrier
    public static let xlaOptimizationBarrier = "XlaOptimizationBarrier"
    /// TF op: XlaPad
    public static let xlaPad = "XlaPad"
    /// TF op: XlaRecv
    public static let xlaRecv = "XlaRecv"
    /// TF op: XlaRecvFromHost
    public static let xlaRecvFromHost = "XlaRecvFromHost"
    /// TF op: XlaRecvTPUEmbeddingActivations
    public static let xlaRecvTPUEmbeddingActivations = "XlaRecvTPUEmbeddingActivations"
    /// TF op: XlaRecvTPUEmbeddingActivationsV2
    public static let xlaRecvTPUEmbeddingActivationsV2 = "XlaRecvTPUEmbeddingActivationsV2"
    /// TF op: XlaRecvTPUEmbeddingDeduplicationData
    public static let xlaRecvTPUEmbeddingDeduplicationData = "XlaRecvTPUEmbeddingDeduplicationData"
    /// TF op: XlaRecvTPUEmbeddingDeduplicationDataV2
    public static let xlaRecvTPUEmbeddingDeduplicationDataV2 = "XlaRecvTPUEmbeddingDeduplicationDataV2"
    /// TF op: XlaReduce
    public static let xlaReduce = "XlaReduce"
    /// TF op: XlaReducePrecision
    public static let xlaReducePrecision = "XlaReducePrecision"
    /// TF op: XlaReduceScatter
    public static let xlaReduceScatter = "XlaReduceScatter"
    /// TF op: XlaReduceWindow
    public static let xlaReduceWindow = "XlaReduceWindow"
    /// TF op: XlaRemoveDynamicDimensionSize
    public static let xlaRemoveDynamicDimensionSize = "XlaRemoveDynamicDimensionSize"
    /// TF op: XlaReplicaId
    public static let xlaReplicaId = "XlaReplicaId"
    /// TF op: XlaRngBitGenerator
    public static let xlaRngBitGenerator = "XlaRngBitGenerator"
    /// TF op: XlaScatter
    public static let xlaScatter = "XlaScatter"
    /// TF op: XlaSelectAndScatter
    public static let xlaSelectAndScatter = "XlaSelectAndScatter"
    /// TF op: XlaSelfAdjointEig
    public static let xlaSelfAdjointEig = "XlaSelfAdjointEig"
    /// TF op: XlaSend
    public static let xlaSend = "XlaSend"
    /// TF op: XlaSendTPUEmbeddingGradients
    public static let xlaSendTPUEmbeddingGradients = "XlaSendTPUEmbeddingGradients"
    /// TF op: XlaSendTPUEmbeddingGradientsV2
    public static let xlaSendTPUEmbeddingGradientsV2 = "XlaSendTPUEmbeddingGradientsV2"
    /// TF op: XlaSendToHost
    public static let xlaSendToHost = "XlaSendToHost"
    /// TF op: XlaSetBound
    public static let xlaSetBound = "XlaSetBound"
    /// TF op: XlaSetDynamicDimensionSize
    public static let xlaSetDynamicDimensionSize = "XlaSetDynamicDimensionSize"
    /// TF op: XlaSharding
    public static let xlaSharding = "XlaSharding"
    /// TF op: XlaSort
    public static let xlaSort = "XlaSort"
    /// TF op: XlaSparseCoreAdagrad
    public static let xlaSparseCoreAdagrad = "XlaSparseCoreAdagrad"
    /// TF op: XlaSparseCoreAdagradMomentum
    public static let xlaSparseCoreAdagradMomentum = "XlaSparseCoreAdagradMomentum"
    /// TF op: XlaSparseCoreAdam
    public static let xlaSparseCoreAdam = "XlaSparseCoreAdam"
    /// TF op: XlaSparseCoreFtrl
    public static let xlaSparseCoreFtrl = "XlaSparseCoreFtrl"
    /// TF op: XlaSparseCoreSgd
    public static let xlaSparseCoreSgd = "XlaSparseCoreSgd"
    /// TF op: XlaSparseDenseMatmul
    public static let xlaSparseDenseMatmul = "XlaSparseDenseMatmul"
    /// TF op: XlaSparseDenseMatmulGradWithAdagradAndCsrInput
    public static let xlaSparseDenseMatmulGradWithAdagradAndCsrInput = "XlaSparseDenseMatmulGradWithAdagradAndCsrInput"
    /// TF op: XlaSparseDenseMatmulGradWithAdagradAndStaticBufferSize
    public static let xlaSparseDenseMatmulGradWithAdagradAndStaticBufferSize = "XlaSparseDenseMatmulGradWithAdagradAndStaticBufferSize"
    /// TF op: XlaSparseDenseMatmulGradWithAdagradMomentumAndCsrInput
    public static let xlaSparseDenseMatmulGradWithAdagradMomentumAndCsrInput = "XlaSparseDenseMatmulGradWithAdagradMomentumAndCsrInput"
    /// TF op: XlaSparseDenseMatmulGradWithAdagradMomentumAndStaticBufferSize
    public static let xlaSparseDenseMatmulGradWithAdagradMomentumAndStaticBufferSize = "XlaSparseDenseMatmulGradWithAdagradMomentumAndStaticBufferSize"
    /// TF op: XlaSparseDenseMatmulGradWithAdamAndCsrInput
    public static let xlaSparseDenseMatmulGradWithAdamAndCsrInput = "XlaSparseDenseMatmulGradWithAdamAndCsrInput"
    /// TF op: XlaSparseDenseMatmulGradWithAdamAndStaticBufferSize
    public static let xlaSparseDenseMatmulGradWithAdamAndStaticBufferSize = "XlaSparseDenseMatmulGradWithAdamAndStaticBufferSize"
    /// TF op: XlaSparseDenseMatmulGradWithCsrInput
    public static let xlaSparseDenseMatmulGradWithCsrInput = "XlaSparseDenseMatmulGradWithCsrInput"
    /// TF op: XlaSparseDenseMatmulGradWithFtrlAndCsrInput
    public static let xlaSparseDenseMatmulGradWithFtrlAndCsrInput = "XlaSparseDenseMatmulGradWithFtrlAndCsrInput"
    /// TF op: XlaSparseDenseMatmulGradWithFtrlAndStaticBufferSize
    public static let xlaSparseDenseMatmulGradWithFtrlAndStaticBufferSize = "XlaSparseDenseMatmulGradWithFtrlAndStaticBufferSize"
    /// TF op: XlaSparseDenseMatmulGradWithSgdAndCsrInput
    public static let xlaSparseDenseMatmulGradWithSgdAndCsrInput = "XlaSparseDenseMatmulGradWithSgdAndCsrInput"
    /// TF op: XlaSparseDenseMatmulGradWithSgdAndStaticBufferSize
    public static let xlaSparseDenseMatmulGradWithSgdAndStaticBufferSize = "XlaSparseDenseMatmulGradWithSgdAndStaticBufferSize"
    /// TF op: XlaSparseDenseMatmulWithCsrInput
    public static let xlaSparseDenseMatmulWithCsrInput = "XlaSparseDenseMatmulWithCsrInput"
    /// TF op: XlaSparseDenseMatmulWithStaticBufferSize
    public static let xlaSparseDenseMatmulWithStaticBufferSize = "XlaSparseDenseMatmulWithStaticBufferSize"
    /// TF op: XlaSplitND
    public static let xlaSplitND = "XlaSplitND"
    /// TF op: XlaSpmdFullToShardShape
    public static let xlaSpmdFullToShardShape = "XlaSpmdFullToShardShape"
    /// TF op: XlaSpmdShardToFullShape
    public static let xlaSpmdShardToFullShape = "XlaSpmdShardToFullShape"
    /// TF op: XlaSvd
    public static let xlaSvd = "XlaSvd"
    /// TF op: XlaVariadicReduce
    public static let xlaVariadicReduce = "XlaVariadicReduce"
    /// TF op: XlaVariadicReduceV2
    public static let xlaVariadicReduceV2 = "XlaVariadicReduceV2"
    /// TF op: XlaVariadicSort
    public static let xlaVariadicSort = "XlaVariadicSort"
    /// TF op: XlaWhile
    public static let xlaWhile = "XlaWhile"
    /// TF op: Xlog1py
    public static let xlog1py = "Xlog1py"
    /// TF op: ZerosLike
    public static let zerosLike = "ZerosLike"
    /// TF op: ZipDataset
    public static let zipDataset = "ZipDataset"
    public static let canonicalToGraph: [String:String] = [
      "_Arg": "_Arg",
      "_ArrayToList": "_ArrayToList",
      "_ConfigureDistributedTPU": "_ConfigureDistributedTPU",
      "_DeviceArg": "_DeviceArg",
      "_DeviceRetval": "_DeviceRetval",
      "_DisconnectHostFromDistributedTPUSystem": "_DisconnectHostFromDistributedTPUSystem",
      "_EagerConst": "_EagerConst",
      "_FusedBatchNormEx": "_FusedBatchNormEx",
      "_FusedBatchNormGradEx": "_FusedBatchNormGradEx",
      "_FusedConv2D": "_FusedConv2D",
      "_FusedDepthwiseConv2dNative": "_FusedDepthwiseConv2dNative",
      "_FusedMatMul": "_FusedMatMul",
      "_HostCast": "_HostCast",
      "_HostRecv": "_HostRecv",
      "_HostSend": "_HostSend",
      "_If": "_If",
      "_InitializeHostForDistributedTPU": "_InitializeHostForDistributedTPU",
      "_ListToArray": "_ListToArray",
      "_NcclBroadcastRecv": "_NcclBroadcastRecv",
      "_NcclBroadcastSend": "_NcclBroadcastSend",
      "_NcclReduceRecv": "_NcclReduceRecv",
      "_NcclReduceSend": "_NcclReduceSend",
      "_ParallelConcatStart": "_ParallelConcatStart",
      "_ParallelConcatUpdate": "_ParallelConcatUpdate",
      "_ReadVariablesOp": "_ReadVariablesOp",
      "_Recv": "_Recv",
      "_Retval": "_Retval",
      "_ScopedAllocator": "_ScopedAllocator",
      "_ScopedAllocatorConcat": "_ScopedAllocatorConcat",
      "_ScopedAllocatorSplit": "_ScopedAllocatorSplit",
      "_Send": "_Send",
      "_SetGlobalTPUArray": "_SetGlobalTPUArray",
      "_ShutdownDistributedTPU": "_ShutdownDistributedTPU",
      "_SwitchN": "_SwitchN",
      "_TPUCompileMlir": "_TPUCompileMlir",
      "_TPUReplicate": "_TPUReplicate",
      "_TensorToHashBucketFast": "_TensorToHashBucketFast",
      "_UnaryOpsComposition": "_UnaryOpsComposition",
      "_VarHandlesOp": "_VarHandlesOp",
      "_WaitForDistributedTPU": "_WaitForDistributedTPU",
      "_While": "_While",
      "_XlaCompile": "_XlaCompile",
      "_XlaCompileMlirPlaceholderProgramKey": "_XlaCompileMlirPlaceholderProgramKey",
      "_XlaHostComputeMlir": "_XlaHostComputeMlir",
      "_XlaMerge": "_XlaMerge",
      "_XlaRecvAtHost": "_XlaRecvAtHost",
      "_XlaRecvAtHostV2": "_XlaRecvAtHostV2",
      "_XlaRun": "_XlaRun",
      "_XlaSendFromHost": "_XlaSendFromHost",
      "_XlaSendFromHostV2": "_XlaSendFromHostV2",
      "abort": "Abort",
      "abs": "Abs",
      "accumulateNV2": "AccumulateNV2",
      "accumulatorApplyGradient": "AccumulatorApplyGradient",
      "accumulatorNumAccumulated": "AccumulatorNumAccumulated",
      "accumulatorSetGlobalStep": "AccumulatorSetGlobalStep",
      "accumulatorTakeGradient": "AccumulatorTakeGradient",
      "acos": "Acos",
      "add": "Add",
      "addManySparseToTensorsMap": "AddManySparseToTensorsMap",
      "addN": "AddN",
      "addSparseToTensorsMap": "AddSparseToTensorsMap",
      "addV2": "AddV2",
      "adjustContrast": "AdjustContrast",
      "adjustContrastv2": "AdjustContrastv2",
      "adjustHue": "AdjustHue",
      "adjustSaturation": "AdjustSaturation",
      "all": "All",
      "allCandidateSampler": "AllCandidateSampler",
      "allToAll": "AllToAll",
      "all_reduce": "CollectiveReduce",
      "angle": "Angle",
      "anonymousHashTable": "AnonymousHashTable",
      "anonymousIterator": "AnonymousIterator",
      "anonymousIteratorV2": "AnonymousIteratorV2",
      "anonymousIteratorV3": "AnonymousIteratorV3",
      "anonymousMemoryCache": "AnonymousMemoryCache",
      "anonymousMultiDeviceIterator": "AnonymousMultiDeviceIterator",
      "anonymousMultiDeviceIteratorV3": "AnonymousMultiDeviceIteratorV3",
      "anonymousMutableDenseHashTable": "AnonymousMutableDenseHashTable",
      "anonymousMutableHashTable": "AnonymousMutableHashTable",
      "anonymousMutableHashTableOfTensors": "AnonymousMutableHashTableOfTensors",
      "anonymousRandomSeedGenerator": "AnonymousRandomSeedGenerator",
      "anonymousSeedGenerator": "AnonymousSeedGenerator",
      "any": "Any",
      "applyAdaMax": "ApplyAdaMax",
      "applyAdadelta": "ApplyAdadelta",
      "applyAdagrad": "ApplyAdagrad",
      "applyAdagradDA": "ApplyAdagradDA",
      "applyAdagradV2": "ApplyAdagradV2",
      "applyAdam": "ApplyAdam",
      "applyAddSign": "ApplyAddSign",
      "applyCenteredRMSProp": "ApplyCenteredRMSProp",
      "applyFtrl": "ApplyFtrl",
      "applyFtrlV2": "ApplyFtrlV2",
      "applyGradientDescent": "ApplyGradientDescent",
      "applyMomentum": "ApplyMomentum",
      "applyPowerSign": "ApplyPowerSign",
      "applyProximalAdagrad": "ApplyProximalAdagrad",
      "applyProximalGradientDescent": "ApplyProximalGradientDescent",
      "applyRMSProp": "ApplyRMSProp",
      "approxTopK": "ApproxTopK",
      "approximateEqual": "ApproximateEqual",
      "argMax": "ArgMax",
      "argMin": "ArgMin",
      "as_string": "AsString",
      "assert": "Assert",
      "assertCardinalityDataset": "AssertCardinalityDataset",
      "assertNextDataset": "AssertNextDataset",
      "assertPrevDataset": "AssertPrevDataset",
      "assign": "Assign",
      "assignAdd": "AssignAdd",
      "assignAddVariableOp": "AssignAddVariableOp",
      "assignSub": "AssignSub",
      "assignSubVariableOp": "AssignSubVariableOp",
      "assignVariableOp": "AssignVariableOp",
      "assignVariableXlaConcatND": "AssignVariableXlaConcatND",
      "audioSpectrogram": "AudioSpectrogram",
      "audioSummary": "AudioSummary",
      "audioSummaryV2": "AudioSummaryV2",
      "autoShardDataset": "AutoShardDataset",
      "avgPool": "AvgPool",
      "avgPool3D": "AvgPool3D",
      "avgPool3DGrad": "AvgPool3DGrad",
      "avgPoolGrad": "AvgPoolGrad",
      "bandedTriangularSolve": "BandedTriangularSolve",
      "barrier": "Barrier",
      "barrierClose": "BarrierClose",
      "barrierIncompleteSize": "BarrierIncompleteSize",
      "barrierInsertMany": "BarrierInsertMany",
      "barrierReadySize": "BarrierReadySize",
      "barrierTakeMany": "BarrierTakeMany",
      "batch": "Batch",
      "batchCholesky": "BatchCholesky",
      "batchCholeskyGrad": "BatchCholeskyGrad",
      "batchDataset": "BatchDataset",
      "batchDatasetV2": "BatchDatasetV2",
      "batchFFT": "BatchFFT",
      "batchFFT2D": "BatchFFT2D",
      "batchFFT3D": "BatchFFT3D",
      "batchFunction": "BatchFunction",
      "batchIFFT": "BatchIFFT",
      "batchIFFT2D": "BatchIFFT2D",
      "batchIFFT3D": "BatchIFFT3D",
      "batchMatMul": "BatchMatMul",
      "batchMatMulV2": "BatchMatMulV2",
      "batchMatMulV3": "BatchMatMulV3",
      "batchMatrixBandPart": "BatchMatrixBandPart",
      "batchMatrixDeterminant": "BatchMatrixDeterminant",
      "batchMatrixDiag": "BatchMatrixDiag",
      "batchMatrixDiagPart": "BatchMatrixDiagPart",
      "batchMatrixInverse": "BatchMatrixInverse",
      "batchMatrixSetDiag": "BatchMatrixSetDiag",
      "batchMatrixSolve": "BatchMatrixSolve",
      "batchMatrixSolveLs": "BatchMatrixSolveLs",
      "batchMatrixTriangularSolve": "BatchMatrixTriangularSolve",
      "batchNormWithGlobalNormalization": "BatchNormWithGlobalNormalization",
      "batchNormWithGlobalNormalizationGrad": "BatchNormWithGlobalNormalizationGrad",
      "batchSelfAdjointEig": "BatchSelfAdjointEig",
      "batchSelfAdjointEigV2": "BatchSelfAdjointEigV2",
      "batchSvd": "BatchSvd",
      "batchToSpace": "BatchToSpace",
      "batch_to_space_nd": "BatchToSpaceND",
      "besselI0": "BesselI0",
      "besselI0e": "BesselI0e",
      "besselI1": "BesselI1",
      "besselI1e": "BesselI1e",
      "besselJ0": "BesselJ0",
      "besselJ1": "BesselJ1",
      "besselK0": "BesselK0",
      "besselK0e": "BesselK0e",
      "besselK1": "BesselK1",
      "besselK1e": "BesselK1e",
      "besselY0": "BesselY0",
      "besselY1": "BesselY1",
      "biasAdd": "BiasAdd",
      "biasAddGrad": "BiasAddGrad",
      "biasAddV1": "BiasAddV1",
      "bincount": "Bincount",
      "bitcast": "Bitcast",
      "bitwise_and": "BitwiseAnd",
      "bitwise_or": "BitwiseOr",
      "bitwise_xor": "BitwiseXor",
      "blockLSTM": "BlockLSTM",
      "blockLSTMGrad": "BlockLSTMGrad",
      "blockLSTMGradV2": "BlockLSTMGradV2",
      "blockLSTMV2": "BlockLSTMV2",
      "boostedTreesAggregateStats": "BoostedTreesAggregateStats",
      "boostedTreesBucketize": "BoostedTreesBucketize",
      "boostedTreesCalculateBestFeatureSplit": "BoostedTreesCalculateBestFeatureSplit",
      "boostedTreesCalculateBestFeatureSplitV2": "BoostedTreesCalculateBestFeatureSplitV2",
      "boostedTreesCalculateBestGainsPerFeature": "BoostedTreesCalculateBestGainsPerFeature",
      "boostedTreesCenterBias": "BoostedTreesCenterBias",
      "boostedTreesCreateEnsemble": "BoostedTreesCreateEnsemble",
      "boostedTreesCreateQuantileStreamResource": "BoostedTreesCreateQuantileStreamResource",
      "boostedTreesDeserializeEnsemble": "BoostedTreesDeserializeEnsemble",
      "boostedTreesEnsembleResourceHandleOp": "BoostedTreesEnsembleResourceHandleOp",
      "boostedTreesExampleDebugOutputs": "BoostedTreesExampleDebugOutputs",
      "boostedTreesFlushQuantileSummaries": "BoostedTreesFlushQuantileSummaries",
      "boostedTreesGetEnsembleStates": "BoostedTreesGetEnsembleStates",
      "boostedTreesMakeQuantileSummaries": "BoostedTreesMakeQuantileSummaries",
      "boostedTreesMakeStatsSummary": "BoostedTreesMakeStatsSummary",
      "boostedTreesPredict": "BoostedTreesPredict",
      "boostedTreesQuantileStreamResourceAddSummaries": "BoostedTreesQuantileStreamResourceAddSummaries",
      "boostedTreesQuantileStreamResourceDeserialize": "BoostedTreesQuantileStreamResourceDeserialize",
      "boostedTreesQuantileStreamResourceFlush": "BoostedTreesQuantileStreamResourceFlush",
      "boostedTreesQuantileStreamResourceGetBucketBoundaries": "BoostedTreesQuantileStreamResourceGetBucketBoundaries",
      "boostedTreesQuantileStreamResourceHandleOp": "BoostedTreesQuantileStreamResourceHandleOp",
      "boostedTreesSerializeEnsemble": "BoostedTreesSerializeEnsemble",
      "boostedTreesSparseAggregateStats": "BoostedTreesSparseAggregateStats",
      "boostedTreesSparseCalculateBestFeatureSplit": "BoostedTreesSparseCalculateBestFeatureSplit",
      "boostedTreesTrainingPredict": "BoostedTreesTrainingPredict",
      "boostedTreesUpdateEnsemble": "BoostedTreesUpdateEnsemble",
      "boostedTreesUpdateEnsembleV2": "BoostedTreesUpdateEnsembleV2",
      "broadcastArgs": "BroadcastArgs",
      "broadcastGradientArgs": "BroadcastGradientArgs",
      "broadcastTo": "BroadcastTo",
      "broadcast_recv": "CollectiveBcastRecv",
      "broadcast_send": "CollectiveBcastSend",
      "bucketize": "Bucketize",
      "bytesProducedStatsDataset": "BytesProducedStatsDataset",
      "cSRSparseMatrixComponents": "CSRSparseMatrixComponents",
      "cSRSparseMatrixToDense": "CSRSparseMatrixToDense",
      "cSRSparseMatrixToSparseTensor": "CSRSparseMatrixToSparseTensor",
      "cSVDataset": "CSVDataset",
      "cSVDatasetV2": "CSVDatasetV2",
      "cTCBeamSearchDecoder": "CTCBeamSearchDecoder",
      "cTCGreedyDecoder": "CTCGreedyDecoder",
      "cTCLoss": "CTCLoss",
      "cTCLossV2": "CTCLossV2",
      "cacheDataset": "CacheDataset",
      "cacheDatasetV2": "CacheDatasetV2",
      "case": "Case",
      "cast": "Cast",
      "ceil": "Ceil",
      "checkNumericsV2": "CheckNumericsV2",
      "checkPinned": "CheckPinned",
      "check_numerics": "CheckNumerics",
      "choleskyGrad": "CholeskyGrad",
      "chooseFastestBranchDataset": "ChooseFastestBranchDataset",
      "chooseFastestDataset": "ChooseFastestDataset",
      "clipByValue": "ClipByValue",
      "closeSummaryWriter": "CloseSummaryWriter",
      "collateTPUEmbeddingMemory": "CollateTPUEmbeddingMemory",
      "collectiveAllToAllV2": "CollectiveAllToAllV2",
      "collectiveAllToAllV3": "CollectiveAllToAllV3",
      "collectiveAssignGroupV2": "CollectiveAssignGroupV2",
      "collectiveBcastRecvV2": "CollectiveBcastRecvV2",
      "collectiveBcastSendV2": "CollectiveBcastSendV2",
      "collectiveGather": "CollectiveGather",
      "collectiveGatherV2": "CollectiveGatherV2",
      "collectiveInitializeCommunicator": "CollectiveInitializeCommunicator",
      "collectivePermute": "CollectivePermute",
      "collectiveReduceScatterV2": "CollectiveReduceScatterV2",
      "collectiveReduceV2": "CollectiveReduceV2",
      "collectiveReduceV3": "CollectiveReduceV3",
      "combinedNonMaxSuppression": "CombinedNonMaxSuppression",
      "complex": "Complex",
      "complexAbs": "ComplexAbs",
      "compositeTensorVariantFromComponents": "CompositeTensorVariantFromComponents",
      "compositeTensorVariantToComponents": "CompositeTensorVariantToComponents",
      "compressElement": "CompressElement",
      "computeAccidentalHits": "ComputeAccidentalHits",
      "computeBatchSize": "ComputeBatchSize",
      "computeDedupDataSize": "ComputeDedupDataSize",
      "computeDedupDataSizeV2": "ComputeDedupDataSizeV2",
      "computeDedupDataTupleMask": "ComputeDedupDataTupleMask",
      "computeDedupDataTupleMaskV2": "ComputeDedupDataTupleMaskV2",
      "concat": "Concat",
      "concatOffset": "ConcatOffset",
      "concatV2": "ConcatV2",
      "concatenateDataset": "ConcatenateDataset",
      "conditionalAccumulator": "ConditionalAccumulator",
      "configureAndInitializeGlobalTPU": "ConfigureAndInitializeGlobalTPU",
      "configureDistributedTPU": "ConfigureDistributedTPU",
      "configureTPUEmbedding": "ConfigureTPUEmbedding",
      "configureTPUEmbeddingHost": "ConfigureTPUEmbeddingHost",
      "configureTPUEmbeddingMemory": "ConfigureTPUEmbeddingMemory",
      "conj": "Conj",
      "conjugateTranspose": "ConjugateTranspose",
      "connectTPUEmbeddingHosts": "ConnectTPUEmbeddingHosts",
      "const": "Const",
      "consumeMutexLock": "ConsumeMutexLock",
      "controlTrigger": "ControlTrigger",
      "conv": "Conv",
      "conv2D": "Conv2D",
      "conv2DBackpropFilter": "Conv2DBackpropFilter",
      "conv2DBackpropFilterV2": "Conv2DBackpropFilterV2",
      "conv2DBackpropInput": "Conv2DBackpropInput",
      "conv2DBackpropInputV2": "Conv2DBackpropInputV2",
      "conv3D": "Conv3D",
      "conv3DBackpropFilter": "Conv3DBackpropFilter",
      "conv3DBackpropInput": "Conv3DBackpropInput",
      "conv3DBackpropInputV2": "Conv3DBackpropInputV2",
      "convertToCooTensor": "ConvertToCooTensor",
      "convertToListOfSparseCoreCooTensors": "ConvertToListOfSparseCoreCooTensors",
      "convertToSparseCoreCsrWrappedCooTensor": "ConvertToSparseCoreCsrWrappedCooTensor",
      "copy": "Copy",
      "copyHost": "CopyHost",
      "copyToMesh": "CopyToMesh",
      "copyToMeshGrad": "CopyToMeshGrad",
      "countUpTo": "CountUpTo",
      "createSummaryDbWriter": "CreateSummaryDbWriter",
      "createSummaryFileWriter": "CreateSummaryFileWriter",
      "cropAndResize": "CropAndResize",
      "cropAndResizeGradBoxes": "CropAndResizeGradBoxes",
      "cropAndResizeGradImage": "CropAndResizeGradImage",
      "crossReplicaSum": "CrossReplicaSum",
      "cudnnRNN": "CudnnRNN",
      "cudnnRNNBackprop": "CudnnRNNBackprop",
      "cudnnRNNBackpropV2": "CudnnRNNBackpropV2",
      "cudnnRNNBackpropV3": "CudnnRNNBackpropV3",
      "cudnnRNNCanonicalToParams": "CudnnRNNCanonicalToParams",
      "cudnnRNNCanonicalToParamsV2": "CudnnRNNCanonicalToParamsV2",
      "cudnnRNNParamsSize": "CudnnRNNParamsSize",
      "cudnnRNNParamsToCanonical": "CudnnRNNParamsToCanonical",
      "cudnnRNNParamsToCanonicalV2": "CudnnRNNParamsToCanonicalV2",
      "cudnnRNNV2": "CudnnRNNV2",
      "cudnnRNNV3": "CudnnRNNV3",
      "cumprod": "Cumprod",
      "cumsum": "Cumsum",
      "cumulativeLogsumexp": "CumulativeLogsumexp",
      "dTensorRestoreV2": "DTensorRestoreV2",
      "dTensorSetGlobalTPUArray": "DTensorSetGlobalTPUArray",
      "dataFormatDimMap": "DataFormatDimMap",
      "dataFormatVecPermute": "DataFormatVecPermute",
      "dataServiceDataset": "DataServiceDataset",
      "dataServiceDatasetV2": "DataServiceDatasetV2",
      "dataServiceDatasetV3": "DataServiceDatasetV3",
      "dataServiceDatasetV4": "DataServiceDatasetV4",
      "datasetCardinality": "DatasetCardinality",
      "datasetFingerprint": "DatasetFingerprint",
      "datasetFromGraph": "DatasetFromGraph",
      "datasetToGraph": "DatasetToGraph",
      "datasetToGraphV2": "DatasetToGraphV2",
      "datasetToSingleElement": "DatasetToSingleElement",
      "datasetToTFRecord": "DatasetToTFRecord",
      "dawsn": "Dawsn",
      "debugGradientIdentity": "DebugGradientIdentity",
      "debugGradientRefIdentity": "DebugGradientRefIdentity",
      "debugIdentity": "DebugIdentity",
      "debugIdentityV2": "DebugIdentityV2",
      "debugIdentityV3": "DebugIdentityV3",
      "debugNanCount": "DebugNanCount",
      "debugNumericSummary": "DebugNumericSummary",
      "debugNumericSummaryV2": "DebugNumericSummaryV2",
      "decodeAndCropJpeg": "DecodeAndCropJpeg",
      "decodeBmp": "DecodeBmp",
      "decodeCSV": "DecodeCSV",
      "decodeGif": "DecodeGif",
      "decodeImage": "DecodeImage",
      "decodeJSONExample": "DecodeJSONExample",
      "decodeJpeg": "DecodeJpeg",
      "decodePaddedRaw": "DecodePaddedRaw",
      "decodePng": "DecodePng",
      "decodeRaw": "DecodeRaw",
      "decode_wav": "DecodeWav",
      "deepCopy": "DeepCopy",
      "deleteIterator": "DeleteIterator",
      "deleteMemoryCache": "DeleteMemoryCache",
      "deleteMultiDeviceIterator": "DeleteMultiDeviceIterator",
      "deleteRandomSeedGenerator": "DeleteRandomSeedGenerator",
      "deleteRpcFutureResource": "DeleteRpcFutureResource",
      "deleteSeedGenerator": "DeleteSeedGenerator",
      "deleteSessionTensor": "DeleteSessionTensor",
      "denseBincount": "DenseBincount",
      "denseCountSparseOutput": "DenseCountSparseOutput",
      "denseToCSRSparseMatrix": "DenseToCSRSparseMatrix",
      "denseToDenseSetOperation": "DenseToDenseSetOperation",
      "denseToSparseBatchDataset": "DenseToSparseBatchDataset",
      "denseToSparseSetOperation": "DenseToSparseSetOperation",
      "depthToSpace": "DepthToSpace",
      "depthwiseConv2dNative": "DepthwiseConv2dNative",
      "depthwiseConv2dNativeBackpropFilter": "DepthwiseConv2dNativeBackpropFilter",
      "depthwiseConv2dNativeBackpropInput": "DepthwiseConv2dNativeBackpropInput",
      "dequantize": "Dequantize",
      "deserializeIterator": "DeserializeIterator",
      "deserializeManySparse": "DeserializeManySparse",
      "deserializeSparse": "DeserializeSparse",
      "destroyResourceOp": "DestroyResourceOp",
      "destroyTemporaryVariable": "DestroyTemporaryVariable",
      "deviceIndex": "DeviceIndex",
      "diagPart": "DiagPart",
      "dilation2D": "Dilation2D",
      "dilation2DBackpropFilter": "Dilation2DBackpropFilter",
      "dilation2DBackpropInput": "Dilation2DBackpropInput",
      "directedInterleaveDataset": "DirectedInterleaveDataset",
      "disableCopyOnRead": "DisableCopyOnRead",
      "distributedSave": "DistributedSave",
      "div": "Div",
      "divNoNan": "DivNoNan",
      "drawBoundingBoxes": "DrawBoundingBoxes",
      "drawBoundingBoxesV2": "DrawBoundingBoxesV2",
      "dummyIterationCounter": "DummyIterationCounter",
      "dummyMemoryCache": "DummyMemoryCache",
      "dummySeedGenerator": "DummySeedGenerator",
      "dynamicEnqueueTPUEmbeddingArbitraryTensorBatch": "DynamicEnqueueTPUEmbeddingArbitraryTensorBatch",
      "dynamicEnqueueTPUEmbeddingRaggedTensorBatch": "DynamicEnqueueTPUEmbeddingRaggedTensorBatch",
      "dynamicPartition": "DynamicPartition",
      "dynamicStitch": "DynamicStitch",
      "eagerPyFunc": "EagerPyFunc",
      "editDistance": "EditDistance",
      "eig": "Eig",
      "einsum": "Einsum",
      "eluGrad": "EluGrad",
      "empty": "Empty",
      "emptyTensorList": "EmptyTensorList",
      "emptyTensorMap": "EmptyTensorMap",
      "encodeJpeg": "EncodeJpeg",
      "encodeJpegVariableQuality": "EncodeJpegVariableQuality",
      "encode_wav": "EncodeWav",
      "enqueueTPUEmbeddingArbitraryTensorBatch": "EnqueueTPUEmbeddingArbitraryTensorBatch",
      "enqueueTPUEmbeddingBatch": "EnqueueTPUEmbeddingBatch",
      "enqueueTPUEmbeddingIntegerBatch": "EnqueueTPUEmbeddingIntegerBatch",
      "enqueueTPUEmbeddingRaggedTensorBatch": "EnqueueTPUEmbeddingRaggedTensorBatch",
      "enqueueTPUEmbeddingSparseBatch": "EnqueueTPUEmbeddingSparseBatch",
      "enqueueTPUEmbeddingSparseTensorBatch": "EnqueueTPUEmbeddingSparseTensorBatch",
      "ensureShape": "EnsureShape",
      "enter": "Enter",
      "equal": "Equal",
      "erfinv": "Erfinv",
      "euclideanNorm": "EuclideanNorm",
      "executeTPUEmbeddingPartitioner": "ExecuteTPUEmbeddingPartitioner",
      "exit": "Exit",
      "exp": "Exp",
      "expandDims": "ExpandDims",
      "experimentalAssertNextDataset": "ExperimentalAssertNextDataset",
      "experimentalAutoShardDataset": "ExperimentalAutoShardDataset",
      "experimentalBytesProducedStatsDataset": "ExperimentalBytesProducedStatsDataset",
      "experimentalCSVDataset": "ExperimentalCSVDataset",
      "experimentalChooseFastestDataset": "ExperimentalChooseFastestDataset",
      "experimentalDatasetCardinality": "ExperimentalDatasetCardinality",
      "experimentalDatasetToTFRecord": "ExperimentalDatasetToTFRecord",
      "experimentalDenseToSparseBatchDataset": "ExperimentalDenseToSparseBatchDataset",
      "experimentalDirectedInterleaveDataset": "ExperimentalDirectedInterleaveDataset",
      "experimentalGroupByReducerDataset": "ExperimentalGroupByReducerDataset",
      "experimentalGroupByWindowDataset": "ExperimentalGroupByWindowDataset",
      "experimentalIgnoreErrorsDataset": "ExperimentalIgnoreErrorsDataset",
      "experimentalIteratorGetDevice": "ExperimentalIteratorGetDevice",
      "experimentalLMDBDataset": "ExperimentalLMDBDataset",
      "experimentalLatencyStatsDataset": "ExperimentalLatencyStatsDataset",
      "experimentalMapAndBatchDataset": "ExperimentalMapAndBatchDataset",
      "experimentalMapDataset": "ExperimentalMapDataset",
      "experimentalMatchingFilesDataset": "ExperimentalMatchingFilesDataset",
      "experimentalMaxIntraOpParallelismDataset": "ExperimentalMaxIntraOpParallelismDataset",
      "experimentalNonSerializableDataset": "ExperimentalNonSerializableDataset",
      "experimentalParallelInterleaveDataset": "ExperimentalParallelInterleaveDataset",
      "experimentalParseExampleDataset": "ExperimentalParseExampleDataset",
      "experimentalPrivateThreadPoolDataset": "ExperimentalPrivateThreadPoolDataset",
      "experimentalRandomDataset": "ExperimentalRandomDataset",
      "experimentalRebatchDataset": "ExperimentalRebatchDataset",
      "experimentalScanDataset": "ExperimentalScanDataset",
      "experimentalSetStatsAggregatorDataset": "ExperimentalSetStatsAggregatorDataset",
      "experimentalSleepDataset": "ExperimentalSleepDataset",
      "experimentalSlidingWindowDataset": "ExperimentalSlidingWindowDataset",
      "experimentalSqlDataset": "ExperimentalSqlDataset",
      "experimentalStatsAggregatorHandle": "ExperimentalStatsAggregatorHandle",
      "experimentalStatsAggregatorSummary": "ExperimentalStatsAggregatorSummary",
      "experimentalTakeWhileDataset": "ExperimentalTakeWhileDataset",
      "experimentalThreadPoolDataset": "ExperimentalThreadPoolDataset",
      "experimentalThreadPoolHandle": "ExperimentalThreadPoolHandle",
      "experimentalUnbatchDataset": "ExperimentalUnbatchDataset",
      "experimentalUniqueDataset": "ExperimentalUniqueDataset",
      "expint": "Expint",
      "extractGlimpse": "ExtractGlimpse",
      "extractGlimpseV2": "ExtractGlimpseV2",
      "extractImagePatches": "ExtractImagePatches",
      "extractJpegShape": "ExtractJpegShape",
      "extractVolumePatches": "ExtractVolumePatches",
      "fFTND": "FFTND",
      "fIFOQueue": "FIFOQueue",
      "fIFOQueueV2": "FIFOQueueV2",
      "fact": "Fact",
      "fakeParam": "FakeParam",
      "fakeQueue": "FakeQueue",
      "fake_quant_with_min_max_args": "FakeQuantWithMinMaxArgs",
      "fake_quant_with_min_max_args_gradient": "FakeQuantWithMinMaxArgsGradient",
      "fake_quant_with_min_max_vars": "FakeQuantWithMinMaxVars",
      "fake_quant_with_min_max_vars_gradient": "FakeQuantWithMinMaxVarsGradient",
      "fake_quant_with_min_max_vars_per_channel": "FakeQuantWithMinMaxVarsPerChannel",
      "fake_quant_with_min_max_vars_per_channel_gradient": "FakeQuantWithMinMaxVarsPerChannelGradient",
      "fft": "FFT",
      "fft2d": "FFT2D",
      "fft3d": "FFT3D",
      "fileSystemSetConfiguration": "FileSystemSetConfiguration",
      "fill": "Fill",
      "filterByLastComponentDataset": "FilterByLastComponentDataset",
      "filterDataset": "FilterDataset",
      "finalizeDataset": "FinalizeDataset",
      "finalizeTPUEmbedding": "FinalizeTPUEmbedding",
      "finalizeTPUEmbeddingV2": "FinalizeTPUEmbeddingV2",
      "fingerprint": "Fingerprint",
      "fixedLengthRecordDataset": "FixedLengthRecordDataset",
      "fixedLengthRecordDatasetV2": "FixedLengthRecordDatasetV2",
      "fixedLengthRecordReader": "FixedLengthRecordReader",
      "fixedLengthRecordReaderV2": "FixedLengthRecordReaderV2",
      "fixedUnigramCandidateSampler": "FixedUnigramCandidateSampler",
      "flatMapDataset": "FlatMapDataset",
      "floor": "Floor",
      "floor_div": "FloorDiv",
      "flushSummaryWriter": "FlushSummaryWriter",
      "for": "For",
      "fractionalAvgPool": "FractionalAvgPool",
      "fractionalAvgPoolGrad": "FractionalAvgPoolGrad",
      "fractionalMaxPool": "FractionalMaxPool",
      "fractionalMaxPoolGrad": "FractionalMaxPoolGrad",
      "fresnelCos": "FresnelCos",
      "fresnelSin": "FresnelSin",
      "fusedBatchNorm": "FusedBatchNorm",
      "fusedBatchNormGrad": "FusedBatchNormGrad",
      "fusedBatchNormGradV2": "FusedBatchNormGradV2",
      "fusedBatchNormGradV3": "FusedBatchNormGradV3",
      "fusedBatchNormV2": "FusedBatchNormV2",
      "fusedBatchNormV3": "FusedBatchNormV3",
      "fusedPadConv2D": "FusedPadConv2D",
      "fusedResizeAndPadConv2D": "FusedResizeAndPadConv2D",
      "gRUBlockCell": "GRUBlockCell",
      "gRUBlockCellGrad": "GRUBlockCellGrad",
      "gather": "Gather",
      "gatherNd": "GatherNd",
      "gatherV2": "GatherV2",
      "generateBoundingBoxProposals": "GenerateBoundingBoxProposals",
      "generateVocabRemapping": "GenerateVocabRemapping",
      "generatorDataset": "GeneratorDataset",
      "getElementAtIndex": "GetElementAtIndex",
      "getMinibatchSplitsWithPhysicalReplica": "GetMinibatchSplitsWithPhysicalReplica",
      "getMinibatchesInCsrWithPhysicalReplica": "GetMinibatchesInCsrWithPhysicalReplica",
      "getOptions": "GetOptions",
      "getSessionHandle": "GetSessionHandle",
      "getSessionHandleV2": "GetSessionHandleV2",
      "getSessionTensor": "GetSessionTensor",
      "getStatsFromListOfSparseCoreCooTensors": "GetStatsFromListOfSparseCoreCooTensors",
      "getTpuTaskId": "GetTpuTaskId",
      "globalIterId": "GlobalIterId",
      "globalShuffleDataset": "GlobalShuffleDataset",
      "groupByReducerDataset": "GroupByReducerDataset",
      "groupByWindowDataset": "GroupByWindowDataset",
      "guaranteeConst": "GuaranteeConst",
      "hashTable": "HashTable",
      "hashTableV2": "HashTableV2",
      "histogramFixedWidth": "HistogramFixedWidth",
      "histogramSummary": "HistogramSummary",
      "hostConst": "HostConst",
      "iFFTND": "IFFTND",
      "iRFFT": "IRFFT",
      "iRFFT2D": "IRFFT2D",
      "iRFFT3D": "IRFFT3D",
      "iRFFTND": "IRFFTND",
      "identity": "Identity",
      "identityN": "IdentityN",
      "identityReader": "IdentityReader",
      "identityReaderV2": "IdentityReaderV2",
      "if": "If",
      "ifft": "IFFT",
      "ifft2d": "IFFT2D",
      "ifft3d": "IFFT3D",
      "igammaGradA": "IgammaGradA",
      "ignoreErrorsDataset": "IgnoreErrorsDataset",
      "imag": "Imag",
      "imageProjectiveTransformV2": "ImageProjectiveTransformV2",
      "imageProjectiveTransformV3": "ImageProjectiveTransformV3",
      "imageSummary": "ImageSummary",
      "immutableConst": "ImmutableConst",
      "importEvent": "ImportEvent",
      "inTopK": "InTopK",
      "inTopKV2": "InTopKV2",
      "indexFlatMapDataset": "IndexFlatMapDataset",
      "infeedDequeue": "InfeedDequeue",
      "infeedDequeueTuple": "InfeedDequeueTuple",
      "infeedEnqueue": "InfeedEnqueue",
      "infeedEnqueuePrelinearizedBuffer": "InfeedEnqueuePrelinearizedBuffer",
      "infeedEnqueueTuple": "InfeedEnqueueTuple",
      "initializeTable": "InitializeTable",
      "initializeTableFromDataset": "InitializeTableFromDataset",
      "initializeTableFromTextFile": "InitializeTableFromTextFile",
      "initializeTableFromTextFileV2": "InitializeTableFromTextFileV2",
      "initializeTableV2": "InitializeTableV2",
      "inplaceAdd": "InplaceAdd",
      "inplaceSub": "InplaceSub",
      "inplaceUpdate": "InplaceUpdate",
      "interleaveDataset": "InterleaveDataset",
      "inv": "Inv",
      "invGrad": "InvGrad",
      "invert": "Invert",
      "isBoostedTreesEnsembleInitialized": "IsBoostedTreesEnsembleInitialized",
      "isBoostedTreesQuantileStreamResourceInitialized": "IsBoostedTreesQuantileStreamResourceInitialized",
      "isTPUEmbeddingInitialized": "IsTPUEmbeddingInitialized",
      "isVariableInitialized": "IsVariableInitialized",
      "isotonicRegression": "IsotonicRegression",
      "iterator": "Iterator",
      "iteratorFromStringHandle": "IteratorFromStringHandle",
      "iteratorFromStringHandleV2": "IteratorFromStringHandleV2",
      "iteratorGetDevice": "IteratorGetDevice",
      "iteratorGetModelProto": "IteratorGetModelProto",
      "iteratorGetNext": "IteratorGetNext",
      "iteratorGetNextAsOptional": "IteratorGetNextAsOptional",
      "iteratorGetNextSync": "IteratorGetNextSync",
      "iteratorToStringHandle": "IteratorToStringHandle",
      "iteratorV2": "IteratorV2",
      "kMC2ChainInitialization": "KMC2ChainInitialization",
      "kmeansPlusPlusInitialization": "KmeansPlusPlusInitialization",
      "kthOrderStatistic": "KthOrderStatistic",
      "lMDBDataset": "LMDBDataset",
      "lMDBReader": "LMDBReader",
      "lRNGrad": "LRNGrad",
      "lSTMBlockCell": "LSTMBlockCell",
      "lSTMBlockCellGrad": "LSTMBlockCellGrad",
      "latencyStatsDataset": "LatencyStatsDataset",
      "leakyRelu": "LeakyRelu",
      "leakyReluGrad": "LeakyReluGrad",
      "learnedUnigramCandidateSampler": "LearnedUnigramCandidateSampler",
      "left_shift": "LeftShift",
      "legacyParallelInterleaveDatasetV2": "LegacyParallelInterleaveDatasetV2",
      "lin_space": "LinSpace",
      "listDataset": "ListDataset",
      "listDiff": "ListDiff",
      "listSnapshotChunksDataset": "ListSnapshotChunksDataset",
      "loadAllTPUEmbeddingParameters": "LoadAllTPUEmbeddingParameters",
      "loadAndRemapMatrix": "LoadAndRemapMatrix",
      "loadDataset": "LoadDataset",
      "loadTPUEmbeddingADAMParameters": "LoadTPUEmbeddingADAMParameters",
      "loadTPUEmbeddingAdadeltaParameters": "LoadTPUEmbeddingAdadeltaParameters",
      "loadTPUEmbeddingAdagradMomentumParameters": "LoadTPUEmbeddingAdagradMomentumParameters",
      "loadTPUEmbeddingAdagradParameters": "LoadTPUEmbeddingAdagradParameters",
      "loadTPUEmbeddingCenteredRMSPropParameters": "LoadTPUEmbeddingCenteredRMSPropParameters",
      "loadTPUEmbeddingFTRLParameters": "LoadTPUEmbeddingFTRLParameters",
      "loadTPUEmbeddingFrequencyEstimatorParameters": "LoadTPUEmbeddingFrequencyEstimatorParameters",
      "loadTPUEmbeddingMDLAdagradLightParameters": "LoadTPUEmbeddingMDLAdagradLightParameters",
      "loadTPUEmbeddingMomentumParameters": "LoadTPUEmbeddingMomentumParameters",
      "loadTPUEmbeddingProximalAdagradParameters": "LoadTPUEmbeddingProximalAdagradParameters",
      "loadTPUEmbeddingProximalYogiParameters": "LoadTPUEmbeddingProximalYogiParameters",
      "loadTPUEmbeddingRMSPropParameters": "LoadTPUEmbeddingRMSPropParameters",
      "loadTPUEmbeddingStochasticGradientDescentParameters": "LoadTPUEmbeddingStochasticGradientDescentParameters",
      "logMatrixDeterminant": "LogMatrixDeterminant",
      "logSoftmax": "LogSoftmax",
      "logUniformCandidateSampler": "LogUniformCandidateSampler",
      "lookupTableExport": "LookupTableExport",
      "lookupTableExportV2": "LookupTableExportV2",
      "lookupTableFind": "LookupTableFind",
      "lookupTableFindV2": "LookupTableFindV2",
      "lookupTableImport": "LookupTableImport",
      "lookupTableImportV2": "LookupTableImportV2",
      "lookupTableInsert": "LookupTableInsert",
      "lookupTableInsertV2": "LookupTableInsertV2",
      "lookupTableRemoveV2": "LookupTableRemoveV2",
      "lookupTableSize": "LookupTableSize",
      "lookupTableSizeV2": "LookupTableSizeV2",
      "loopCond": "LoopCond",
      "lower": "StringLower",
      "lowerBound": "LowerBound",
      "makeIterator": "MakeIterator",
      "makeUnique": "MakeUnique",
      "mapAndBatchDataset": "MapAndBatchDataset",
      "mapClear": "MapClear",
      "mapDataset": "MapDataset",
      "mapDefun": "MapDefun",
      "mapIncompleteSize": "MapIncompleteSize",
      "mapPeek": "MapPeek",
      "mapSize": "MapSize",
      "mapStage": "MapStage",
      "mapUnstage": "MapUnstage",
      "mapUnstageNoKey": "MapUnstageNoKey",
      "matMul": "MatMul",
      "matchingFilesDataset": "MatchingFilesDataset",
      "matrixDiag": "MatrixDiag",
      "matrixDiagPart": "MatrixDiagPart",
      "matrixDiagPartV2": "MatrixDiagPartV2",
      "matrixDiagV2": "MatrixDiagV2",
      "matrixExponential": "MatrixExponential",
      "matrixLogarithm": "MatrixLogarithm",
      "matrixSetDiag": "MatrixSetDiag",
      "matrixSetDiagV2": "MatrixSetDiagV2",
      "matrixSolveLs": "MatrixSolveLs",
      "matrixTriangularSolve": "MatrixTriangularSolve",
      "max": "Max",
      "maxIntraOpParallelismDataset": "MaxIntraOpParallelismDataset",
      "maxPool": "MaxPool",
      "maxPool3D": "MaxPool3D",
      "maxPool3DGrad": "MaxPool3DGrad",
      "maxPool3DGradGrad": "MaxPool3DGradGrad",
      "maxPoolGrad": "MaxPoolGrad",
      "maxPoolGradGrad": "MaxPoolGradGrad",
      "maxPoolGradGradV2": "MaxPoolGradGradV2",
      "maxPoolGradGradWithArgmax": "MaxPoolGradGradWithArgmax",
      "maxPoolGradV2": "MaxPoolGradV2",
      "maxPoolGradWithArgmax": "MaxPoolGradWithArgmax",
      "maxPoolV2": "MaxPoolV2",
      "maxPoolWithArgmax": "MaxPoolWithArgmax",
      "mean": "Mean",
      "merge": "Merge",
      "mergeDedupData": "MergeDedupData",
      "mergeSummary": "MergeSummary",
      "mergeV2Checkpoints": "MergeV2Checkpoints",
      "mfcc": "Mfcc",
      "min": "Min",
      "mirrorPad": "MirrorPad",
      "mirrorPadGrad": "MirrorPadGrad",
      "mlirPassthroughOp": "MlirPassthroughOp",
      "mod": "Mod",
      "modelDataset": "ModelDataset",
      "mul": "Mul",
      "mulNoNan": "MulNoNan",
      "multiDeviceIterator": "MultiDeviceIterator",
      "multiDeviceIteratorFromStringHandle": "MultiDeviceIteratorFromStringHandle",
      "multiDeviceIteratorGetNextFromShard": "MultiDeviceIteratorGetNextFromShard",
      "multiDeviceIteratorInit": "MultiDeviceIteratorInit",
      "multiDeviceIteratorToStringHandle": "MultiDeviceIteratorToStringHandle",
      "multinomial": "Multinomial",
      "mutableDenseHashTable": "MutableDenseHashTable",
      "mutableDenseHashTableV2": "MutableDenseHashTableV2",
      "mutableHashTable": "MutableHashTable",
      "mutableHashTableOfTensors": "MutableHashTableOfTensors",
      "mutableHashTableOfTensorsV2": "MutableHashTableOfTensorsV2",
      "mutableHashTableV2": "MutableHashTableV2",
      "mutexLock": "MutexLock",
      "mutexV2": "MutexV2",
      "ncclAllReduce": "NcclAllReduce",
      "ncclBroadcast": "NcclBroadcast",
      "ncclReduce": "NcclReduce",
      "ndtri": "Ndtri",
      "nearestNeighbors": "NearestNeighbors",
      "negTrain": "NegTrain",
      "nextIteration": "NextIteration",
      "noOp": "NoOp",
      "nonDeterministicInts": "NonDeterministicInts",
      "nonMaxSuppression": "NonMaxSuppression",
      "nonMaxSuppressionV2": "NonMaxSuppressionV2",
      "nonMaxSuppressionV3": "NonMaxSuppressionV3",
      "nonMaxSuppressionV4": "NonMaxSuppressionV4",
      "nonMaxSuppressionV5": "NonMaxSuppressionV5",
      "nonMaxSuppressionWithOverlaps": "NonMaxSuppressionWithOverlaps",
      "nonSerializableDataset": "NonSerializableDataset",
      "notEqual": "NotEqual",
      "nthElement": "NthElement",
      "oneHot": "OneHot",
      "oneShotIterator": "OneShotIterator",
      "onesLike": "OnesLike",
      "optimizeDataset": "OptimizeDataset",
      "optimizeDatasetV2": "OptimizeDatasetV2",
      "optionalFromValue": "OptionalFromValue",
      "optionalGetValue": "OptionalGetValue",
      "optionalHasValue": "OptionalHasValue",
      "optionalNone": "OptionalNone",
      "optionsDataset": "OptionsDataset",
      "orderedMapClear": "OrderedMapClear",
      "orderedMapIncompleteSize": "OrderedMapIncompleteSize",
      "orderedMapPeek": "OrderedMapPeek",
      "orderedMapSize": "OrderedMapSize",
      "orderedMapStage": "OrderedMapStage",
      "orderedMapUnstage": "OrderedMapUnstage",
      "orderedMapUnstageNoKey": "OrderedMapUnstageNoKey",
      "outfeedDequeue": "OutfeedDequeue",
      "outfeedDequeueTuple": "OutfeedDequeueTuple",
      "outfeedDequeueTupleV2": "OutfeedDequeueTupleV2",
      "outfeedDequeueV2": "OutfeedDequeueV2",
      "outfeedEnqueue": "OutfeedEnqueue",
      "outfeedEnqueueTuple": "OutfeedEnqueueTuple",
      "pack": "Pack",
      "pad": "Pad",
      "padV2": "PadV2",
      "paddedBatchDataset": "PaddedBatchDataset",
      "paddedBatchDatasetV2": "PaddedBatchDatasetV2",
      "paddingFIFOQueue": "PaddingFIFOQueue",
      "paddingFIFOQueueV2": "PaddingFIFOQueueV2",
      "parallelBatchDataset": "ParallelBatchDataset",
      "parallelConcat": "ParallelConcat",
      "parallelDynamicStitch": "ParallelDynamicStitch",
      "parallelFilterDataset": "ParallelFilterDataset",
      "parallelInterleaveDataset": "ParallelInterleaveDataset",
      "parallelInterleaveDatasetV2": "ParallelInterleaveDatasetV2",
      "parallelInterleaveDatasetV3": "ParallelInterleaveDatasetV3",
      "parallelInterleaveDatasetV4": "ParallelInterleaveDatasetV4",
      "parallelMapDataset": "ParallelMapDataset",
      "parallelMapDatasetV2": "ParallelMapDatasetV2",
      "parameterizedTruncatedNormal": "ParameterizedTruncatedNormal",
      "parseExample": "ParseExample",
      "parseExampleDataset": "ParseExampleDataset",
      "parseExampleDatasetV2": "ParseExampleDatasetV2",
      "parseExampleV2": "ParseExampleV2",
      "parseSequenceExample": "ParseSequenceExample",
      "parseSequenceExampleV2": "ParseSequenceExampleV2",
      "parseSingleExample": "ParseSingleExample",
      "parseSingleSequenceExample": "ParseSingleSequenceExample",
      "partitionedCall": "PartitionedCall",
      "placeholder": "Placeholder",
      "placeholderV2": "PlaceholderV2",
      "placeholderWithDefault": "PlaceholderWithDefault",
      "populationCount": "PopulationCount",
      "pow": "Pow",
      "prefetchDataset": "PrefetchDataset",
      "prelinearize": "Prelinearize",
      "prelinearizeTuple": "PrelinearizeTuple",
      "preventGradient": "PreventGradient",
      "print": "Print",
      "printV2": "PrintV2",
      "priorityQueue": "PriorityQueue",
      "priorityQueueV2": "PriorityQueueV2",
      "privateThreadPoolDataset": "PrivateThreadPoolDataset",
      "prod": "Prod",
      "pyFunc": "PyFunc",
      "pyFuncStateless": "PyFuncStateless",
      "quantizeAndDequantize": "QuantizeAndDequantize",
      "quantizeAndDequantizeV2": "QuantizeAndDequantizeV2",
      "quantizeAndDequantizeV3": "QuantizeAndDequantizeV3",
      "quantizeAndDequantizeV4": "QuantizeAndDequantizeV4",
      "quantizeAndDequantizeV4Grad": "QuantizeAndDequantizeV4Grad",
      "quantizeDownAndShrinkRange": "QuantizeDownAndShrinkRange",
      "quantizeV2": "QuantizeV2",
      "quantizedAdd": "QuantizedAdd",
      "quantizedBatchNormWithGlobalNormalization": "QuantizedBatchNormWithGlobalNormalization",
      "quantizedBiasAdd": "QuantizedBiasAdd",
      "quantizedConv2DAndRelu": "QuantizedConv2DAndRelu",
      "quantizedConv2DAndReluAndRequantize": "QuantizedConv2DAndReluAndRequantize",
      "quantizedConv2DAndRequantize": "QuantizedConv2DAndRequantize",
      "quantizedConv2DPerChannel": "QuantizedConv2DPerChannel",
      "quantizedConv2DWithBias": "QuantizedConv2DWithBias",
      "quantizedConv2DWithBiasAndRelu": "QuantizedConv2DWithBiasAndRelu",
      "quantizedConv2DWithBiasAndReluAndRequantize": "QuantizedConv2DWithBiasAndReluAndRequantize",
      "quantizedConv2DWithBiasAndRequantize": "QuantizedConv2DWithBiasAndRequantize",
      "quantizedConv2DWithBiasSignedSumAndReluAndRequantize": "QuantizedConv2DWithBiasSignedSumAndReluAndRequantize",
      "quantizedConv2DWithBiasSumAndRelu": "QuantizedConv2DWithBiasSumAndRelu",
      "quantizedConv2DWithBiasSumAndReluAndRequantize": "QuantizedConv2DWithBiasSumAndReluAndRequantize",
      "quantizedDepthwiseConv2D": "QuantizedDepthwiseConv2D",
      "quantizedDepthwiseConv2DWithBias": "QuantizedDepthwiseConv2DWithBias",
      "quantizedDepthwiseConv2DWithBiasAndRelu": "QuantizedDepthwiseConv2DWithBiasAndRelu",
      "quantizedDepthwiseConv2DWithBiasAndReluAndRequantize": "QuantizedDepthwiseConv2DWithBiasAndReluAndRequantize",
      "quantizedInstanceNorm": "QuantizedInstanceNorm",
      "quantizedMatMul": "QuantizedMatMul",
      "quantizedMatMulWithBias": "QuantizedMatMulWithBias",
      "quantizedMatMulWithBiasAndDequantize": "QuantizedMatMulWithBiasAndDequantize",
      "quantizedMatMulWithBiasAndRelu": "QuantizedMatMulWithBiasAndRelu",
      "quantizedMatMulWithBiasAndReluAndRequantize": "QuantizedMatMulWithBiasAndReluAndRequantize",
      "quantizedMatMulWithBiasAndRequantize": "QuantizedMatMulWithBiasAndRequantize",
      "quantizedMul": "QuantizedMul",
      "quantizedRelu": "QuantizedRelu",
      "quantizedRelu6": "QuantizedRelu6",
      "quantizedReshape": "QuantizedReshape",
      "quantizedResizeBilinear": "QuantizedResizeBilinear",
      "quantized_concat": "QuantizedConcat",
      "queueClose": "QueueClose",
      "queueCloseV2": "QueueCloseV2",
      "queueDequeue": "QueueDequeue",
      "queueDequeueMany": "QueueDequeueMany",
      "queueDequeueManyV2": "QueueDequeueManyV2",
      "queueDequeueUpTo": "QueueDequeueUpTo",
      "queueDequeueUpToV2": "QueueDequeueUpToV2",
      "queueDequeueV2": "QueueDequeueV2",
      "queueEnqueue": "QueueEnqueue",
      "queueEnqueueMany": "QueueEnqueueMany",
      "queueEnqueueManyV2": "QueueEnqueueManyV2",
      "queueEnqueueV2": "QueueEnqueueV2",
      "queueIsClosed": "QueueIsClosed",
      "queueIsClosedV2": "QueueIsClosedV2",
      "queueSize": "QueueSize",
      "queueSizeV2": "QueueSizeV2",
      "rFFT": "RFFT",
      "rFFT2D": "RFFT2D",
      "rFFT3D": "RFFT3D",
      "rFFTND": "RFFTND",
      "raggedBincount": "RaggedBincount",
      "raggedCountSparseOutput": "RaggedCountSparseOutput",
      "raggedCross": "RaggedCross",
      "raggedFillEmptyRows": "RaggedFillEmptyRows",
      "raggedFillEmptyRowsGrad": "RaggedFillEmptyRowsGrad",
      "raggedGather": "RaggedGather",
      "raggedRange": "RaggedRange",
      "raggedTensorFromVariant": "RaggedTensorFromVariant",
      "raggedTensorToSparse": "RaggedTensorToSparse",
      "raggedTensorToTensor": "RaggedTensorToTensor",
      "raggedTensorToVariant": "RaggedTensorToVariant",
      "raggedTensorToVariantGradient": "RaggedTensorToVariantGradient",
      "randomCrop": "RandomCrop",
      "randomDataset": "RandomDataset",
      "randomDatasetV2": "RandomDatasetV2",
      "randomGamma": "RandomGamma",
      "randomGammaGrad": "RandomGammaGrad",
      "randomIndexShuffle": "RandomIndexShuffle",
      "randomPoisson": "RandomPoisson",
      "randomPoissonV2": "RandomPoissonV2",
      "randomShuffle": "RandomShuffle",
      "randomShuffleQueue": "RandomShuffleQueue",
      "randomShuffleQueueV2": "RandomShuffleQueueV2",
      "randomStandardNormal": "RandomStandardNormal",
      "randomUniform": "RandomUniform",
      "randomUniformInt": "RandomUniformInt",
      "range": "Range",
      "rangeDataset": "RangeDataset",
      "rank": "Rank",
      "readFile": "ReadFile",
      "readVariableOp": "ReadVariableOp",
      "readVariableXlaSplitND": "ReadVariableXlaSplitND",
      "readerNumRecordsProduced": "ReaderNumRecordsProduced",
      "readerNumRecordsProducedV2": "ReaderNumRecordsProducedV2",
      "readerNumWorkUnitsCompleted": "ReaderNumWorkUnitsCompleted",
      "readerNumWorkUnitsCompletedV2": "ReaderNumWorkUnitsCompletedV2",
      "readerRead": "ReaderRead",
      "readerReadUpTo": "ReaderReadUpTo",
      "readerReadUpToV2": "ReaderReadUpToV2",
      "readerReadV2": "ReaderReadV2",
      "readerReset": "ReaderReset",
      "readerResetV2": "ReaderResetV2",
      "readerRestoreState": "ReaderRestoreState",
      "readerRestoreStateV2": "ReaderRestoreStateV2",
      "readerSerializeState": "ReaderSerializeState",
      "readerSerializeStateV2": "ReaderSerializeStateV2",
      "real": "Real",
      "realdiv": "RealDiv",
      "rebatchDataset": "RebatchDataset",
      "rebatchDatasetV2": "RebatchDatasetV2",
      "reciprocalGrad": "ReciprocalGrad",
      "recordInput": "RecordInput",
      "recv": "Recv",
      "recvTPUEmbeddingActivations": "RecvTPUEmbeddingActivations",
      "reduceDataset": "ReduceDataset",
      "reduceJoin": "ReduceJoin",
      "refEnter": "RefEnter",
      "refExit": "RefExit",
      "refIdentity": "RefIdentity",
      "refMerge": "RefMerge",
      "refNextIteration": "RefNextIteration",
      "refSelect": "RefSelect",
      "refSwitch": "RefSwitch",
      "regexFullMatch": "RegexFullMatch",
      "regexReplace": "RegexReplace",
      "registerDataset": "RegisterDataset",
      "registerDatasetV2": "RegisterDatasetV2",
      "relayout": "Relayout",
      "relayoutLike": "RelayoutLike",
      "relu6": "Relu6",
      "relu6Grad": "Relu6Grad",
      "reluGrad": "ReluGrad",
      "remoteCall": "RemoteCall",
      "repeatDataset": "RepeatDataset",
      "requantizationRange": "RequantizationRange",
      "requantizationRangePerChannel": "RequantizationRangePerChannel",
      "requantize": "Requantize",
      "requantizePerChannel": "RequantizePerChannel",
      "reshape": "Reshape",
      "resizeArea": "ResizeArea",
      "resizeBicubic": "ResizeBicubic",
      "resizeBicubicGrad": "ResizeBicubicGrad",
      "resizeBilinear": "ResizeBilinear",
      "resizeBilinearGrad": "ResizeBilinearGrad",
      "resizeNearestNeighbor": "ResizeNearestNeighbor",
      "resizeNearestNeighborGrad": "ResizeNearestNeighborGrad",
      "resourceAccumulatorApplyGradient": "ResourceAccumulatorApplyGradient",
      "resourceAccumulatorNumAccumulated": "ResourceAccumulatorNumAccumulated",
      "resourceAccumulatorSetGlobalStep": "ResourceAccumulatorSetGlobalStep",
      "resourceAccumulatorTakeGradient": "ResourceAccumulatorTakeGradient",
      "resourceApplyAdaMax": "ResourceApplyAdaMax",
      "resourceApplyAdadelta": "ResourceApplyAdadelta",
      "resourceApplyAdagrad": "ResourceApplyAdagrad",
      "resourceApplyAdagradDA": "ResourceApplyAdagradDA",
      "resourceApplyAdagradV2": "ResourceApplyAdagradV2",
      "resourceApplyAdam": "ResourceApplyAdam",
      "resourceApplyAdamWithAmsgrad": "ResourceApplyAdamWithAmsgrad",
      "resourceApplyAddSign": "ResourceApplyAddSign",
      "resourceApplyCenteredRMSProp": "ResourceApplyCenteredRMSProp",
      "resourceApplyFtrl": "ResourceApplyFtrl",
      "resourceApplyFtrlV2": "ResourceApplyFtrlV2",
      "resourceApplyGradientDescent": "ResourceApplyGradientDescent",
      "resourceApplyKerasMomentum": "ResourceApplyKerasMomentum",
      "resourceApplyMomentum": "ResourceApplyMomentum",
      "resourceApplyPowerSign": "ResourceApplyPowerSign",
      "resourceApplyProximalAdagrad": "ResourceApplyProximalAdagrad",
      "resourceApplyProximalGradientDescent": "ResourceApplyProximalGradientDescent",
      "resourceApplyRMSProp": "ResourceApplyRMSProp",
      "resourceConditionalAccumulator": "ResourceConditionalAccumulator",
      "resourceCountUpTo": "ResourceCountUpTo",
      "resourceGather": "ResourceGather",
      "resourceGatherNd": "ResourceGatherNd",
      "resourceScatterAdd": "ResourceScatterAdd",
      "resourceScatterDiv": "ResourceScatterDiv",
      "resourceScatterMax": "ResourceScatterMax",
      "resourceScatterMin": "ResourceScatterMin",
      "resourceScatterMul": "ResourceScatterMul",
      "resourceScatterNdAdd": "ResourceScatterNdAdd",
      "resourceScatterNdMax": "ResourceScatterNdMax",
      "resourceScatterNdMin": "ResourceScatterNdMin",
      "resourceScatterNdSub": "ResourceScatterNdSub",
      "resourceScatterNdUpdate": "ResourceScatterNdUpdate",
      "resourceScatterSub": "ResourceScatterSub",
      "resourceScatterUpdate": "ResourceScatterUpdate",
      "resourceSparseApplyAdadelta": "ResourceSparseApplyAdadelta",
      "resourceSparseApplyAdagrad": "ResourceSparseApplyAdagrad",
      "resourceSparseApplyAdagradDA": "ResourceSparseApplyAdagradDA",
      "resourceSparseApplyAdagradV2": "ResourceSparseApplyAdagradV2",
      "resourceSparseApplyCenteredRMSProp": "ResourceSparseApplyCenteredRMSProp",
      "resourceSparseApplyFtrl": "ResourceSparseApplyFtrl",
      "resourceSparseApplyFtrlV2": "ResourceSparseApplyFtrlV2",
      "resourceSparseApplyKerasMomentum": "ResourceSparseApplyKerasMomentum",
      "resourceSparseApplyMomentum": "ResourceSparseApplyMomentum",
      "resourceSparseApplyProximalAdagrad": "ResourceSparseApplyProximalAdagrad",
      "resourceSparseApplyProximalGradientDescent": "ResourceSparseApplyProximalGradientDescent",
      "resourceSparseApplyRMSProp": "ResourceSparseApplyRMSProp",
      "resourceStridedSliceAssign": "ResourceStridedSliceAssign",
      "restore": "Restore",
      "restoreSlice": "RestoreSlice",
      "restoreV2": "RestoreV2",
      "retrieveAllTPUEmbeddingParameters": "RetrieveAllTPUEmbeddingParameters",
      "retrieveTPUEmbeddingADAMParameters": "RetrieveTPUEmbeddingADAMParameters",
      "retrieveTPUEmbeddingAdadeltaParameters": "RetrieveTPUEmbeddingAdadeltaParameters",
      "retrieveTPUEmbeddingAdagradMomentumParameters": "RetrieveTPUEmbeddingAdagradMomentumParameters",
      "retrieveTPUEmbeddingAdagradParameters": "RetrieveTPUEmbeddingAdagradParameters",
      "retrieveTPUEmbeddingCenteredRMSPropParameters": "RetrieveTPUEmbeddingCenteredRMSPropParameters",
      "retrieveTPUEmbeddingFTRLParameters": "RetrieveTPUEmbeddingFTRLParameters",
      "retrieveTPUEmbeddingFrequencyEstimatorParameters": "RetrieveTPUEmbeddingFrequencyEstimatorParameters",
      "retrieveTPUEmbeddingMDLAdagradLightParameters": "RetrieveTPUEmbeddingMDLAdagradLightParameters",
      "retrieveTPUEmbeddingMomentumParameters": "RetrieveTPUEmbeddingMomentumParameters",
      "retrieveTPUEmbeddingProximalAdagradParameters": "RetrieveTPUEmbeddingProximalAdagradParameters",
      "retrieveTPUEmbeddingProximalYogiParameters": "RetrieveTPUEmbeddingProximalYogiParameters",
      "retrieveTPUEmbeddingRMSPropParameters": "RetrieveTPUEmbeddingRMSPropParameters",
      "retrieveTPUEmbeddingStochasticGradientDescentParameters": "RetrieveTPUEmbeddingStochasticGradientDescentParameters",
      "reverse": "ReverseV2",
      "reverseSequence": "ReverseSequence",
      "rewriteDataset": "RewriteDataset",
      "right_shift": "RightShift",
      "riscAbs": "RiscAbs",
      "riscAdd": "RiscAdd",
      "riscBinaryArithmetic": "RiscBinaryArithmetic",
      "riscBinaryComparison": "RiscBinaryComparison",
      "riscBitcast": "RiscBitcast",
      "riscBroadcast": "RiscBroadcast",
      "riscCast": "RiscCast",
      "riscCeil": "RiscCeil",
      "riscCholesky": "RiscCholesky",
      "riscConcat": "RiscConcat",
      "riscCondition": "RiscCondition",
      "riscConv": "RiscConv",
      "riscCos": "RiscCos",
      "riscDiv": "RiscDiv",
      "riscDot": "RiscDot",
      "riscExp": "RiscExp",
      "riscFft": "RiscFft",
      "riscFloor": "RiscFloor",
      "riscGather": "RiscGather",
      "riscImag": "RiscImag",
      "riscIsFinite": "RiscIsFinite",
      "riscLog": "RiscLog",
      "riscLogicalAnd": "RiscLogicalAnd",
      "riscLogicalNot": "RiscLogicalNot",
      "riscLogicalOr": "RiscLogicalOr",
      "riscMax": "RiscMax",
      "riscMin": "RiscMin",
      "riscMul": "RiscMul",
      "riscNeg": "RiscNeg",
      "riscPad": "RiscPad",
      "riscPool": "RiscPool",
      "riscPow": "RiscPow",
      "riscRandomUniform": "RiscRandomUniform",
      "riscReal": "RiscReal",
      "riscReduce": "RiscReduce",
      "riscRem": "RiscRem",
      "riscReshape": "RiscReshape",
      "riscReverse": "RiscReverse",
      "riscScatter": "RiscScatter",
      "riscShape": "RiscShape",
      "riscSign": "RiscSign",
      "riscSlice": "RiscSlice",
      "riscSort": "RiscSort",
      "riscSqueeze": "RiscSqueeze",
      "riscSub": "RiscSub",
      "riscTranspose": "RiscTranspose",
      "riscTriangularSolve": "RiscTriangularSolve",
      "riscUnary": "RiscUnary",
      "riscWhile": "RiscWhile",
      "rngReadAndSkip": "RngReadAndSkip",
      "rngSkip": "RngSkip",
      "roll": "Roll",
      "round": "Round",
      "rpcCall": "RpcCall",
      "rpcCheckStatus": "RpcCheckStatus",
      "rpcClient": "RpcClient",
      "rpcGetValue": "RpcGetValue",
      "rpcServer": "RpcServer",
      "rpcServerRegister": "RpcServerRegister",
      "rpcServerStart": "RpcServerStart",
      "rsqrt": "Rsqrt",
      "rsqrtGrad": "RsqrtGrad",
      "sampleDistortedBoundingBox": "SampleDistortedBoundingBox",
      "sampleDistortedBoundingBoxV2": "SampleDistortedBoundingBoxV2",
      "samplingDataset": "SamplingDataset",
      "save": "Save",
      "saveDataset": "SaveDataset",
      "saveDatasetV2": "SaveDatasetV2",
      "saveSlices": "SaveSlices",
      "saveV2": "SaveV2",
      "scalarSummary": "ScalarSummary",
      "scaleAndTranslateGrad": "ScaleAndTranslateGrad",
      "scanDataset": "ScanDataset",
      "scatterAdd": "ScatterAdd",
      "scatterDiv": "ScatterDiv",
      "scatterMax": "ScatterMax",
      "scatterMin": "ScatterMin",
      "scatterMul": "ScatterMul",
      "scatterNdAdd": "ScatterNdAdd",
      "scatterNdMax": "ScatterNdMax",
      "scatterNdMin": "ScatterNdMin",
      "scatterNdNonAliasingAdd": "ScatterNdNonAliasingAdd",
      "scatterNdSub": "ScatterNdSub",
      "scatterNdUpdate": "ScatterNdUpdate",
      "scatterSub": "ScatterSub",
      "scatterUpdate": "ScatterUpdate",
      "scatter_nd": "ScatterNd",
      "sdcaOptimizerV2": "SdcaOptimizerV2",
      "sdca_fprint": "SdcaFprint",
      "sdca_optimizer": "SdcaOptimizer",
      "sdca_shrink_l1": "SdcaShrinkL1",
      "segmentMaxV2": "SegmentMaxV2",
      "segmentMinV2": "SegmentMinV2",
      "segmentProdV2": "SegmentProdV2",
      "segmentSumV2": "SegmentSumV2",
      "select": "Select",
      "selectV2": "SelectV2",
      "selfAdjointEig": "SelfAdjointEig",
      "selfAdjointEigV2": "SelfAdjointEigV2",
      "seluGrad": "SeluGrad",
      "send": "Send",
      "sendTPUEmbeddingGradients": "SendTPUEmbeddingGradients",
      "serializeIterator": "SerializeIterator",
      "serializeManySparse": "SerializeManySparse",
      "serializeSparse": "SerializeSparse",
      "serializeTensor": "SerializeTensor",
      "setSize": "SetSize",
      "setStatsAggregatorDataset": "SetStatsAggregatorDataset",
      "shape": "Shape",
      "shapeN": "ShapeN",
      "shardDataset": "ShardDataset",
      "shardedFilename": "ShardedFilename",
      "shardedFilespec": "ShardedFilespec",
      "shuffleAndRepeatDataset": "ShuffleAndRepeatDataset",
      "shuffleAndRepeatDatasetV2": "ShuffleAndRepeatDatasetV2",
      "shuffleDataset": "ShuffleDataset",
      "shuffleDatasetV2": "ShuffleDatasetV2",
      "shuffleDatasetV3": "ShuffleDatasetV3",
      "shutdownDistributedTPU": "ShutdownDistributedTPU",
      "shutdownTPUSystem": "ShutdownTPUSystem",
      "sigmoid": "Sigmoid",
      "sigmoidGrad": "SigmoidGrad",
      "sign": "Sign",
      "size": "Size",
      "skipDataset": "SkipDataset",
      "skipgram": "Skipgram",
      "sleepDataset": "SleepDataset",
      "slice": "Slice",
      "slidingWindowDataset": "SlidingWindowDataset",
      "snapshot": "Snapshot",
      "snapshotChunkDataset": "SnapshotChunkDataset",
      "snapshotDataset": "SnapshotDataset",
      "snapshotDatasetReader": "SnapshotDatasetReader",
      "snapshotDatasetV2": "SnapshotDatasetV2",
      "snapshotNestedDatasetReader": "SnapshotNestedDatasetReader",
      "sobolSample": "SobolSample",
      "softmax": "Softmax",
      "softmaxCrossEntropyWithLogits": "SoftmaxCrossEntropyWithLogits",
      "softplus": "Softplus",
      "softplusGrad": "SoftplusGrad",
      "softsignGrad": "SoftsignGrad",
      "sortListOfSparseCoreCooTensors": "SortListOfSparseCoreCooTensors",
      "spaceToBatch": "SpaceToBatch",
      "spaceToDepth": "SpaceToDepth",
      "space_to_batch_nd": "SpaceToBatchND",
      "sparseAccumulatorApplyGradient": "SparseAccumulatorApplyGradient",
      "sparseAccumulatorTakeGradient": "SparseAccumulatorTakeGradient",
      "sparseAdd": "SparseAdd",
      "sparseAddGrad": "SparseAddGrad",
      "sparseApplyAdadelta": "SparseApplyAdadelta",
      "sparseApplyAdagrad": "SparseApplyAdagrad",
      "sparseApplyAdagradDA": "SparseApplyAdagradDA",
      "sparseApplyAdagradV2": "SparseApplyAdagradV2",
      "sparseApplyCenteredRMSProp": "SparseApplyCenteredRMSProp",
      "sparseApplyFtrl": "SparseApplyFtrl",
      "sparseApplyFtrlV2": "SparseApplyFtrlV2",
      "sparseApplyMomentum": "SparseApplyMomentum",
      "sparseApplyProximalAdagrad": "SparseApplyProximalAdagrad",
      "sparseApplyProximalGradientDescent": "SparseApplyProximalGradientDescent",
      "sparseApplyRMSProp": "SparseApplyRMSProp",
      "sparseBincount": "SparseBincount",
      "sparseConcat": "SparseConcat",
      "sparseConditionalAccumulator": "SparseConditionalAccumulator",
      "sparseCountSparseOutput": "SparseCountSparseOutput",
      "sparseCross": "SparseCross",
      "sparseCrossHashed": "SparseCrossHashed",
      "sparseCrossV2": "SparseCrossV2",
      "sparseDenseCwiseAdd": "SparseDenseCwiseAdd",
      "sparseDenseCwiseDiv": "SparseDenseCwiseDiv",
      "sparseDenseCwiseMul": "SparseDenseCwiseMul",
      "sparseFillEmptyRows": "SparseFillEmptyRows",
      "sparseFillEmptyRowsGrad": "SparseFillEmptyRowsGrad",
      "sparseMatMul": "SparseMatMul",
      "sparseMatrixAdd": "SparseMatrixAdd",
      "sparseMatrixMatMul": "SparseMatrixMatMul",
      "sparseMatrixMul": "SparseMatrixMul",
      "sparseMatrixNNZ": "SparseMatrixNNZ",
      "sparseMatrixOrderingAMD": "SparseMatrixOrderingAMD",
      "sparseMatrixSoftmax": "SparseMatrixSoftmax",
      "sparseMatrixSoftmaxGrad": "SparseMatrixSoftmaxGrad",
      "sparseMatrixSparseCholesky": "SparseMatrixSparseCholesky",
      "sparseMatrixSparseMatMul": "SparseMatrixSparseMatMul",
      "sparseMatrixTranspose": "SparseMatrixTranspose",
      "sparseMatrixZeros": "SparseMatrixZeros",
      "sparseReduceMax": "SparseReduceMax",
      "sparseReduceMaxSparse": "SparseReduceMaxSparse",
      "sparseReduceSum": "SparseReduceSum",
      "sparseReduceSumSparse": "SparseReduceSumSparse",
      "sparseReorder": "SparseReorder",
      "sparseReshape": "SparseReshape",
      "sparseSegmentMean": "SparseSegmentMean",
      "sparseSegmentMeanGrad": "SparseSegmentMeanGrad",
      "sparseSegmentMeanGradV2": "SparseSegmentMeanGradV2",
      "sparseSegmentMeanWithNumSegments": "SparseSegmentMeanWithNumSegments",
      "sparseSegmentSqrtN": "SparseSegmentSqrtN",
      "sparseSegmentSqrtNGrad": "SparseSegmentSqrtNGrad",
      "sparseSegmentSqrtNGradV2": "SparseSegmentSqrtNGradV2",
      "sparseSegmentSqrtNWithNumSegments": "SparseSegmentSqrtNWithNumSegments",
      "sparseSegmentSum": "SparseSegmentSum",
      "sparseSegmentSumGrad": "SparseSegmentSumGrad",
      "sparseSegmentSumGradV2": "SparseSegmentSumGradV2",
      "sparseSegmentSumWithNumSegments": "SparseSegmentSumWithNumSegments",
      "sparseSlice": "SparseSlice",
      "sparseSliceGrad": "SparseSliceGrad",
      "sparseSoftmax": "SparseSoftmax",
      "sparseSoftmaxCrossEntropyWithLogits": "SparseSoftmaxCrossEntropyWithLogits",
      "sparseSparseMaximum": "SparseSparseMaximum",
      "sparseSparseMinimum": "SparseSparseMinimum",
      "sparseSplit": "SparseSplit",
      "sparseTensorDenseAdd": "SparseTensorDenseAdd",
      "sparseTensorDenseMatMul": "SparseTensorDenseMatMul",
      "sparseTensorSliceDataset": "SparseTensorSliceDataset",
      "sparseTensorToCSRSparseMatrix": "SparseTensorToCSRSparseMatrix",
      "sparseToDense": "SparseToDense",
      "sparseToSparseSetOperation": "SparseToSparseSetOperation",
      "spence": "Spence",
      "split": "Split",
      "splitDedupData": "SplitDedupData",
      "splitV": "SplitV",
      "sqlDataset": "SqlDataset",
      "sqrt": "Sqrt",
      "sqrtGrad": "SqrtGrad",
      "squeeze": "Squeeze",
      "stack": "Stack",
      "stackClose": "StackClose",
      "stackCloseV2": "StackCloseV2",
      "stackPop": "StackPop",
      "stackPopV2": "StackPopV2",
      "stackPush": "StackPush",
      "stackPushV2": "StackPushV2",
      "stackV2": "StackV2",
      "stage": "Stage",
      "stageClear": "StageClear",
      "stagePeek": "StagePeek",
      "stageSize": "StageSize",
      "statefulPartitionedCall": "StatefulPartitionedCall",
      "statefulRandomBinomial": "StatefulRandomBinomial",
      "statefulStandardNormal": "StatefulStandardNormal",
      "statefulStandardNormalV2": "StatefulStandardNormalV2",
      "statefulTruncatedNormal": "StatefulTruncatedNormal",
      "statefulUniform": "StatefulUniform",
      "statefulUniformFullInt": "StatefulUniformFullInt",
      "statefulUniformInt": "StatefulUniformInt",
      "statelessCase": "StatelessCase",
      "statelessIf": "StatelessIf",
      "statelessMultinomial": "StatelessMultinomial",
      "statelessParameterizedTruncatedNormal": "StatelessParameterizedTruncatedNormal",
      "statelessRandomBinomial": "StatelessRandomBinomial",
      "statelessRandomGammaV2": "StatelessRandomGammaV2",
      "statelessRandomGammaV3": "StatelessRandomGammaV3",
      "statelessRandomGetAlg": "StatelessRandomGetAlg",
      "statelessRandomGetKeyCounter": "StatelessRandomGetKeyCounter",
      "statelessRandomGetKeyCounterAlg": "StatelessRandomGetKeyCounterAlg",
      "statelessRandomNormal": "StatelessRandomNormal",
      "statelessRandomNormalV2": "StatelessRandomNormalV2",
      "statelessRandomPoisson": "StatelessRandomPoisson",
      "statelessRandomUniform": "StatelessRandomUniform",
      "statelessRandomUniformFullInt": "StatelessRandomUniformFullInt",
      "statelessRandomUniformFullIntV2": "StatelessRandomUniformFullIntV2",
      "statelessRandomUniformInt": "StatelessRandomUniformInt",
      "statelessRandomUniformIntV2": "StatelessRandomUniformIntV2",
      "statelessRandomUniformV2": "StatelessRandomUniformV2",
      "statelessSampleDistortedBoundingBox": "StatelessSampleDistortedBoundingBox",
      "statelessShuffle": "StatelessShuffle",
      "statelessTruncatedNormal": "StatelessTruncatedNormal",
      "statelessTruncatedNormalV2": "StatelessTruncatedNormalV2",
      "statelessWhile": "StatelessWhile",
      "staticRegexFullMatch": "StaticRegexFullMatch",
      "staticRegexReplace": "StaticRegexReplace",
      "statsAggregatorHandle": "StatsAggregatorHandle",
      "statsAggregatorHandleV2": "StatsAggregatorHandleV2",
      "statsAggregatorSetSummaryWriter": "StatsAggregatorSetSummaryWriter",
      "statsAggregatorSummary": "StatsAggregatorSummary",
      "stochasticCastToInt": "StochasticCastToInt",
      "stopGradient": "StopGradient",
      "storeMinibatchStatisticsInFdo": "StoreMinibatchStatisticsInFdo",
      "stridedSlice": "StridedSlice",
      "stridedSliceAssign": "StridedSliceAssign",
      "stridedSliceGrad": "StridedSliceGrad",
      "stringFormat": "StringFormat",
      "stringJoin": "StringJoin",
      "stringLength": "StringLength",
      "stringNGrams": "StringNGrams",
      "stringSplit": "StringSplit",
      "stringSplitV2": "StringSplitV2",
      "stringToHashBucket": "StringToHashBucket",
      "stringToNumber": "StringToNumber",
      "strip": "StringStrip",
      "sub": "Sub",
      "substr": "Substr",
      "sum": "Sum",
      "summaryWriter": "SummaryWriter",
      "svd": "Svd",
      "switch": "Switch",
      "symbolicGradient": "SymbolicGradient",
      "syncDevice": "SyncDevice",
      "tFRecordDataset": "TFRecordDataset",
      "tFRecordDatasetV2": "TFRecordDatasetV2",
      "tFRecordReader": "TFRecordReader",
      "tFRecordReaderV2": "TFRecordReaderV2",
      "tPUAnnotateTensorsWithDynamicShape": "TPUAnnotateTensorsWithDynamicShape",
      "tPUCompilationResult": "TPUCompilationResult",
      "tPUCompile": "TPUCompile",
      "tPUCompileSucceededAssert": "TPUCompileSucceededAssert",
      "tPUCopyWithDynamicShape": "TPUCopyWithDynamicShape",
      "tPUEmbeddingActivations": "TPUEmbeddingActivations",
      "tPUExecute": "TPUExecute",
      "tPUExecuteAndUpdateVariables": "TPUExecuteAndUpdateVariables",
      "tPUOrdinalSelector": "TPUOrdinalSelector",
      "tPUPartitionedCall": "TPUPartitionedCall",
      "tPUPartitionedInput": "TPUPartitionedInput",
      "tPUPartitionedInputV2": "TPUPartitionedInputV2",
      "tPUPartitionedOutput": "TPUPartitionedOutput",
      "tPUPartitionedOutputV2": "TPUPartitionedOutputV2",
      "tPUReplicateMetadata": "TPUReplicateMetadata",
      "tPUReplicatedInput": "TPUReplicatedInput",
      "tPUReplicatedOutput": "TPUReplicatedOutput",
      "tPUReshardVariables": "TPUReshardVariables",
      "tPURoundRobin": "TPURoundRobin",
      "takeDataset": "TakeDataset",
      "takeManySparseFromTensorsMap": "TakeManySparseFromTensorsMap",
      "takeWhileDataset": "TakeWhileDataset",
      "tanhGrad": "TanhGrad",
      "temporaryVariable": "TemporaryVariable",
      "tensorArray": "TensorArray",
      "tensorArrayClose": "TensorArrayClose",
      "tensorArrayCloseV2": "TensorArrayCloseV2",
      "tensorArrayCloseV3": "TensorArrayCloseV3",
      "tensorArrayConcat": "TensorArrayConcat",
      "tensorArrayConcatV2": "TensorArrayConcatV2",
      "tensorArrayConcatV3": "TensorArrayConcatV3",
      "tensorArrayGather": "TensorArrayGather",
      "tensorArrayGatherV2": "TensorArrayGatherV2",
      "tensorArrayGatherV3": "TensorArrayGatherV3",
      "tensorArrayGrad": "TensorArrayGrad",
      "tensorArrayGradV2": "TensorArrayGradV2",
      "tensorArrayGradV3": "TensorArrayGradV3",
      "tensorArrayGradWithShape": "TensorArrayGradWithShape",
      "tensorArrayPack": "TensorArrayPack",
      "tensorArrayRead": "TensorArrayRead",
      "tensorArrayReadV2": "TensorArrayReadV2",
      "tensorArrayReadV3": "TensorArrayReadV3",
      "tensorArrayScatter": "TensorArrayScatter",
      "tensorArrayScatterV2": "TensorArrayScatterV2",
      "tensorArrayScatterV3": "TensorArrayScatterV3",
      "tensorArraySize": "TensorArraySize",
      "tensorArraySizeV2": "TensorArraySizeV2",
      "tensorArraySizeV3": "TensorArraySizeV3",
      "tensorArraySplit": "TensorArraySplit",
      "tensorArraySplitV2": "TensorArraySplitV2",
      "tensorArraySplitV3": "TensorArraySplitV3",
      "tensorArrayUnpack": "TensorArrayUnpack",
      "tensorArrayV2": "TensorArrayV2",
      "tensorArrayV3": "TensorArrayV3",
      "tensorArrayWrite": "TensorArrayWrite",
      "tensorArrayWriteV2": "TensorArrayWriteV2",
      "tensorArrayWriteV3": "TensorArrayWriteV3",
      "tensorDataset": "TensorDataset",
      "tensorListConcat": "TensorListConcat",
      "tensorListConcatLists": "TensorListConcatLists",
      "tensorListConcatV2": "TensorListConcatV2",
      "tensorListElementShape": "TensorListElementShape",
      "tensorListFromTensor": "TensorListFromTensor",
      "tensorListGather": "TensorListGather",
      "tensorListGetItem": "TensorListGetItem",
      "tensorListLength": "TensorListLength",
      "tensorListPopBack": "TensorListPopBack",
      "tensorListPushBack": "TensorListPushBack",
      "tensorListPushBackBatch": "TensorListPushBackBatch",
      "tensorListReserve": "TensorListReserve",
      "tensorListResize": "TensorListResize",
      "tensorListScatter": "TensorListScatter",
      "tensorListScatterIntoExistingList": "TensorListScatterIntoExistingList",
      "tensorListScatterV2": "TensorListScatterV2",
      "tensorListSetItem": "TensorListSetItem",
      "tensorListSplit": "TensorListSplit",
      "tensorListStack": "TensorListStack",
      "tensorMapErase": "TensorMapErase",
      "tensorMapHasKey": "TensorMapHasKey",
      "tensorMapInsert": "TensorMapInsert",
      "tensorMapLookup": "TensorMapLookup",
      "tensorMapSize": "TensorMapSize",
      "tensorMapStackKeys": "TensorMapStackKeys",
      "tensorScatterUpdate": "TensorScatterUpdate",
      "tensorSliceDataset": "TensorSliceDataset",
      "tensorStridedSliceUpdate": "TensorStridedSliceUpdate",
      "tensorSummary": "TensorSummary",
      "tensorSummaryV2": "TensorSummaryV2",
      "tensor_scatter_nd_add": "TensorScatterAdd",
      "tensor_scatter_nd_max": "TensorScatterMax",
      "tensor_scatter_nd_min": "TensorScatterMin",
      "tensor_scatter_nd_sub": "TensorScatterSub",
      "textLineDataset": "TextLineDataset",
      "textLineReader": "TextLineReader",
      "textLineReaderV2": "TextLineReaderV2",
      "threadPoolDataset": "ThreadPoolDataset",
      "threadPoolHandle": "ThreadPoolHandle",
      "threadUnsafeUnigramCandidateSampler": "ThreadUnsafeUnigramCandidateSampler",
      "tile": "Tile",
      "tileGrad": "TileGrad",
      "timestamp": "Timestamp",
      "toBool": "ToBool",
      "to_hash_bucket_fast": "StringToHashBucketFast",
      "to_hash_bucket_strong": "StringToHashBucketStrong",
      "topK": "TopK",
      "topKUnique": "TopKUnique",
      "topKV2": "TopKV2",
      "topKWithUnique": "TopKWithUnique",
      "tpuHandleToProtoKey": "TpuHandleToProtoKey",
      "transpose": "Transpose",
      "tridiagonalMatMul": "TridiagonalMatMul",
      "tridiagonalSolve": "TridiagonalSolve",
      "truncatedNormal": "TruncatedNormal",
      "truncatediv": "TruncateDiv",
      "truncatemod": "TruncateMod",
      "unbatch": "Unbatch",
      "unbatchDataset": "UnbatchDataset",
      "unbatchGrad": "UnbatchGrad",
      "uncompressElement": "UncompressElement",
      "unicodeDecode": "UnicodeDecode",
      "unicodeDecodeWithOffsets": "UnicodeDecodeWithOffsets",
      "unicodeEncode": "UnicodeEncode",
      "unicode_script": "UnicodeScript",
      "unicode_transcode": "UnicodeTranscode",
      "uniformCandidateSampler": "UniformCandidateSampler",
      "uniformDequantize": "UniformDequantize",
      "uniformQuantize": "UniformQuantize",
      "uniformQuantizedAdd": "UniformQuantizedAdd",
      "uniformQuantizedClipByValue": "UniformQuantizedClipByValue",
      "uniformQuantizedConvolution": "UniformQuantizedConvolution",
      "uniformQuantizedConvolutionHybrid": "UniformQuantizedConvolutionHybrid",
      "uniformQuantizedDot": "UniformQuantizedDot",
      "uniformQuantizedDotHybrid": "UniformQuantizedDotHybrid",
      "uniformRequantize": "UniformRequantize",
      "unique": "Unique",
      "uniqueDataset": "UniqueDataset",
      "uniqueV2": "UniqueV2",
      "uniqueWithCounts": "UniqueWithCounts",
      "uniqueWithCountsV2": "UniqueWithCountsV2",
      "unpack": "Unpack",
      "unravelIndex": "UnravelIndex",
      "unsorted_segment_join": "UnsortedSegmentJoin",
      "unstage": "Unstage",
      "unwrapDatasetVariant": "UnwrapDatasetVariant",
      "updateTaskIdAndGlobalCoreArray": "UpdateTaskIdAndGlobalCoreArray",
      "upper": "StringUpper",
      "upperBound": "UpperBound",
      "varHandleOp": "VarHandleOp",
      "varIsInitializedOp": "VarIsInitializedOp",
      "variable": "Variable",
      "variableShape": "VariableShape",
      "variableV2": "VariableV2",
      "weightedFlatMapDataset": "WeightedFlatMapDataset",
      "where": "Where",
      "while": "While",
      "wholeFileReader": "WholeFileReader",
      "wholeFileReaderV2": "WholeFileReaderV2",
      "windowDataset": "WindowDataset",
      "windowOp": "WindowOp",
      "workerHeartbeat": "WorkerHeartbeat",
      "wrapDatasetVariant": "WrapDatasetVariant",
      "writeAudioSummary": "WriteAudioSummary",
      "writeGraphSummary": "WriteGraphSummary",
      "writeHistogramSummary": "WriteHistogramSummary",
      "writeImageSummary": "WriteImageSummary",
      "writeRawProtoSummary": "WriteRawProtoSummary",
      "writeScalarSummary": "WriteScalarSummary",
      "writeSummary": "WriteSummary",
      "xdivy": "Xdivy",
      "xlaAllReduce": "XlaAllReduce",
      "xlaBroadcastHelper": "XlaBroadcastHelper",
      "xlaCallModule": "XlaCallModule",
      "xlaClusterOutput": "XlaClusterOutput",
      "xlaConcatND": "XlaConcatND",
      "xlaConv": "XlaConv",
      "xlaConvV2": "XlaConvV2",
      "xlaCustomCall": "XlaCustomCall",
      "xlaCustomCallV2": "XlaCustomCallV2",
      "xlaDequantize": "XlaDequantize",
      "xlaDot": "XlaDot",
      "xlaDotV2": "XlaDotV2",
      "xlaDynamicSlice": "XlaDynamicSlice",
      "xlaDynamicUpdateSlice": "XlaDynamicUpdateSlice",
      "xlaEinsum": "XlaEinsum",
      "xlaGather": "XlaGather",
      "xlaHostCompute": "XlaHostCompute",
      "xlaIf": "XlaIf",
      "xlaKeyValueSort": "XlaKeyValueSort",
      "xlaLaunch": "XlaLaunch",
      "xlaLaunchV2": "XlaLaunchV2",
      "xlaOptimizationBarrier": "XlaOptimizationBarrier",
      "xlaPad": "XlaPad",
      "xlaRecv": "XlaRecv",
      "xlaRecvFromHost": "XlaRecvFromHost",
      "xlaRecvTPUEmbeddingActivations": "XlaRecvTPUEmbeddingActivations",
      "xlaRecvTPUEmbeddingActivationsV2": "XlaRecvTPUEmbeddingActivationsV2",
      "xlaRecvTPUEmbeddingDeduplicationData": "XlaRecvTPUEmbeddingDeduplicationData",
      "xlaRecvTPUEmbeddingDeduplicationDataV2": "XlaRecvTPUEmbeddingDeduplicationDataV2",
      "xlaReduce": "XlaReduce",
      "xlaReducePrecision": "XlaReducePrecision",
      "xlaReduceScatter": "XlaReduceScatter",
      "xlaReduceWindow": "XlaReduceWindow",
      "xlaRemoveDynamicDimensionSize": "XlaRemoveDynamicDimensionSize",
      "xlaReplicaId": "XlaReplicaId",
      "xlaRngBitGenerator": "XlaRngBitGenerator",
      "xlaScatter": "XlaScatter",
      "xlaSelectAndScatter": "XlaSelectAndScatter",
      "xlaSelfAdjointEig": "XlaSelfAdjointEig",
      "xlaSend": "XlaSend",
      "xlaSendTPUEmbeddingGradients": "XlaSendTPUEmbeddingGradients",
      "xlaSendTPUEmbeddingGradientsV2": "XlaSendTPUEmbeddingGradientsV2",
      "xlaSendToHost": "XlaSendToHost",
      "xlaSetBound": "XlaSetBound",
      "xlaSetDynamicDimensionSize": "XlaSetDynamicDimensionSize",
      "xlaSharding": "XlaSharding",
      "xlaSort": "XlaSort",
      "xlaSparseCoreAdagrad": "XlaSparseCoreAdagrad",
      "xlaSparseCoreAdagradMomentum": "XlaSparseCoreAdagradMomentum",
      "xlaSparseCoreAdam": "XlaSparseCoreAdam",
      "xlaSparseCoreFtrl": "XlaSparseCoreFtrl",
      "xlaSparseCoreSgd": "XlaSparseCoreSgd",
      "xlaSparseDenseMatmul": "XlaSparseDenseMatmul",
      "xlaSparseDenseMatmulGradWithAdagradAndCsrInput": "XlaSparseDenseMatmulGradWithAdagradAndCsrInput",
      "xlaSparseDenseMatmulGradWithAdagradAndStaticBufferSize": "XlaSparseDenseMatmulGradWithAdagradAndStaticBufferSize",
      "xlaSparseDenseMatmulGradWithAdagradMomentumAndCsrInput": "XlaSparseDenseMatmulGradWithAdagradMomentumAndCsrInput",
      "xlaSparseDenseMatmulGradWithAdagradMomentumAndStaticBufferSize": "XlaSparseDenseMatmulGradWithAdagradMomentumAndStaticBufferSize",
      "xlaSparseDenseMatmulGradWithAdamAndCsrInput": "XlaSparseDenseMatmulGradWithAdamAndCsrInput",
      "xlaSparseDenseMatmulGradWithAdamAndStaticBufferSize": "XlaSparseDenseMatmulGradWithAdamAndStaticBufferSize",
      "xlaSparseDenseMatmulGradWithCsrInput": "XlaSparseDenseMatmulGradWithCsrInput",
      "xlaSparseDenseMatmulGradWithFtrlAndCsrInput": "XlaSparseDenseMatmulGradWithFtrlAndCsrInput",
      "xlaSparseDenseMatmulGradWithFtrlAndStaticBufferSize": "XlaSparseDenseMatmulGradWithFtrlAndStaticBufferSize",
      "xlaSparseDenseMatmulGradWithSgdAndCsrInput": "XlaSparseDenseMatmulGradWithSgdAndCsrInput",
      "xlaSparseDenseMatmulGradWithSgdAndStaticBufferSize": "XlaSparseDenseMatmulGradWithSgdAndStaticBufferSize",
      "xlaSparseDenseMatmulWithCsrInput": "XlaSparseDenseMatmulWithCsrInput",
      "xlaSparseDenseMatmulWithStaticBufferSize": "XlaSparseDenseMatmulWithStaticBufferSize",
      "xlaSplitND": "XlaSplitND",
      "xlaSpmdFullToShardShape": "XlaSpmdFullToShardShape",
      "xlaSpmdShardToFullShape": "XlaSpmdShardToFullShape",
      "xlaSvd": "XlaSvd",
      "xlaVariadicReduce": "XlaVariadicReduce",
      "xlaVariadicReduceV2": "XlaVariadicReduceV2",
      "xlaVariadicSort": "XlaVariadicSort",
      "xlaWhile": "XlaWhile",
      "xlog1py": "Xlog1py",
      "zerosLike": "ZerosLike",
      "zipDataset": "ZipDataset",
    ]
  }
}
